CheckoutSummary.tsx
// productcomponents/CheckoutSummary.tsx
'use client';

import { IProduct, IVariantSelection } from '../productlib/types';
import { formatPrice } from '../productlib/currency';

interface CheckoutSummaryProps {
  product: IProduct;
  quantity: number;
  variantSelections: IVariantSelection[];
  selectedShipping?: string;
  localCurrency?: string;
  subtotal: number;
  vat: number;
  shipping: number;
  total: number;
  displayCurrency: string;
  taxRate?: number;
}

// Define an extended product type that explicitly includes our local currency properties
interface ProductWithLocalCurrency extends IProduct {
  localPrice?: number;
  localCurrency?: string;
}

const CheckoutSummary: React.FC<CheckoutSummaryProps> = ({
  product,
  quantity,
  variantSelections,
  selectedShipping,
  localCurrency,
  subtotal,
  vat,
  shipping,
  total,
  displayCurrency,
  taxRate = 0
}) => {
  // Cast product to our extended type to avoid TypeScript errors
  const productWithLocal = product as ProductWithLocalCurrency;
  
  // Use product local price if available, or fall back to original price
  const displayPrice = productWithLocal.localPrice !== undefined ? productWithLocal.localPrice : product.price;

  const formatImageUrl = (url: string): string => {
    // If it's already a full URL, use it as-is
    if (url.startsWith('http')) {
      return url;
    }
    
    // Make sure URLs that start with /uploads have the proper /api prefix
    if (url.startsWith('/uploads') && !url.startsWith('/api/uploads')) {
      return `/api${url}`;
    }
    
    // URLs that already have /api/uploads are good
    if (url.startsWith('/api/uploads')) {
      return url;
    }
    
    // For all other cases, ensure it has the complete path
    return `/api/uploads/${url.replace(/^\//, '')}`;
  };

  // Get recurring text for digital products
  const getRecurringText = (): string => {
    if (product.type === 'digital' && product.digital?.recurring) {
      const { interval } = product.digital.recurring;
      if (interval === 'monthly') return '/mo';
      if (interval === 'yearly') return '/yr';
    }
    return '';
  };

  // Get trial text for digital products
  const getTrialText = (): string => {
    if (product.type === 'digital' && product.digital?.recurring?.hasTrial) {
      const trialDays = product.digital.recurring.trialDays || 0;
      if (trialDays > 0) {
        return `${trialDays}-day trial`;
      }
      return 'Free trial';
    }
    return '';
  };

  const recurringText = getRecurringText();
  const trialText = getTrialText();
  
  return (
    <>
      <style jsx>{`
        .product-details {
          background: #f8f9fa;
          border: 1px solid #e6ebf1;
          border-radius: 6px;
          padding: 20px;
          margin-top: 20px;
        }
        
        .detail-row {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 12px;
          font-size: 14px;
        }
        
        .detail-label {
          color: #8898aa;
          display: flex;
          align-items: center;
          gap: 8px;
        }
        
        .detail-value {
          color: #32325d;
          font-weight: 500;
        }
        
        .total-row {
          border-top: 1px solid #e6ebf1;
          padding-top: 12px;
          margin-top: 12px;
          font-weight: 600;
          font-size: 16px;
        }
        
        .product-info {
          display: flex;
          align-items: flex-start;
          gap: 12px;
          margin-bottom: 20px;
          padding-bottom: 16px;
          border-bottom: 1px solid #e6ebf1;
        }
        
        .product-image {
          width: 48px;
          height: 48px;
          background: #f6f9fc;
          border-radius: 6px;
          overflow: hidden;
          flex-shrink: 0;
          border: 1px solid #e6ebf1;
        }
        
        .product-image img {
          width: 100%;
          height: 100%;
          object-fit: cover;
        }

        .product-image-placeholder {
          width: 100%;
          height: 100%;
          display: flex;
          align-items: center;
          justify-content: center;
          color: #8898aa;
          font-size: 12px;
        }
        
        .product-text {
          flex: 1;
          min-width: 0;
        }
        
        .product-title {
          font-size: 14px;
          font-weight: 500;
          color: #32325d;
          margin-bottom: 4px;
          word-wrap: break-word;
        }
        
        .product-variants {
          font-size: 12px;
          color: #8898aa;
          margin-bottom: 4px;
        }
        
        .product-quantity {
          font-size: 12px;
          color: #8898aa;
        }

        .product-meta {
          font-size: 12px;
          color: #8898aa;
          margin-bottom: 2px;
        }

        .product-subscription {
          font-size: 12px;
          color: #2563eb;
          margin-bottom: 2px;
          font-weight: 500;
        }

        .product-trial {
          font-size: 11px;
          color: #16a34a;
          background: #f0fdf4;
          padding: 2px 6px;
          border-radius: 3px;
          display: inline-block;
          margin-bottom: 2px;
        }
        
        .product-price {
          font-size: 14px;
          font-weight: 500;
          color: #32325d;
          flex-shrink: 0;
          display: flex;
          flex-direction: column;
          align-items: flex-end;
          gap: 2px;
        }

        .price-main {
          display: flex;
          align-items: baseline;
          gap: 2px;
        }

        .price-recurring {
          font-size: 11px;
          color: #6b7280;
        }
        
        .original-price {
          font-size: 12px;
          color: #8898aa;
          margin-top: 12px;
          text-align: right;
        }
        
        .free-badge {
          color: #00d924;
          font-weight: 500;
        }

        .vat-row {
          color: #6b7c93;
        }

        .vat-icon {
          margin-right: 4px;
          font-size: 12px;
        }
      `}</style>
      
      <div className="product-details">
        {/* Product Info */}
        <div className="product-info">
          {/* Product Image */}
          <div className="product-image">
            {product.images && product.images.length > 0 ? (
              <img
                src={formatImageUrl(product.images.find(img => img.isMain)?.url || product.images[0].url)}
                alt={product.title}
              />
            ) : (
              <div className="product-image-placeholder">
                <i className="fas fa-image"></i>
              </div>
            )}
          </div>
          
          {/* Product Details */}
          <div className="product-text">
            <div className="product-title">{product.title}</div>
            
            {/* Product Type */}
            <div className="product-meta">
              {product.type === 'digital' ? 'üì± Digital Product' : 'üì¶ Physical Product'}
            </div>

            {/* SKU and Barcode */}
            {product.sku && (
              <div className="product-meta">SKU: {product.sku}</div>
            )}
            {product.barcode && (
              <div className="product-meta">Barcode: {product.barcode}</div>
            )}

            {/* Subscription Info */}
            {recurringText && (
              <div className="product-subscription">
                üîÑ Subscription{recurringText}
              </div>
            )}

            {/* Trial Info */}
            {trialText && (
              <div className="product-trial">
                üéÅ {trialText}
              </div>
            )}
            
            {/* Selected variants */}
            {variantSelections.length > 0 && variantSelections.every(v => v.value) && (
              <div className="product-variants">
                {variantSelections.map((selection, index) => (
                  <div key={index}>
                    {selection.name}: {selection.value}
                  </div>
                ))}
              </div>
            )}

            {/* Shipping Method for Physical Products */}
            {product.type === 'physical' && selectedShipping && (
              <div className="product-meta">
                üöö Shipping: {selectedShipping}
              </div>
            )}
            
            {/* Quantity - only show if quantity is enabled or quantity > 1 */}
            {(product.quantityEnabled === true || quantity > 1) && (
              <div className="product-quantity">Qty: {quantity}</div>
            )}
          </div>
          
          {/* Price */}
          <div className="product-price">
            <div className="price-main">
              {formatPrice(displayPrice * quantity, displayCurrency)}
              {recurringText && quantity === 1 && (
                <span className="price-recurring">{recurringText}</span>
              )}
            </div>
          </div>
        </div>
        
        {/* Price Breakdown */}
        <div className="detail-row">
          <span className="detail-label">Subtotal</span>
          <span className="detail-value">{formatPrice(subtotal, displayCurrency)}</span>
        </div>
        
        {vat > 0 && (
          <div className="detail-row vat-row">
            <span className="detail-label">
              <i className="fas fa-receipt vat-icon"></i>
              VAT{taxRate > 0 && ` (${(taxRate * 100).toFixed(1)}%)`}
            </span>
            <span className="detail-value">{formatPrice(vat, displayCurrency)}</span>
          </div>
        )}
        
        {shipping > 0 && (
          <div className="detail-row">
            <span className="detail-label">
              <i className="fas fa-truck"></i>
              Shipping
            </span>
            <span className="detail-value">{formatPrice(shipping, displayCurrency)}</span>
          </div>
        )}
        
        {shipping === 0 && selectedShipping && (
          <div className="detail-row">
            <span className="detail-label">
              <i className="fas fa-truck"></i>
              Shipping
            </span>
            <span className="detail-value free-badge">Free</span>
          </div>
        )}
        
        {/* Total */}
        <div className="detail-row total-row">
          <span className="detail-label">Total</span>
          <span className="detail-value">
            {formatPrice(total, displayCurrency)}
          </span>
        </div>
        
        {/* Show original price if converted */}
        {displayCurrency !== product.defaultCurrency && (
          <div className="original-price">
            Original: {formatPrice(product.price * quantity, product.defaultCurrency)}
          </div>
        )}
      </div>
    </>
  );
};

export default CheckoutSummary;

PaymentForm.tsx
// productcomponents/PaymentForm.tsx
'use client';
import { useState, useEffect, FormEvent } from 'react';
import { loadStripe, Stripe, StripeElements, StripeCardNumberElement } from '@stripe/stripe-js';
import {
  Elements,
  useStripe,
  useElements,
  CardNumberElement,
  CardExpiryElement,
  CardCvcElement,
} from '@stripe/react-stripe-js';
import { ICountry, IState } from 'country-state-city';
import { Country, State } from 'country-state-city';

import { IBillingInfo } from '../productlib/types';
import { isPixSupported, getUserCountry } from '../productlib/currency';
import { validateBillingInfo } from '../productlib/utils';
import logger from '../productlib/logger';

interface PaymentFormProps {
  currency: string;
  amount: number; // Expected in smallest currency unit (e.g., cents)
  transactionId: string;
  onSubmit: (
    billingInfo: IBillingInfo,
    paymentMethod: 'card' | 'pix' | 'paypal' | 'wallet' | 'other',
    status: 'pending' | 'successful' | 'canceled',
    paymentIntentId?: string
  ) => void;
  isSubmitting: boolean;
  // Add product details needed for create-intent
  productOwnerId: string;
  productId: string;
  productName: string;
  quantity: number;
  // Add country and state change handlers for VAT calculation
  onCountryChange?: (countryCode: string) => void;
  onStateChange?: (stateCode: string) => void;
}

// Interface for CheckoutForm props
interface CheckoutFormPropsInternal {
  currency: string;
  amount: number;
  transactionId: string;
  onSubmit: PaymentFormProps['onSubmit'];
  isSubmitting: boolean;
  billingInfo: IBillingInfo;
  setBillingInfo: (info: IBillingInfo | ((prev: IBillingInfo) => IBillingInfo)) => void;
  errors: Record<string, string>;
  setErrors: (errors: Record<string, string> | ((prev: Record<string, string>) => Record<string, string>)) => void;
  productOwnerId: string;
  productId: string;
  productName: string;
  quantityParam: number;
  onCountryChange?: (countryCode: string) => void;
  onStateChange?: (stateCode: string) => void;
}

let stripePromiseSingleton: Promise<Stripe | null> | null = null;

const getStripeInstance = (): Promise<Stripe | null> => {
  if (!stripePromiseSingleton) {
    stripePromiseSingleton = (async () => {
      try {
        const baseUrl = process.env.NEXT_PUBLIC_API_BASE_URL ||
                        (process.env.NODE_ENV === 'development' ? 'http://localhost:5000' : window.location.origin);
        
        const apiUrl = `${baseUrl.replace(/\/api$/, '')}/api/payments/config`;
        logger.info('[PaymentForm] Fetching payment config from:', apiUrl);
        const response = await fetch(apiUrl);

        if (!response.ok) {
            const errorText = await response.text();
            logger.error('[PaymentForm] Failed to fetch payment config. Status:', response.status, 'Response:', errorText);
            return null;
        }
        const config = await response.json();
        logger.info('[PaymentForm] Payment config response:', config);
        
        if (config.success && config.data?.processors?.stripe?.configured && config.data.processors.stripe.publicKey) {
          logger.info('[PaymentForm] Stripe loaded successfully with key prefix:', config.data.processors.stripe.publicKey.substring(0, 20) + '...');
          return loadStripe(config.data.processors.stripe.publicKey);
        } else {
          logger.error('[PaymentForm] Stripe not configured or public key missing in fetched config:', config.data?.processors?.stripe);
          return null;
        }
      } catch (error) {
        logger.error('[PaymentForm] Error loading Stripe config or initializing Stripe.js:', error);
        return null;
      }
    })();
  }
  return stripePromiseSingleton;
};

const CARD_ELEMENT_OPTIONS = {
  style: {
    base: {
      color: '#32325d',
      fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Helvetica Neue", sans-serif',
      fontSmoothing: 'antialiased',
      fontSize: '16px',
      '::placeholder': {
        color: '#aab7c4',
      },
    },
    invalid: {
      color: '#fa755a',
      iconColor: '#fa755a',
    },
  },
  showIcon: false,
};

const CheckoutForm: React.FC<CheckoutFormPropsInternal> = ({
  currency,
  amount,
  transactionId,
  onSubmit,
  isSubmitting,
  billingInfo,
  setBillingInfo,
  errors,
  setErrors,
  productOwnerId,
  productId,
  productName,
  quantityParam,
  onCountryChange,
  onStateChange,
}) => {
  const stripe = useStripe();
  const elements = useElements();
  const [paymentError, setPaymentError] = useState<string>('');
  const [processing, setProcessing] = useState(false);
  const [countries, setCountries] = useState<ICountry[]>([]);
  const [states, setStates] = useState<IState[]>([]);
  const [selectedCountry, setSelectedCountry] = useState<string>(billingInfo.country || '');
  const [clientSecret, setClientSecret] = useState<string>('');
  const [paymentIntentCreated, setPaymentIntentCreated] = useState(false);
  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState<'card' | 'pix'>('card');
  const [addressLine2, setAddressLine2] = useState<string>('');

  const pixSupported = isPixSupported(currency);

  useEffect(() => {
    setCountries(Country.getAllCountries());
  }, []);

// Fixed useEffect hooks to prevent loops
useEffect(() => {
  if (selectedCountry) {
    setStates(State.getStatesOfCountry(selectedCountry));
  } else {
    setStates([]);
  }
}, [selectedCountry]);

useEffect(() => {
  if (billingInfo.country && billingInfo.country !== selectedCountry) {
    setSelectedCountry(billingInfo.country);
  }
}, [billingInfo.country, selectedCountry]);

// Single effect for notifying parent about location changes
useEffect(() => {
  // Only notify if we have a complete location change and avoid rapid calls
  const timeoutId = setTimeout(() => {
    if (onCountryChange && selectedCountry) {
      onCountryChange(selectedCountry);
    }
    if (onStateChange && billingInfo.state) {
      onStateChange(billingInfo.state);
    }
  }, 100); // Small delay to prevent rapid calls

  return () => clearTimeout(timeoutId);
}, [selectedCountry, billingInfo.state]); // Remove callback functions from dependencies

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setBillingInfo(prev => ({ ...prev, [name]: value }));
    if (errors[name]) {
      setErrors(prev => { const newErrors = { ...prev }; delete newErrors[name]; return newErrors; });
    }
  };

const handleCountryChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
  const newCountry = e.target.value;
  setSelectedCountry(newCountry);
  setBillingInfo(prev => ({ ...prev, country: newCountry, state: '' }));
};

const handleStateChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
  const newState = e.target.value;
  setBillingInfo(prev => ({ ...prev, state: newState }));
};

  const createPaymentIntent = async (): Promise<string | null> => {
    if (paymentIntentCreated || clientSecret) {
      return clientSecret;
    }

    try {
      const baseUrl = process.env.NEXT_PUBLIC_API_BASE_URL ||
                      (process.env.NODE_ENV === 'development' ? 'http://localhost:5000' : window.location.origin);
      
      const apiUrl = `${baseUrl.replace(/\/api$/, '')}/api/payments/create-intent`;
      
      logger.info('[PaymentForm] Creating payment intent for transaction:', transactionId);
const response = await fetch(apiUrl, {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    amount, // This is already smallest unit (e.g. cents)
    currency: currency.toLowerCase(), // This is the currency code like 'brl'
    transactionId, // The TX_... ID
    description: `Purchase: ${productName} (x${quantityParam}) - TX: ${transactionId}`,
    // Pass new data
    productOwnerId: productOwnerId,
    productId: productId,
    productName: productName,
    quantity: quantityParam,
    customerEmail: billingInfo.email,
    // Add billing info to be stored in Stripe metadata
    billingInfo: {
      name: billingInfo.name || '',
      email: billingInfo.email || '',
      phone: billingInfo.phone || '',
      address: billingInfo.address || '',
      city: billingInfo.city || '',
      state: billingInfo.state || '',
      postalCode: billingInfo.postalCode || '',  
      country: billingInfo.country || ''
    }
  }),
});
      
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({message: "Failed to parse error from create-intent"}));
        logger.error('[PaymentForm] Failed to create payment intent. Status:', response.status, 'Error:', errorData);
        throw new Error(errorData.message || `Failed to initialize payment (HTTP ${response.status})`);
      }

      const data = await response.json();
      if (data.success && data.data.clientSecret) {
        logger.info('[PaymentForm] Payment intent created successfully. Client Secret (first 20):', data.data.clientSecret.substring(0,20)+'...');
        setClientSecret(data.data.clientSecret);
        setPaymentIntentCreated(true);
        return data.data.clientSecret;
      } else {
        logger.error('[PaymentForm] Failed to get clientSecret from create-intent:', data.message || 'Unknown error', data.errors);
        throw new Error(data.message || 'Failed to initialize payment details.');
      }
    } catch (error) {
      logger.error('[PaymentForm] Error creating payment intent:', error);
      throw error;
    }
  };

  const handleSubmit = async (e: FormEvent) => {
    e.preventDefault();
    setPaymentError('');
    
    // Merge address line 1 and 2
    const mergedAddress = addressLine2 
      ? `${billingInfo.address}, ${addressLine2}`
      : billingInfo.address;
    
    const finalBillingInfo = {
      ...billingInfo,
      address: mergedAddress
    };
    
    if (selectedPaymentMethod === 'pix') {
      // Handle PIX payment
      const validation = validateBillingInfo(finalBillingInfo);
      if (!validation.valid) {
        setErrors(validation.errors);
        return;
      }
      
      onSubmit(finalBillingInfo, 'pix', 'pending');
      return;
    }

    if (!stripe || !elements) {
      setPaymentError('Stripe has not loaded yet. Please try again.');
      logger.warn('[CheckoutForm] handleSubmit: Stripe or Elements not ready.');
      return;
    }

    const cardNumberElement = elements.getElement(CardNumberElement);
    if (!cardNumberElement) {
      setPaymentError('Card number element not ready.');
      logger.warn('[CheckoutForm] handleSubmit: CardNumberElement not found.');
      return;
    }
    
    if (processing || isSubmitting) return;
    setProcessing(true);

    try {
      const validation = validateBillingInfo(finalBillingInfo);
      if (!validation.valid) {
        setErrors(validation.errors);
        setProcessing(false);
        logger.info('[CheckoutForm] Billing info validation failed:', validation.errors);
        return;
      }

      let currentClientSecret = clientSecret;
      if (!currentClientSecret) {
        currentClientSecret = await createPaymentIntent();
        if (!currentClientSecret) {
          setPaymentError('Failed to initialize payment. Please try again.');
          setProcessing(false);
          return;
        }
      }
      
      logger.info('[CheckoutForm] Attempting to create PaymentMethod...');
      const { error: createPmError, paymentMethod } = await stripe.createPaymentMethod({
        type: 'card',
        card: cardNumberElement,
        billing_details: {
          name: finalBillingInfo.name,
          email: finalBillingInfo.email,
          phone: finalBillingInfo.phone,
          address: {
            line1: finalBillingInfo.address,
            city: finalBillingInfo.city,
            state: finalBillingInfo.state,
            postal_code: finalBillingInfo.postalCode,
            country: finalBillingInfo.country,
          },
        },
      });

      if (createPmError) {
        logger.error('[CheckoutForm] createPaymentMethod failed:', createPmError);
        setPaymentError(createPmError.message || 'Failed to process payment details.');
        onSubmit(finalBillingInfo, 'card', 'canceled');
        setProcessing(false);
        return;
      }
      logger.info('[CheckoutForm] PaymentMethod created:', paymentMethod.id);

      logger.info('[CheckoutForm] Confirming card payment with clientSecret (first 20 chars):', currentClientSecret.substring(0,20)+'...');
      const { error: confirmError, paymentIntent } = await stripe.confirmCardPayment(currentClientSecret, {
        payment_method: paymentMethod.id,
      });

      if (confirmError) {
        logger.error('[CheckoutForm] Payment confirmation failed:', confirmError);
        setPaymentError(confirmError.message || 'Payment failed. Please try again.');
        onSubmit(finalBillingInfo, 'card', 'canceled', paymentIntent ? paymentIntent.id : undefined);
      } else if (paymentIntent) {
        logger.info('[CheckoutForm] Payment intent after confirmation:', paymentIntent.id, 'Status:', paymentIntent.status);
        let status: 'pending' | 'successful' | 'canceled' = 'pending';
        if (paymentIntent.status === 'succeeded') status = 'successful';
        else if (paymentIntent.status === 'canceled') status = 'canceled';
        else if (['requires_action', 'requires_confirmation', 'processing'].includes(paymentIntent.status)) status = 'pending';
        
        onSubmit(finalBillingInfo, 'card', status, paymentIntent.id);
      }
    } catch (err: any) {
      logger.error('[CheckoutForm] Unexpected error during payment submission:', err);
      setPaymentError('An unexpected error occurred. Please try again.');
      
      const mergedAddress = addressLine2 
        ? `${billingInfo.address}, ${addressLine2}`
        : billingInfo.address;
      
      const finalBillingInfo = {
        ...billingInfo,
        address: mergedAddress
      };
      
      onSubmit(finalBillingInfo, 'card', 'canceled');
    } finally {
      setProcessing(false);
    }
  };

  const getDisplayAmount = () => {
    return new Intl.NumberFormat(undefined, { 
      style: 'currency', 
      currency: currency.toUpperCase() 
    }).format(amount / 100);
  };

  return (
    <>
      <style jsx>{`
        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }
        
        .form-group {
          margin-bottom: 24px;
        }
        
        .form-label {
          display: block;
          font-size: 13px;
          font-weight: 500;
          color: #6b7c93;
          margin-bottom: 8px;
        }
        
        .section-title {
          font-size: 16px;
          font-weight: 500;
          color: #32325d;
          margin-bottom: 16px;
        }
        
        .form-input {
          width: 100%;
          padding: 12px;
          border: 1px solid #cfd7df;
          border-radius: 4px;
          font-size: 16px;
          color: #32325d;
          background: white;
          transition: border-color 0.15s ease, box-shadow 0.15s ease;
        }
        
        .form-input:focus {
          outline: none;
          border-color: #635bff;
          box-shadow: 0 0 0 3px rgba(99, 91, 255, 0.2);
        }
        
        .form-input::placeholder {
          color: #aab7c4;
        }
        
        .billing-group {
          border: 1px solid #cfd7df;
          border-radius: 4px;
          overflow: hidden;
          background: white;
        }
        
        .billing-group .form-input {
          border: none;
          border-radius: 0;
          width: 100%;
        }
        
        .billing-group .form-input:focus {
          box-shadow: none;
          border-color: transparent;
        }
        
        .billing-group > *:not(:last-child) {
          border-bottom: 1px solid #e6ebf1;
        }
        
        .billing-row {
          display: flex;
        }
        
        .billing-row .form-input {
          border-bottom: none;
        }
        
        .billing-row .form-input:first-child {
          border-right: 1px solid #e6ebf1;
        }
        
        .phone-input {
          position: relative;
        }
        
        .flag-icon {
          position: absolute;
          left: 12px;
          top: 50%;
          transform: translateY(-50%);
          width: 20px;
          height: 15px;
          z-index: 2;
          object-fit: cover;
          border-radius: 2px;
        }
        
        .phone-input .form-input {
          padding-left: 36px;
          padding-right: 40px;
          border: none;
        }
        
        .info-icon {
          position: absolute;
          right: 12px;
          top: 50%;
          transform: translateY(-50%);
          color: #8898aa;
          font-size: 12px;
          cursor: help;
        }
        
        .payment-methods {
          margin: 20px 0;
        }
        
        .payment-method {
          border: 1px solid #e6ebf1;
          border-radius: 6px;
          margin-bottom: 12px;
          overflow: hidden;
          transition: border-color 0.15s, box-shadow 0.15s;
        }
        
        .payment-method:hover {
          border-color: #cfd7df;
        }
        
        .payment-method.selected {
          border-color: #000;
        }
        
        .payment-method-header {
          padding: 16px;
          display: flex;
          align-items: center;
          gap: 12px;
          cursor: pointer;
          background: #fff;
          transition: background-color 0.15s;
          border: none;
          width: 100%;
          text-align: left;
        }
        
        .payment-method-header:hover {
          background: #f8f9fa;
        }
        
        .payment-radio {
          width: 18px;
          height: 18px;
          border: 2px solid #cfd7df;
          border-radius: 50%;
          position: relative;
          flex-shrink: 0;
        }
        
        .payment-radio.checked {
          border-color: #000;
        }
        
        .payment-radio.checked::after {
          content: '';
          width: 8px;
          height: 8px;
          background: #000;
          border-radius: 50%;
          position: absolute;
          top: 50%;
          left: 50%;
          transform: translate(-50%, -50%);
        }
        
        .payment-method-info {
          flex: 1;
          display: flex;
          align-items: center;
          gap: 12px;
        }
        
        .payment-method-icon {
          width: 32px;
          height: 20px;
          background: #f7f9fa;
          border: 1px solid #e6ebf1;
          border-radius: 4px;
          display: flex;
          align-items: center;
          justify-content: center;
          font-size: 12px;
          color: #32325d;
          font-weight: 600;
        }
        
        .payment-method-name {
          font-size: 16px;
          font-weight: 500;
          color: #32325d;
        }
        
        .payment-icons {
          display: flex;
          gap: 6px;
        }
        
        .card-brand-icon {
          width: 24px;
          height: 16px;
        }
        
        .payment-details {
          padding: 0 16px 16px;
          border-top: 1px solid #e6ebf1;
          display: none;
        }
        
        .payment-method.selected .payment-details {
          display: block;
        }
        
        .card-group {
          border: 1px solid #cfd7df;
          border-radius: 4px;
          overflow: hidden;
          background: white;
        }
        
        .card-number-input {
          position: relative;
          padding: 12px;
          border-bottom: 1px solid #e6ebf1;
        }
        
        .card-row {
          display: flex;
        }
        
        .card-expiry {
          flex: 1;
          position: relative;
          padding: 12px;
          border-right: 1px solid #e6ebf1;
        }
        
        .card-cvc {
          flex: 1;
          position: relative;
          padding: 12px;
        }
        
        .cvc-icon {
          position: absolute;
          right: 12px;
          top: 50%;
          transform: translateY(-50%);
          color: #8898aa;
          font-size: 14px;
        }
        
        .billing-checkbox {
          display: flex;
          align-items: center;
          gap: 8px;
          margin-top: 16px;
          font-size: 14px;
          color: #6b7c93;
        }
        
        .billing-checkbox input[type="checkbox"] {
          width: 16px;
          height: 16px;
          accent-color: #000;
        }
        
        .checkbox-group {
          display: flex;
          align-items: flex-start;
          gap: 12px;
          padding: 16px;
          border: 1px solid #e6ebf1;
          border-radius: 4px;
          background: #f7f9fc;
          margin-bottom: 24px;
        }
        
        .checkbox {
          margin-top: 2px;
          width: 16px;
          height: 16px;
          accent-color: #000;
        }
        
        .checkbox-label {
          font-size: 13px;
          color: #32325d;
          line-height: 1.4;
        }
        
        .checkbox-sublabel {
          font-size: 13px;
          color: #8898aa;
          margin-top: 4px;
        }
        
        .pay-button {
          width: 100%;
          padding: 14px;
          background: #0073E6;
          color: white;
          border: none;
          border-radius: 6px;
          font-size: 16px;
          font-weight: 500;
          cursor: pointer;
          transition: background-color 0.15s ease;
          margin-bottom: 16px;
        }
        
        .pay-button:hover:not(:disabled) {
          background: #0066CC;
        }
        
        .pay-button:disabled {
          background: #8898aa;
          cursor: not-allowed;
        }
        
        .footer {
          text-align: center;
          margin-top: 24px;
        }
        
        .footer-text {
          font-size: 12px;
          color: #8898aa;
          margin-bottom: 8px;
        }
        
        .footer-links {
          display: flex;
          justify-content: center;
          gap: 16px;
        }
        
        .footer-link {
          font-size: 12px;
          color: #8898aa;
          text-decoration: none;
        }
        
        .footer-link:hover {
          text-decoration: underline;
        }
        
        .or-divider {
          text-align: center;
          margin: 20px 0;
          position: relative;
          color: #8898aa;
          font-size: 14px;
        }
        
        .or-divider::before {
          content: '';
          position: absolute;
          top: 50%;
          left: 0;
          right: 0;
          height: 1px;
          background: #e6ebf1;
        }
        
        .or-divider span {
          background: #fff;
          padding: 0 16px;
          position: relative;
        }
        
        .error-display {
          background: #fdf2f2;
          border: 1px solid #fecaca;
          border-radius: 6px;
          padding: 12px;
          margin-bottom: 16px;
          color: #dc2626;
          font-size: 14px;
          text-align: center;
        }
        
        .hidden-methods {
          display: none;
        }
      `}</style>

      <form onSubmit={handleSubmit}>
        {/* Pay with Link Button - Hidden for now */}
        <div className="hidden-methods">
          <div className="form-group">
            <button type="button" style={{
              width: '100%',
              padding: '14px',
              background: '#00D924',
              color: 'white',
              border: 'none',
              borderRadius: '6px',
              fontSize: '16px',
              fontWeight: '600',
              cursor: 'pointer',
              marginBottom: '16px',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              gap: '8px'
            }}>
              Pay with <strong>link</strong>
            </button>
            <div className="or-divider">
              <span>Or</span>
            </div>
          </div>
        </div>

        {/* Shipping Information */}
        <div className="form-group">
          <div className="section-title">Shipping information</div>
          
          <div className="form-group">
            <label className="form-label">Email</label>
            <input 
              type="email" 
              name="email"
              className="form-input" 
              placeholder="email@example.com" 
              value={billingInfo.email}
              onChange={handleInputChange}
              required 
              disabled={isSubmitting || processing}
            />
            {errors.email && <div style={{color: '#dc2626', fontSize: '12px', marginTop: '4px'}}>{errors.email}</div>}
          </div>

          <div className="form-group">
            <label className="form-label">Shipping address</label>
            <div className="billing-group">
              <input 
                type="text" 
                name="name"
                className="form-input" 
                placeholder="Full name" 
                value={billingInfo.name}
                onChange={handleInputChange}
                required 
                disabled={isSubmitting || processing}
              />
              {errors.name && <p className="mt-1 text-xs text-red-600">{errors.name}</p>}
              
              <select 
                name="country"
                className="form-input" 
                value={selectedCountry}
                onChange={handleCountryChange}
                required
                disabled={isSubmitting || processing}
              >
                <option value="">Select Country</option>
                {countries.map((country) => (
                  <option key={country.isoCode} value={country.isoCode}>
                    {country.name}
                  </option>
                ))}
              </select>
              {errors.country && <p className="mt-1 text-xs text-red-600">{errors.country}</p>}
              
              <input 
                type="text" 
                name="address"
                className="form-input" 
                placeholder="Address line 1" 
                value={billingInfo.address}
                onChange={handleInputChange}
                required 
                disabled={isSubmitting || processing}
              />
              {errors.address && <p className="mt-1 text-xs text-red-600">{errors.address}</p>}
              
              <input 
                type="text" 
                className="form-input" 
                placeholder="Address line 2" 
                value={addressLine2}
                onChange={(e) => setAddressLine2(e.target.value)}
                disabled={isSubmitting || processing}
              />
              
              <div className="billing-row">
                <input 
                  type="text" 
                  name="city"
                  className="form-input" 
                  placeholder="City" 
                  value={billingInfo.city}
                  onChange={handleInputChange}
                  required 
                  disabled={isSubmitting || processing}
                />
                {errors.city && <p className="mt-1 text-xs text-red-600">{errors.city}</p>}
                <input 
                  type="text" 
                  name="postalCode"
                  className="form-input" 
                  placeholder="ZIP" 
                  value={billingInfo.postalCode}
                  onChange={handleInputChange}
                  required 
                  disabled={isSubmitting || processing}
                />
                {errors.postalCode && <p className="mt-1 text-xs text-red-600">{errors.postalCode}</p>}
              </div>
              
              {states.length > 0 ? (
                <select 
                  name="state"
                  className="form-input" 
                  value={billingInfo.state}
                  onChange={handleStateChange}
                  required
                  disabled={isSubmitting || processing || states.length === 0}
                >
                  <option value="">Select State</option>
                  {states.map((state) => (
                    <option key={state.isoCode} value={state.isoCode}>
                      {state.name}
                    </option>
                  ))}
                </select>
              ) : selectedCountry ? (
                <input 
                  type="text" 
                  name="state"
                  className="form-input" 
                  placeholder="State / Province (if applicable)" 
                  value={billingInfo.state}
                  onChange={handleInputChange}
                  disabled={isSubmitting || processing}
                />
              ) : null}
              {errors.state && <p className="mt-1 text-xs text-red-600">{errors.state}</p>}
              
              <div className="phone-input">
                <img 
                  src={`https://flagcdn.com/w20/${selectedCountry.toLowerCase()}.png`} 
                  alt={selectedCountry} 
                  className="flag-icon"
                  onError={(e) => {
                    (e.target as HTMLImageElement).src = "https://flagcdn.com/w20/us.png";
                  }}
                />
                <input 
                  type="tel" 
                  name="phone"
                  className="form-input" 
                  placeholder="Phone number (optional)" 
                  value={billingInfo.phone || ''}
                  onChange={handleInputChange}
                  disabled={isSubmitting || processing}
                />
                <i className="fas fa-info-circle info-icon"></i>
              </div>
              {errors.phone && <p className="mt-1 text-xs text-red-600">{errors.phone}</p>}
            </div>
          </div>
        </div>

        {/* Payment Methods */}
        <div className="form-group">
          <div className="section-title">Payment method</div>
          
          <div className="payment-methods">
            {/* Card Payment */}
            <div className={`payment-method ${selectedPaymentMethod === 'card' ? 'selected' : ''}`}>
              <button 
                type="button" 
                className="payment-method-header" 
                onClick={() => setSelectedPaymentMethod('card')}
              >
                <div className={`payment-radio ${selectedPaymentMethod === 'card' ? 'checked' : ''}`}></div>
                <div className="payment-method-info">
                  <div className="payment-method-icon">
                    <i className="fas fa-credit-card"></i>
                  </div>
                  <span className="payment-method-name">Card</span>
                </div>
                <div className="payment-icons">
                  <img src="https://js.stripe.com/v3/fingerprinted/img/visa-365725566f9578a9589553aa9296d178.svg" alt="Visa" className="card-brand-icon" />
                  <img src="https://js.stripe.com/v3/fingerprinted/img/mastercard-4d8844094130711885b5e41b28c9848f.svg" alt="Mastercard" className="card-brand-icon" />
                  <img src="https://js.stripe.com/v3/fingerprinted/img/amex-a49b82f46c5cd6a96a6e418a6ca1717c.svg" alt="American Express" className="card-brand-icon" />
                  <img src="https://js.stripe.com/v3/fingerprinted/img/jcb-271fd06e6e0a5af2601265d1107d8c96.svg" alt="JCB" className="card-brand-icon" />
                </div>
              </button>
              
              <div className="payment-details">
                <div className="form-group">
                  <label className="form-label">Card information</label>
                  <div className="card-group">
                    <div className="card-number-input">
                      <CardNumberElement options={CARD_ELEMENT_OPTIONS} />
                    </div>
                    
                    <div className="card-row">
                      <div className="card-expiry">
                        <CardExpiryElement options={CARD_ELEMENT_OPTIONS} />
                      </div>
                      <div className="card-cvc">
                        <CardCvcElement options={CARD_ELEMENT_OPTIONS} />
                        <i className="fas fa-credit-card cvc-icon"></i>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* PIX Payment - Only show for BRL */}
            {pixSupported && (
              <div className={`payment-method ${selectedPaymentMethod === 'pix' ? 'selected' : ''}`}>
                <button 
                  type="button" 
                  className="payment-method-header" 
                  onClick={() => setSelectedPaymentMethod('pix')}
                >
                  <div className={`payment-radio ${selectedPaymentMethod === 'pix' ? 'checked' : ''}`}></div>
                  <div className="payment-method-info">
                    <div className="payment-method-icon" style={{background: '#32BCAD', color: '#fff'}}>
                      PIX
                    </div>
                    <span className="payment-method-name">PIX</span>
                  </div>
                </button>
                <div className="payment-details">
                  <div style={{padding: '16px 0', fontSize: '14px', color: '#6b7c93'}}>
                    You will receive PIX payment instructions after clicking "Pay".
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Save Information Checkbox */}
        <div className="checkbox-group">
          <input type="checkbox" id="save-info" className="checkbox" />
          <label htmlFor="save-info">
            <div className="checkbox-label">Securely save my information for 1-click checkout</div>
            <div className="checkbox-sublabel">Pay faster on our store and everywhere Link is accepted.</div>
          </label>
        </div>

        {/* Error Display */}
        {paymentError && (
          <div className="error-display">
            {paymentError}
          </div>
        )}

        {/* Pay Button */}
        <button 
          type="submit" 
          className="pay-button"
          disabled={isSubmitting || processing || (selectedPaymentMethod === 'card' && (!stripe || !elements))}
        >
          {isSubmitting || processing ? (
            <div style={{display: 'flex', alignItems: 'center', justifyContent: 'center', gap: '8px'}}>
              <div style={{
                width: '16px',
                height: '16px',
                border: '2px solid white',
                borderTop: '2px solid transparent',
                borderRadius: '50%',
                animation: 'spin 1s linear infinite'
              }}></div>
              <span>Processing...</span>
            </div>
          ) : (
            `Pay ${getDisplayAmount()}`
          )}
        </button>
        
        {selectedPaymentMethod === 'card' && (
          <div style={{textAlign: 'center', marginTop: '16px', fontSize: '13px', color: '#8898aa'}}>
            Your payment information is secure and encrypted.
          </div>
        )}
      </form>

      {/* Footer */}
      <div className="footer">
        <div className="footer-text">
          Powered by <strong>Arkus</strong>
        </div>
        <div className="footer-links">
          <a href="#" className="footer-link">Terms</a>
          <a href="#" className="footer-link">Privacy</a>
        </div>
      </div>
    </>
  );
};

const PaymentForm: React.FC<PaymentFormProps> = ({ 
  currency, 
  amount,
  transactionId,
  onSubmit,
  isSubmitting,
  productOwnerId,
  productId,
  productName,
  quantity,
  onCountryChange,
  onStateChange
}) => {
  const [billingInfo, setBillingInfo] = useState<IBillingInfo>({
    email: '', phone: '', name: '', address: '', city: '', state: '', postalCode: '', country: '',
  });
  const [errors, setErrors] = useState<Record<string, string>>({});
  const [stripeApiPromise, setStripeApiPromise] = useState<Promise<Stripe | null> | null>(null);
  const [stripeError, setStripeError] = useState<string>('');

  const pixSupported = isPixSupported(currency);

  useEffect(() => {
    const detectCountry = async () => {
      try {
        const countryIsoCode = await getUserCountry();
        logger.info("[PaymentForm] Detected user country:", countryIsoCode);
        setBillingInfo(prev => ({ ...prev, country: countryIsoCode }));
        // Notify parent component about initial country detection
        if (onCountryChange) {
          onCountryChange(countryIsoCode);
        }
      } catch (error) {
        logger.error('[PaymentForm] Error detecting country:', error);
        setBillingInfo(prev => ({ ...prev, country: 'US' }));
        if (onCountryChange) {
          onCountryChange('US');
        }
      }
    };
    detectCountry();
  }, [onCountryChange]);

  useEffect(() => {
    logger.info('[PaymentForm] Initializing Stripe.js promise.');
    setStripeApiPromise(getStripeInstance());
  }, []);

  if (stripeError) {
    return (
      <div style={{
        background: 'white',
        borderRadius: '6px',
        border: '1px solid #fecaca',
        padding: '20px',
        textAlign: 'center'
      }}>
        <div style={{
          width: '48px',
          height: '48px',
          background: '#fef2f2',
          borderRadius: '50%',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          margin: '0 auto 16px',
          color: '#dc2626'
        }}>
          <i className="fas fa-exclamation-triangle"></i>
        </div>
        <h3 style={{fontSize: '16px', fontWeight: '500', color: '#32325d', marginBottom: '8px'}}>
          Payment Unavailable
        </h3>
        <p style={{color: '#6b7c93', marginBottom: '16px', fontSize: '14px'}}>{stripeError}</p>
        <button 
          onClick={() => window.location.reload()} 
          style={{
            padding: '8px 16px',
            background: '#0073E6',
            color: 'white',
            border: 'none',
            borderRadius: '4px',
            fontSize: '14px',
            cursor: 'pointer'
          }}
        >
          Try Again
        </button>
      </div>
    );
  }

  if (!stripeApiPromise) {
    return (
      <div style={{
        background: 'white',
        borderRadius: '6px',
        padding: '40px',
        textAlign: 'center'
      }}>
        <div style={{
          width: '32px',
          height: '32px',
          border: '3px solid #635bff',
          borderTop: '3px solid transparent',
          borderRadius: '50%',
          animation: 'spin 1s linear infinite',
          margin: '0 auto 20px'
        }}></div>
        <p style={{color: '#6b7c93', fontSize: '14px'}}>Loading payment form...</p>
      </div>
    );
  }

  return (
    <Elements stripe={stripeApiPromise}>
      <CheckoutForm
        currency={currency}
        amount={amount}
        transactionId={transactionId}
        onSubmit={onSubmit}
        isSubmitting={isSubmitting}
        billingInfo={billingInfo}
        setBillingInfo={setBillingInfo}
        errors={errors}
        setErrors={setErrors}
        productOwnerId={productOwnerId}
        productId={productId}
        productName={productName}
        quantityParam={quantity}
        onCountryChange={onCountryChange}
        onStateChange={onStateChange}
      />
    </Elements>
  );
};

export default PaymentForm;

ProductDisplay.tsx
// productcomponents/ProductDisplay.tsx
'use client';

import { useState, useEffect, useMemo, useCallback } from 'react';
import { useRouter } from 'next/navigation';
import { IProduct, IVariantSelection, IBillingInfo, ITransactionItem } from '../productlib/types';
import { formatPrice, getUserCurrency, convertPrice, isPixSupported } from '../productlib/currency';
import { isProductInStock, calculateShippingFee, generateTransactionId as generateFrontendTxId } from '../productlib/utils';
import { createTransaction, getIPAddress, getDeviceInfo } from '../productlib/api';
import { calculateVATAmount, getTaxInfo } from '../productlib/tax';
import PaymentForm from './PaymentForm';

interface ProductWithLocalCurrency extends IProduct {
  localPrice?: number;
  localCurrency?: string;
}

interface ProductDisplayProps {
  product: IProduct;
}

const ProductDisplay: React.FC<ProductDisplayProps> = ({ product: initialProduct }) => {
  const router = useRouter();
  const [product, setProduct] = useState<ProductWithLocalCurrency>(initialProduct);
  const [isLoading, setIsLoading] = useState(true);
  const [localCurrency, setLocalCurrency] = useState<string>('');
  const [quantity, setQuantity] = useState(1);
  const [variantSelections, setVariantSelections] = useState<IVariantSelection[]>([]);
  const [selectedShipping, setSelectedShipping] = useState<string>('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [errorMessage, setErrorMessage] = useState<string>('');
  const [transactionId, setTransactionId] = useState<string>('');
  const [showProductDetails, setShowProductDetails] = useState(false);
  const [selectedCountry, setSelectedCountry] = useState<string>('');
  const [selectedState, setSelectedState] = useState<string>('');
  const [currentVAT, setCurrentVAT] = useState<number>(0);
  const [taxInfo, setTaxInfo] = useState<{ rate: number; type: string; currency: string }>({ rate: 0, type: 'none', currency: 'USD' });
  const [selectedImageIndex, setSelectedImageIndex] = useState(0);

  useEffect(() => {
    // Generate transaction ID early
    setTransactionId(generateFrontendTxId());
    
    const fetchUserCurrencyAndProductDetails = async () => {
      try {
        setIsLoading(true);
        const currency = await getUserCurrency();
        setLocalCurrency(currency);
        
        if (currency && currency !== initialProduct.defaultCurrency && initialProduct.autoLocalPrice) {
          try {
            const convertedPrice = await convertPrice(initialProduct.price, initialProduct.defaultCurrency, currency);
            setProduct({ ...initialProduct, localPrice: convertedPrice, localCurrency: currency });
          } catch (convError) {
            console.error('[ProductDisplay] Error converting price:', convError);
            setProduct(initialProduct);
          }
        } else {
          setProduct(initialProduct);
        }
      } catch (error) {
        console.error('[ProductDisplay] Error fetching user currency:', error);
        setLocalCurrency(initialProduct.defaultCurrency);
        setProduct(initialProduct);
      } finally {
        setIsLoading(false);
      }
    };
    
    fetchUserCurrencyAndProductDetails();

    if (initialProduct.type === 'physical' && initialProduct.physical?.shippingMethods?.length) {
      setSelectedShipping(initialProduct.physical.shippingMethods[0].name);
    }

    // Initialize variant selections
    if (initialProduct.variants && initialProduct.variants.length > 0) {
      const initialSelections = initialProduct.variants.map(variant => ({
        name: variant.name,
        value: '',
      }));
      setVariantSelections(initialSelections);
    }
  }, [initialProduct]);

// Fixed VAT calculation with debouncing and stable references
useEffect(() => {
  const updateVAT = async () => {
    if (!selectedCountry) {
      setCurrentVAT(0);
      setTaxInfo({ rate: 0, type: 'none', currency: 'USD' });
      return;
    }

    try {
      console.log(`[ProductDisplay] Calculating VAT for country: ${selectedCountry}, state: ${selectedState}`);
      
      // Get the actual price to calculate VAT on (including conversion)
      const priceForVAT = product.localPrice || initialProduct.price;
      const subtotal = priceForVAT * quantity;
      
      // Calculate VAT - always enabled now
      const vatAmount = await calculateVATAmount(subtotal, selectedCountry, selectedState);
      console.log(`[ProductDisplay] VAT calculated: ${vatAmount} for subtotal: ${subtotal}`);
      setCurrentVAT(vatAmount);

      // Get tax info for display
      const info = await getTaxInfo(selectedCountry, selectedState);
      console.log(`[ProductDisplay] Tax info:`, info);
      setTaxInfo(info);
    } catch (error) {
      console.error('Error updating VAT:', error);
      setCurrentVAT(0);
      setTaxInfo({ rate: 0, type: 'none', currency: 'USD' });
    }
  };

  // Debounce the VAT calculation to prevent rapid recalculation
  const timeoutId = setTimeout(updateVAT, 200);
  return () => clearTimeout(timeoutId);
}, [selectedCountry, selectedState, quantity, product.localPrice, initialProduct.price]);

  const paymentDetails = useMemo(() => {
    // Get the display price and currency
    const displayPrice = product.localPrice ?? initialProduct.price;
    const displayCurrency = product.localCurrency || initialProduct.defaultCurrency;
    
    // Calculate components
    const subtotal = displayPrice * quantity;
    const shipping = calculateShippingFee(initialProduct, selectedShipping);
    const vat = currentVAT;
    const total = subtotal + vat + shipping;

    console.log(`[ProductDisplay] Payment details - Subtotal: ${subtotal}, VAT: ${vat}, Shipping: ${shipping}, Total: ${total}`);

    // Amount for Stripe must be in the smallest currency unit (e.g., cents, pence)
    const totalSmallestUnit = Math.round(total * 100);

    return {
      amount: totalSmallestUnit,
      currency: displayCurrency,
      subtotal,
      vat,
      shipping,
      total,
      displayPrice,
      displayCurrency
    };
  }, [product, initialProduct, quantity, selectedShipping, currentVAT]);

  // Check if product can be purchased (stock availability)
  const canPurchase = useMemo(() => {
    // Check if all required variants are selected
    if (initialProduct.variants && initialProduct.variants.length > 0) {
      const allVariantsSelected = variantSelections.every(selection => selection.value);
      if (!allVariantsSelected) {
        return false;
      }
    }

    return isProductInStock(initialProduct, variantSelections, quantity);
  }, [initialProduct, variantSelections, quantity]);

  // Get maximum available quantity
  const maxQuantity = useMemo(() => {
    if (initialProduct.type === 'digital') {
      return 999; // Digital products have no quantity limit
    }

    if (initialProduct.type === 'physical') {
      // Check if stock management is enabled
      let hasStockManagement = false;
      let minStock = 999;

      // If variants exist, check variant stock management
      if (initialProduct.variants && initialProduct.variants.length > 0) {
        const allVariantsSelected = variantSelections.every(selection => selection.value);
        if (!allVariantsSelected) {
          return 1;
        }

        // Check if any variant has stock management enabled
        for (const variant of initialProduct.variants) {
          const selection = variantSelections.find(s => s.name === variant.name);
          if (selection && variant.stock !== undefined) {
            hasStockManagement = true;
            minStock = Math.min(minStock, variant.stock);
          }
        }
      } else {
        // No variants - check product stock management
        if (initialProduct.physical?.stock !== undefined) {
          hasStockManagement = true;
          minStock = initialProduct.physical.stock;
        }
      }

      // If no stock management is enabled, return unlimited (999)
      if (!hasStockManagement) {
        return 999;
      }

      return Math.max(0, minStock);
    }

    return 999;
  }, [initialProduct, variantSelections]);

  const handleSubmit = async (
    billingInfo: IBillingInfo,
    paymentMethod: 'card' | 'pix' | 'paypal' | 'wallet' | 'other',
    statusFromStripe: 'pending' | 'successful' | 'canceled',
    paymentIntentIdFromStripe?: string
  ) => {
    if (!transactionId) {
      console.error("[ProductDisplay] handleSubmit: transactionId is missing.");
      setErrorMessage("A transaction ID is missing. Please refresh and try again.");
      setIsSubmitting(false);
      return;
    }
    
    console.log(`[ProductDisplay] handleSubmit. PaymentProvider Status: ${statusFromStripe}, PI_ID: ${paymentIntentIdFromStripe}, App TxID: ${transactionId}, Qty: ${quantity}`);
    
    setIsSubmitting(true);
    setErrorMessage('');
      
    try {
      const { deviceInfo, browserInfo } = getDeviceInfo();
      const ipAddress = await getIPAddress();
      
      // Use the calculated payment details which include VAT
      const { subtotal, vat, shipping, total, displayCurrency } = paymentDetails;

      // Prepare items array in the format expected by backend
      const items: ITransactionItem[] = [{
        productId: initialProduct._id,
        productSlug: initialProduct.slug,
        productName: initialProduct.title,
        productType: initialProduct.type,
        productOwnerId: initialProduct.merchantId || '',
        quantity: quantity,
        unitPrice: product.localPrice || initialProduct.price,
        totalPrice: subtotal, // This is unitPrice * quantity
        currency: displayCurrency,
        vatEnabled: true, // Always enabled now
        vatAmount: vat,
        variants: variantSelections.length > 0 ? variantSelections : undefined,
      }];

      const transactionData = {
        items,
        saleCurrency: displayCurrency,
        total: total, // This includes VAT
        subtotal: subtotal,
        shippingFee: shipping,
        paymentMethod,
        buyerEmail: billingInfo.email,
        buyerPhone: billingInfo.phone || '',
        billingName: billingInfo.name,
        billingAddress: billingInfo.address,
        billingCity: billingInfo.city,
        billingState: billingInfo.state,
        billingPostalCode: billingInfo.postalCode,
        billingCountry: billingInfo.country,
        ipAddress: ipAddress || '127.0.0.1',
        deviceInfo: deviceInfo || 'Unknown Device',
        browserInfo: browserInfo || 'Unknown Browser',
        status: statusFromStripe,
        
        ...(paymentMethod === 'card' && {
          useStripe: true,
          paymentIntentId: paymentIntentIdFromStripe,
        }),
        
        metadata: {
          transactionId: transactionId,
          client_quantity: quantity,
          client_selectedShipping: selectedShipping,
          client_variantSelections: variantSelections,
          client_localCurrencyAttempt: localCurrency,
          stripe_charged_amount_smallest_unit: paymentDetails.amount,
          stripe_charged_currency: paymentDetails.currency,
          initial_product_price: initialProduct.price,
          initial_product_currency: initialProduct.defaultCurrency,
          auto_local_price_setting: initialProduct.autoLocalPrice,
          converted_unit_local_price: product.localPrice,
          converted_local_currency: product.localCurrency,
          productSource: initialProduct.productSource || 'hosted',
          vat_amount: vat,
          vat_rate: taxInfo.rate,
          vat_country: selectedCountry,
          vat_state: selectedState,
          // Additional metadata for better transaction tracking
          product_sku: initialProduct.sku,
          product_barcode: initialProduct.barcode,
          product_type: initialProduct.type,
          quantity_enabled: initialProduct.quantityEnabled,
          // Digital product specific metadata
          ...(initialProduct.type === 'digital' && initialProduct.digital?.recurring && {
            subscription_interval: initialProduct.digital.recurring.interval,
            subscription_has_trial: initialProduct.digital.recurring.hasTrial,
            subscription_trial_days: initialProduct.digital.recurring.trialDays,
          }),
          // Physical product specific metadata
          ...(initialProduct.type === 'physical' && {
            shipping_method: selectedShipping,
            has_variants: (initialProduct.variants?.length || 0) > 0,
            selected_variants: variantSelections,
            stock_managed: initialProduct.physical?.stock !== undefined,
            product_weight: initialProduct.physical?.weight,
            product_dimensions: initialProduct.physical?.dimensions,
          }),
        },
      };
      
      console.log('[ProductDisplay] Creating/Updating transaction with data for backend:', JSON.stringify(transactionData, null, 2));
      const response = await createTransaction(transactionData);
      
      if (response.success && response.data?.transactionId) {
        const finalStatus = response.data.transaction?.status || statusFromStripe;
        console.log(`[ProductDisplay] Backend transaction successful. TxID: ${response.data.transactionId}, Final Status: ${finalStatus}`);
        
        // Always redirect to payment status page with our transaction ID
        router.push(`/product/payment?transactionId=${transactionId}&status=${finalStatus}`);
      } else {
        console.error('[ProductDisplay] Failed to process transaction on backend:', response.message, response.errors);
        const backendErrorMsg = response.errors ? 
          (typeof response.errors === 'string' ? response.errors : JSON.stringify(response.errors)) : 
          response.message;
        throw new Error(backendErrorMsg || 'Failed to process transaction on backend.');
      }
    } catch (error) {
      console.error('[ProductDisplay] Error submitting transaction:', error);
      setErrorMessage((error as Error).message || 'An unexpected error occurred during final submission.');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleVariantChange = (variantName: string, value: string) => {
    const newSelections = variantSelections.map(selection => 
      selection.name === variantName 
        ? { ...selection, value } 
        : selection
    );
    setVariantSelections(newSelections);
  };

  const handleQuantityChange = (newQuantity: number) => {
    const maxQty = maxQuantity;
    const finalQuantity = Math.min(Math.max(1, newQuantity), maxQty);
    setQuantity(finalQuantity);
  };

  // Handle country change for VAT calculation
// Fixed handlers with useCallback to prevent unnecessary re-renders
const handleCountryChange = useCallback((countryCode: string) => {
  console.log(`[ProductDisplay] Country changed to: ${countryCode}`);
  setSelectedCountry(prevCountry => {
    if (prevCountry !== countryCode) {
      setSelectedState(''); // Reset state when country changes
      return countryCode;
    }
    return prevCountry;
  });
}, []);

const handleStateChange = useCallback((stateCode: string) => {
  console.log(`[ProductDisplay] State changed to: ${stateCode}`);
  setSelectedState(prevState => prevState !== stateCode ? stateCode : prevState);
}, []);

  const formatImageUrl = (url: string): string => {
    // If it's already a full URL, use it as-is
    if (url.startsWith('http')) {
      return url;
    }
    
    // Make sure URLs that start with /uploads have the proper /api prefix
    if (url.startsWith('/uploads') && !url.startsWith('/api/uploads')) {
      return `/api${url}`;
    }
    
    // URLs that already have /api/uploads are good
    if (url.startsWith('/api/uploads')) {
      return url;
    }
    
    // For all other cases, ensure it has the complete path
    return `/api/uploads/${url.replace(/^\//, '')}`;
  };

  const getMainImageUrl = (): string => {
    if (!product.images || product.images.length === 0) return '';
    const mainImage = product.images.find(img => img.isMain) || product.images[0];
    return mainImage ? formatImageUrl(mainImage.url) : '';
  };

  // Get available stock text
  const getStockText = (): string => {
    if (initialProduct.type === 'digital') {
      return '';
    }

    // Check if stock management is enabled
    let hasStockManagement = false;
    let stock = 0;

    // If variants exist
    if (initialProduct.variants && initialProduct.variants.length > 0) {
      const allVariantsSelected = variantSelections.every(selection => selection.value);
      if (!allVariantsSelected) {
        return 'Select all options to see availability';
      }

      // Check if any selected variant has stock management
      let minStock = 999;
      for (const variant of initialProduct.variants) {
        const selection = variantSelections.find(s => s.name === variant.name);
        if (selection && variant.stock !== undefined) {
          hasStockManagement = true;
          minStock = Math.min(minStock, variant.stock);
        }
      }
      stock = minStock;
    } else {
      // No variants - check product stock
      if (initialProduct.physical?.stock !== undefined) {
        hasStockManagement = true;
        stock = initialProduct.physical.stock;
      }
    }

    // If no stock management is enabled, it means unlimited stock
    if (!hasStockManagement) {
      return ''; // Don't show any stock info for unlimited stock
    }

    if (stock === 0) {
      return 'Out of stock';
    } else if (stock < 10) {
      return `Only ${stock} left in stock`;
    } else {
      return `${stock} available`;
    }
  };

  // Format recurring subscription text
  const getRecurringText = (): string => {
    if (initialProduct.type !== 'digital' || !initialProduct.digital?.recurring) {
      return '';
    }

    const { interval } = initialProduct.digital.recurring;
    
    let intervalText = '';
    if (interval === 'monthly') {
      intervalText = '/month';
    } else if (interval === 'yearly') {
      intervalText = '/year';
    }

    return intervalText;
  };

  // Get trial text
  const getTrialText = (): string => {
    if (initialProduct.type !== 'digital' || !initialProduct.digital?.recurring?.hasTrial) {
      return '';
    }

    const trialDays = initialProduct.digital.recurring.trialDays || 0;
    if (trialDays > 0) {
      return `${trialDays}-day free trial`;
    } else {
      return 'Free trial';
    }
  };

  if (isLoading || !transactionId) {
    return (
      <div style={{
        minHeight: '100vh',
        backgroundColor: '#f6f9fc',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        padding: '20px',
      }}>
        <div style={{
          background: 'white',
          borderRadius: '8px',
          boxShadow: '0 4px 20px rgba(0, 0, 0, 0.1)',
          padding: '40px',
          textAlign: 'center',
          maxWidth: '400px',
          width: '100%',
        }}>
          <div style={{
            width: '32px',
            height: '32px',
            border: '3px solid #635bff',
            borderTop: '3px solid transparent',
            borderRadius: '50%',
            animation: 'spin 1s linear infinite',
            margin: '0 auto 20px',
          }} />
          <div style={{ color: '#32325d', fontSize: '16px' }}>Loading product...</div>
        </div>
      </div>
    );
  }

  const { subtotal, vat, shipping, total, displayPrice, displayCurrency } = paymentDetails;
  const stockText = getStockText();
  const recurringText = getRecurringText();
  const trialText = getTrialText();

  return (
    <>
      <style jsx>{`
        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }
        
        .checkout-container {
          min-height: 100vh;
          background-color: #f6f9fc;
          display: flex;
          align-items: center;
          justify-content: center;
          padding: 20px;
          font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Helvetica Neue", sans-serif;
          color: #32325d;
          line-height: 1.4;
        }
        
        .checkout-wrapper {
          display: flex;
          max-width: 920px;
          width: 100%;
          background: white;
          border-radius: 8px;
          box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
          overflow: hidden;
        }
        
        .product-section {
          flex: 1;
          padding: 40px;
          background: #fbfcfd;
          border-right: 1px solid #e6ebf1;
        }
        
        .payment-section {
          flex: 1;
          padding: 40px;
        }
        
        .header {
          display: flex;
          align-items: center;
          margin-bottom: 40px;
        }
        
        .business-icon {
          width: 28px;
          height: 28px;
          background: #f6f9fc;
          border-radius: 50%;
          display: flex;
          align-items: center;
          justify-content: center;
          margin-right: 12px;
          border: 1px solid #e6ebf1;
          color: #8898aa;
        }
        
        .business-name {
          font-size: 16px;
          font-weight: 500;
          color: #32325d;
        }
        
        .product-image {
          width: 100%;
          max-width: 200px;
          height: 150px;
          background: #f6f9fc;
          border-radius: 8px;
          margin: 0 auto 30px;
          display: flex;
          align-items: center;
          justify-content: center;
          overflow: hidden;
          border: 1px solid #e6ebf1;
          position: relative;
        }
        
        .product-image img {
          width: 100%;
          height: 100%;
          object-fit: cover;
          cursor: pointer;
        }

        .product-image-placeholder {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: center;
          color: #8898aa;
          font-size: 14px;
        }

        .product-image-placeholder .icon {
          font-size: 32px;
          margin-bottom: 8px;
          opacity: 0.5;
        }

        .image-thumbnails {
          display: flex;
          gap: 8px;
          justify-content: center;
          margin-bottom: 20px;
          flex-wrap: wrap;
        }

        .thumbnail {
          width: 40px;
          height: 40px;
          border-radius: 4px;
          overflow: hidden;
          border: 2px solid transparent;
          cursor: pointer;
          transition: all 0.2s ease;
          background: #f6f9fc;
        }

        .thumbnail:hover {
          border-color: #cfd7df;
        }

        .thumbnail.active {
          border-color: #635bff;
          box-shadow: 0 0 0 2px rgba(99, 91, 255, 0.2);
        }

        .thumbnail img {
          width: 100%;
          height: 100%;
          object-fit: cover;
        }
        
        .product-title {
          font-size: 18px;
          font-weight: 500;
          color: #8898aa;
          margin-bottom: 8px;
          text-align: center;
        }
        
        .product-price {
          font-size: 32px;
          font-weight: 600;
          color: #32325d;
          text-align: center;
          margin-bottom: 8px;
          position: relative;
          display: flex;
          align-items: baseline;
          justify-content: center;
          gap: 4px;
        }

        .price-recurring {
          font-size: 16px;
          font-weight: 400;
          color: #8898aa;
        }

        .trial-info {
          background: #e8f5e8;
          border: 1px solid #4caf50;
          border-radius: 4px;
          padding: 8px 12px;
          margin: 0 auto 16px;
          max-width: 200px;
          text-align: center;
          font-size: 12px;
          color: #2e7d32;
          font-weight: 500;
        }
        
        .product-description {
          font-size: 14px;
          color: #8898aa;
          text-align: center;
          margin-bottom: 20px;
        }

        .product-meta {
          background: #f8f9fa;
          border: 1px solid #e6ebf1;
          border-radius: 6px;
          padding: 16px;
          margin-bottom: 20px;
          font-size: 13px;
        }

        .meta-row {
          display: flex;
          justify-content: space-between;
          margin-bottom: 8px;
        }

        .meta-row:last-child {
          margin-bottom: 0;
        }

        .meta-label {
          color: #6b7c93;
          font-weight: 500;
        }

        .meta-value {
          color: #32325d;
          font-family: 'SF Mono', 'Monaco', 'Inconsolata', 'Roboto Mono', monospace;
        }
        
        .view-details-btn {
          background: none;
          border: none;
          color: #635bff;
          font-size: 14px;
          font-weight: 500;
          cursor: pointer;
          display: flex;
          align-items: center;
          gap: 8px;
          margin: 0 auto 20px;
          padding: 8px 12px;
          border-radius: 4px;
          transition: background-color 0.15s;
        }
        
        .view-details-btn:hover {
          background: #f7f9fc;
        }
        
        .view-details-icon {
          transition: transform 0.15s;
          transform: ${showProductDetails ? 'rotate(180deg)' : 'rotate(0deg)'};
        }

        .product-details {
          background: #f8f9fa;
          border: 1px solid #e6ebf1;
          border-radius: 6px;
          padding: 20px;
          margin-top: 20px;
        }
        
        .detail-row {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 12px;
          font-size: 14px;
        }
        
        .detail-label {
          color: #8898aa;
          display: flex;
          align-items: center;
          gap: 8px;
        }
        
        .detail-value {
          color: #32325d;
          font-weight: 500;
        }
        
        .total-row {
          border-top: 1px solid #e6ebf1;
          padding-top: 12px;
          margin-top: 12px;
          font-weight: 600;
          font-size: 16px;
        }
        
        .product-info {
          display: flex;
          align-items: flex-start;
          gap: 12px;
          margin-bottom: 20px;
          padding-bottom: 16px;
          border-bottom: 1px solid #e6ebf1;
        }
        
        .product-image-small {
          width: 48px;
          height: 48px;
          background: #f6f9fc;
          border-radius: 6px;
          overflow: hidden;
          flex-shrink: 0;
        }
        
        .product-image-small img {
          width: 100%;
          height: 100%;
          object-fit: cover;
        }
        
        .product-text {
          flex: 1;
          min-width: 0;
        }
        
        .product-title-small {
          font-size: 14px;
          font-weight: 500;
          color: #32325d;
          margin-bottom: 4px;
          word-wrap: break-word;
        }
        
        .product-variants {
          font-size: 12px;
          color: #8898aa;
          margin-bottom: 4px;
        }
        
        .product-quantity {
          font-size: 12px;
          color: #8898aa;
        }
        
        .product-price-small {
          font-size: 14px;
          font-weight: 500;
          color: #32325d;
          flex-shrink: 0;
        }
        
        .original-price {
          font-size: 12px;
          color: #8898aa;
          margin-top: 12px;
          text-align: right;
        }
        
        .free-badge {
          color: #00d924;
          font-weight: 500;
        }

        .vat-row {
          color: #6b7c93;
        }

        .vat-icon {
          margin-right: 4px;
          font-size: 12px;
        }
        
        .form-section {
          background: #f8f9fa;
          border: 1px solid #e6ebf1;
          border-radius: 6px;
          padding: 20px;
          margin-bottom: 20px;
        }
        
        .form-section-title {
          font-size: 14px;
          font-weight: 600;
          color: #32325d;
          margin-bottom: 16px;
        }

        .variant-option {
          display: flex;
          align-items: center;
          padding: 12px 16px;
          border: 1px solid #e6ebf1;
          border-radius: 6px;
          margin-bottom: 8px;
          cursor: pointer;
          transition: all 0.15s ease;
          background: white;
        }

        .variant-option:hover {
          border-color: #635bff;
          background: #f7f9fc;
        }

        .variant-option.selected {
          border-color: #635bff;
          background: #f7f9fc;
          box-shadow: 0 0 0 2px rgba(99, 91, 255, 0.2);
        }

        .variant-option.disabled {
          opacity: 0.5;
          cursor: not-allowed;
          background: #f5f5f5;
        }

        .variant-option.disabled:hover {
          border-color: #e6ebf1;
          background: #f5f5f5;
        }

        .variant-radio {
          width: 16px;
          height: 16px;
          border: 2px solid #cfd7df;
          border-radius: 50%;
          margin-right: 12px;
          position: relative;
          flex-shrink: 0;
        }

        .variant-radio.checked {
          border-color: #635bff;
        }

        .variant-radio.checked::after {
          content: '';
          width: 8px;
          height: 8px;
          background: #635bff;
          border-radius: 50%;
          position: absolute;
          top: 50%;
          left: 50%;
          transform: translate(-50%, -50%);
        }

        .variant-info {
          flex: 1;
          display: flex;
          justify-content: space-between;
          align-items: center;
        }

        .variant-name {
          font-size: 14px;
          font-weight: 500;
          color: #32325d;
        }

        .variant-stock {
          font-size: 12px;
          color: #8898aa;
        }

        .variant-stock.low {
          color: #f59e0b;
        }

        .variant-stock.out {
          color: #ef4444;
        }

        .shipping-option {
          display: flex;
          align-items: center;
          padding: 12px 16px;
          border: 1px solid #e6ebf1;
          border-radius: 6px;
          margin-bottom: 8px;
          cursor: pointer;
          transition: all 0.15s ease;
          background: white;
        }

        .shipping-option:hover {
          border-color: #635bff;
          background: #f7f9fc;
        }

        .shipping-option.selected {
          border-color: #635bff;
          background: #f7f9fc;
          box-shadow: 0 0 0 2px rgba(99, 91, 255, 0.2);
        }

        .shipping-radio {
          width: 16px;
          height: 16px;
          border: 2px solid #cfd7df;
          border-radius: 50%;
          margin-right: 12px;
          position: relative;
          flex-shrink: 0;
        }

        .shipping-radio.checked {
          border-color: #635bff;
        }

        .shipping-radio.checked::after {
          content: '';
          width: 8px;
          height: 8px;
          background: #635bff;
          border-radius: 50%;
          position: absolute;
          top: 50%;
          left: 50%;
          transform: translate(-50%, -50%);
        }

        .shipping-info {
          flex: 1;
        }

        .shipping-name {
          font-size: 14px;
          font-weight: 500;
          color: #32325d;
          margin-bottom: 2px;
        }

        .shipping-details {
          font-size: 12px;
          color: #8898aa;
        }

        .shipping-price {
          font-size: 14px;
          font-weight: 500;
          color: #32325d;
          text-align: right;
        }

        .quantity-controls {
          display: flex;
          align-items: center;
          gap: 12px;
          background: white;
          border: 1px solid #e6ebf1;
          border-radius: 6px;
          padding: 12px;
        }
        
        .quantity-btn {
          width: 36px;
          height: 36px;
          border: 1px solid #cfd7df;
          border-radius: 4px;
          background: white;
          color: #32325d;
          cursor: pointer;
          display: flex;
          align-items: center;
          justify-content: center;
          font-size: 16px;
          transition: background-color 0.15s;
        }
        
        .quantity-btn:hover:not(:disabled) {
          background: #f8f9fa;
        }
        
        .quantity-btn:disabled {
          opacity: 0.5;
          cursor: not-allowed;
        }
        
        .quantity-input {
          width: 60px;
          height: 36px;
          border: 1px solid #cfd7df;
          border-radius: 4px;
          text-align: center;
          font-size: 16px;
          color: #32325d;
        }
        
        .quantity-input:focus {
          outline: none;
          border-color: #635bff;
          box-shadow: 0 0 0 3px rgba(99, 91, 255, 0.2);
        }

        .stock-info {
          font-size: 12px;
          margin-top: 8px;
          text-align: center;
        }

        .stock-available {
          color: #16a34a;
        }

        .stock-warning {
          color: #f59e0b;
        }

        .stock-error {
          color: #ef4444;
        }
        
        .error-message {
          background: #fdf2f2;
          border: 1px solid #fecaca;
          border-radius: 6px;
          padding: 16px;
          margin-top: 20px;
          color: #dc2626;
          font-size: 14px;
        }
        
        .availability-message {
          background: #fdf2f2;
          border: 1px solid #fecaca;
          border-radius: 6px;
          padding: 16px;
          margin-top: 20px;
          color: #dc2626;
          font-size: 14px;
          text-align: center;
        }

        .tax-info-section {
          background: #f0f7ff;
          border: 1px solid #bfdbfe;
          border-radius: 6px;
          padding: 16px;
          margin-top: 20px;
          font-size: 13px;
          color: #1e40af;
        }

        .tax-info-title {
          font-weight: 600;
          margin-bottom: 8px;
          display: flex;
          align-items: center;
          gap: 8px;
        }

        .tax-info-details {
          display: flex;
          flex-direction: column;
          gap: 4px;
        }
        
        @media (max-width: 768px) {
          .checkout-wrapper {
            flex-direction: column;
            max-width: 400px;
          }
          
          .product-section {
            border-right: none;
            border-bottom: 1px solid #e6ebf1;
            padding: 30px 20px;
          }
          
          .payment-section {
            padding: 30px 20px;
          }
          
          .product-image {
            max-width: 150px;
            height: 120px;
          }
          
          .product-price {
            font-size: 28px;
          }
        }
      `}</style>
      
      <div className="checkout-container">
        <div className="checkout-wrapper">
          {/* Product Section */}
          <div className="product-section">
            <div className="header">
              <div className="business-icon">
                <svg width="14" height="14" viewBox="0 0 576 512" fill="currentColor">
                  <path d="M547.6 103.8L490.3 13.1C485.2 5 476.1 0 466.4 0H109.6C99.9 0 90.8 5 85.7 13.1L28.3 103.8c-29.6 46.8-3.4 111.9 51.9 119.4c4 .5 8.1 .8 12.1 .8c26.1 0 49.3-11.4 65.2-29c15.9 17.6 39.1 29 65.2 29c26.1 0 49.3-11.4 65.2-29c15.9 17.6 39.1 29 65.2 29c26.2 0 49.3-11.4 65.2-29c16 17.6 39.1 29 65.2 29c4.1 0 8.1-.3 12.1-.8c55.5-7.4 81.8-72.5 52.1-119.4zM512 224c-17.7 0-32 14.3-32 32V448c0 17.7-14.3 32-32 32H128c-17.7 0-32-14.3-32-32V256c0-17.7-14.3-32-32-32s-32 14.3-32 32V448c0 53 43 96 96 96H448c53 0 96-43 96-96V256c0-17.7-14.3-32-32-32z"/>
                </svg>
              </div>
              <div className="business-name">Store</div>
            </div>
            
            {/* Product Images */}
            {product.images && product.images.length > 0 ? (
              <>
                <div className="product-image">
                  <img 
                    src={formatImageUrl(product.images[selectedImageIndex]?.url || product.images[0].url)} 
                    alt={product.title} 
                  />
                </div>
                
                {product.images.length > 1 && (
                  <div className="image-thumbnails">
                    {product.images.map((image, index) => (
                      <button
                        key={index}
                        className={`thumbnail ${selectedImageIndex === index ? 'active' : ''}`}
                        onClick={() => setSelectedImageIndex(index)}
                        type="button"
                      >
                        <img
                          src={formatImageUrl(image.url)}
                          alt={`Thumbnail ${index + 1}`}
                        />
                      </button>
                    ))}
                  </div>
                )}
              </>
            ) : (
              <div className="product-image">
                <div className="product-image-placeholder">
                  <div className="icon">
                    <i className="fas fa-image"></i>
                  </div>
                  <div>No image available</div>
                </div>
              </div>
            )}
            
            <div className="product-title">{product.title}</div>
            
            <div className="product-price">
              {formatPrice(displayPrice, displayCurrency)}
              {recurringText && (
                <span className="price-recurring">{recurringText}</span>
              )}
            </div>
            
            {/* Trial Info */}
            {trialText && (
              <div className="trial-info">
                üéÅ {trialText}
              </div>
            )}
            
            <div className="product-description">{product.shortDescription}</div>
            
            {/* Product Meta Information (SKU, Barcode) */}
            {(initialProduct.sku || initialProduct.barcode) && (
              <div className="product-meta">
                {initialProduct.sku && (
                  <div className="meta-row">
                    <span className="meta-label">SKU:</span>
                    <span className="meta-value">{initialProduct.sku}</span>
                  </div>
                )}
                {initialProduct.barcode && (
                  <div className="meta-row">
                    <span className="meta-label">Barcode:</span>
                    <span className="meta-value">{initialProduct.barcode}</span>
                  </div>
                )}
              </div>
            )}
            
            {/* Stock Information */}
            {stockText && (
              <div className={`stock-info ${
                stockText.includes('Out of stock') ? 'stock-error' : 
                stockText.includes('Only') ? 'stock-warning' : 'stock-available'
              }`}>
                {stockText}
              </div>
            )}
            
            <button
              type="button"
              className="view-details-btn"
              onClick={() => setShowProductDetails(!showProductDetails)}
            >
              <span>{showProductDetails ? 'Hide details' : 'View details'}</span>
              <i className={`fas fa-chevron-down view-details-icon`}></i>
            </button>
            
            {showProductDetails && (
              <div className="product-details">
                {/* Product Info */}
                <div className="product-info">
                  {/* Product Image */}
                  {product.images && product.images.length > 0 && (
                    <div className="product-image-small">
                      <img
                        src={formatImageUrl(product.images[selectedImageIndex]?.url || product.images[0].url)}
                        alt={product.title}
                      />
                    </div>
                  )}
                  
                  {/* Product Details */}
                  <div className="product-text">
                    <div className="product-title-small">{product.title}</div>
                    
                    {/* Selected variants */}
                    {variantSelections.length > 0 && variantSelections.every(v => v.value) && (
                      <div className="product-variants">
                        {variantSelections.map((selection, index) => (
                          <div key={index}>
                            {selection.name}: {selection.value}
                          </div>
                        ))}
                      </div>
                    )}
                    
                    <div className="product-quantity">Qty: {quantity}</div>
                  </div>
                  
                  {/* Price */}
                  <div className="product-price-small">
                    {formatPrice(displayPrice * quantity, displayCurrency)}
                  </div>
                </div>
                
                {/* Price Breakdown */}
                <div className="detail-row">
                  <span className="detail-label">Subtotal</span>
                  <span className="detail-value">{formatPrice(subtotal, displayCurrency)}</span>
                </div>
                
                {vat > 0 && (
                  <div className="detail-row vat-row">
                    <span className="detail-label">
                      <i className="fas fa-receipt vat-icon"></i>
                      VAT ({(taxInfo.rate * 100).toFixed(1)}%)
                    </span>
                    <span className="detail-value">{formatPrice(vat, displayCurrency)}</span>
                  </div>
                )}
                
                {shipping > 0 && (
                  <div className="detail-row">
                    <span className="detail-label">
                      <i className="fas fa-truck"></i>
                      Shipping
                    </span>
                    <span className="detail-value">{formatPrice(shipping, displayCurrency)}</span>
                  </div>
                )}
                
                {shipping === 0 && selectedShipping && (
                  <div className="detail-row">
                    <span className="detail-label">
                      <i className="fas fa-truck"></i>
                      Shipping
                    </span>
                    <span className="detail-value free-badge">Free</span>
                  </div>
                )}
                
                {/* Total */}
                <div className="detail-row total-row">
                  <span className="detail-label">Total</span>
                  <span className="detail-value">
                    {formatPrice(total, displayCurrency)}
                  </span>
                </div>
                
                {/* Show original price if converted */}
                {displayCurrency !== initialProduct.defaultCurrency && (
                  <div className="original-price">
                    Original: {formatPrice(initialProduct.price * quantity, initialProduct.defaultCurrency)}
                  </div>
                )}
              </div>
            )}

            {/* Tax Information Display */}
            {selectedCountry && taxInfo.rate > 0 && (
              <div className="tax-info-section">
                <div className="tax-info-title">
                  <i className="fas fa-info-circle"></i>
                  Tax Information
                </div>
                <div className="tax-info-details">
                  <div>üìç Location: {selectedCountry}{selectedState ? `, ${selectedState}` : ''}</div>
                  <div>üí∞ {taxInfo.type.toUpperCase()} Rate: {(taxInfo.rate * 100).toFixed(1)}%</div>
                </div>
              </div>
            )}
          </div>
          
          {/* Payment Section */}
          <div className="payment-section">
            {errorMessage && (
              <div className="error-message">
                {errorMessage}
              </div>
            )}
            
            {!canPurchase && stockText && stockText.includes('Out of stock') ? (
              <div className="availability-message">
                {stockText}
              </div>
            ) : (
              <>
                {/* Variants Section - In the form */}
                {initialProduct.variants && initialProduct.variants.length > 0 && (
                  <div className="form-section">
                    <div className="form-section-title">Product Options</div>
                    {initialProduct.variants.map((variant, variantIndex) => {
                      const selection = variantSelections.find(s => s.name === variant.name);
                      
                      return (
                        <div key={variantIndex} style={{ marginBottom: '20px' }}>
                          <div style={{ fontSize: '13px', fontWeight: '500', color: '#6b7c93', marginBottom: '8px' }}>
                            {variant.name}
                          </div>
                          {variant.values.map((value, valueIndex) => {
                            // Check if this variant value is available
                            let isAvailable = true;
                            let stockInfo = '';
                            
                            // Only check stock if stock management is enabled (variant.stock is defined)
                            if (variant.stock !== undefined) {
                              if (variant.stock === 0) {
                                isAvailable = false;
                                stockInfo = 'Out of stock';
                              } else if (variant.stock < quantity) {
                                isAvailable = false;
                                stockInfo = `Only ${variant.stock} available`;
                              } else if (variant.stock < 10) {
                                stockInfo = `${variant.stock} left`;
                              }
                            }
                            
                            const isSelected = selection?.value === value;
                            
                            return (
                              <div
                                key={valueIndex}
                                className={`variant-option ${isSelected ? 'selected' : ''} ${!isAvailable ? 'disabled' : ''}`}
                                onClick={() => isAvailable && handleVariantChange(variant.name, value)}
                              >
                                <div className={`variant-radio ${isSelected ? 'checked' : ''}`}></div>
                                <div className="variant-info">
                                  <div className="variant-name">{value}</div>
                                  {stockInfo && (
                                    <div className={`variant-stock ${
                                      stockInfo.includes('Out of stock') ? 'out' : 
                                      stockInfo.includes('Only') ? 'low' : ''
                                    }`}>
                                      {stockInfo}
                                    </div>
                                  )}
                                </div>
                              </div>
                            );
                          })}
                        </div>
                      );
                    })}
                  </div>
                )}
                
                {/* Quantity Section - Only show if quantityEnabled is true */}
                {initialProduct.quantityEnabled === true && (
                  <div className="form-section">
                    <div className="form-section-title">Quantity</div>
                    <div className="quantity-controls">
                      <button
                        type="button"
                        className="quantity-btn"
                        onClick={() => handleQuantityChange(quantity - 1)}
                        disabled={quantity <= 1}
                      >
                        ‚àí
                      </button>
                      <input
                        type="number"
                        className="quantity-input"
                        min="1"
                        max={maxQuantity}
                        value={quantity}
                        onChange={(e) => handleQuantityChange(parseInt(e.target.value) || 1)}
                      />
                      <button
                        type="button"
                        className="quantity-btn"
                        onClick={() => handleQuantityChange(quantity + 1)}
                        disabled={quantity >= maxQuantity}
                      >
                        +
                      </button>
                    </div>
                    {maxQuantity < 999 && (
                      <div className="stock-info stock-available">
                        Maximum: {maxQuantity}
                      </div>
                    )}
                  </div>
                )}
                
                {/* Shipping Section - Only for physical products */}
                {initialProduct.type === 'physical' && initialProduct.physical?.shippingMethods && initialProduct.physical.shippingMethods.length > 0 && (
                  <div className="form-section">
                    <div className="form-section-title">Shipping Method</div>
                    {initialProduct.physical.shippingMethods.map((method, index) => {
                      const isSelected = selectedShipping === method.name;
                      const shippingPrice = method.price > 0 
                        ? formatPrice(method.price, initialProduct.defaultCurrency)
                        : 'Free';
                      
                      return (
                        <div
                          key={index}
                          className={`shipping-option ${isSelected ? 'selected' : ''}`}
                          onClick={() => setSelectedShipping(method.name)}
                        >
                          <div className={`shipping-radio ${isSelected ? 'checked' : ''}`}></div>
                          <div className="shipping-info">
                            <div className="shipping-name">{method.name}</div>
                            <div className="shipping-details">
                              {method.minDays}-{method.maxDays} business days
                            </div>
                          </div>
                          <div className="shipping-price">{shippingPrice}</div>
                        </div>
                      );
                    })}
                  </div>
                )}

                {/* Payment Form - Always show */}
                <PaymentForm
                  currency={paymentDetails.currency}
                  amount={paymentDetails.amount}
                  transactionId={transactionId}
                  onSubmit={handleSubmit}
                  isSubmitting={isSubmitting}
                  productOwnerId={initialProduct.merchantId || ''}
                  productId={initialProduct._id}
                  productName={initialProduct.title}
                  quantity={quantity}
                  onCountryChange={handleCountryChange}
                  onStateChange={handleStateChange}
                />
              </>
            )}
          </div>
        </div>
      </div>
    </>
  );
};

export default ProductDisplay;

ProductImages.tsx
// productcomponents/ProductImages.tsx
'use client';

import { useState } from 'react';
import { IImage } from '../productlib/types';

interface ProductImagesProps {
  images: IImage[];
}

const ProductImages: React.FC<ProductImagesProps> = ({ images }) => {
  // Find main image or use first image as default
  const mainImage = images.find(img => img.isMain) || images[0];
  const [selectedImage, setSelectedImage] = useState<string>(mainImage?.url || '');
  
  if (!images || images.length === 0) {
    return (
      <>
        <style jsx>{`
          .no-image-container {
            width: 100%;
            max-width: 200px;
            height: 150px;
            background: #f6f9fc;
            border-radius: 8px;
            margin: 0 auto;
            display: flex;
            align-items: center;
            justify-content: center;
            border: 1px solid #e6ebf1;
          }
          
          .no-image-content {
            text-align: center;
            color: #8898aa;
          }
          
          .no-image-icon {
            font-size: 32px;
            margin-bottom: 8px;
            opacity: 0.5;
          }
          
          .no-image-text {
            font-size: 14px;
          }
        `}</style>
        
        <div className="no-image-container">
          <div className="no-image-content">
            <div className="no-image-icon">
              <i className="fas fa-image"></i>
            </div>
            <div className="no-image-text">No images available</div>
          </div>
        </div>
      </>
    );
  }

  // Format the image URL to ensure it starts with /api/uploads if needed
  const formatImageUrl = (url: string): string => {
    // If it's already a full URL, use it as-is
    if (url.startsWith('http')) {
      return url;
    }
    
    // Make sure URLs that start with /uploads have the proper /api prefix
    if (url.startsWith('/uploads') && !url.startsWith('/api/uploads')) {
      return `/api${url}`;
    }
    
    // URLs that already have /api/uploads are good
    if (url.startsWith('/api/uploads')) {
      return url;
    }
    
    // For all other cases, ensure it has the complete path
    return `/api/uploads/${url.replace(/^\//, '')}`;
  };

  return (
    <>
      <style jsx>{`
        .images-container {
          width: 100%;
        }
        
        .main-image {
          width: 100%;
          max-width: 200px;
          height: 150px;
          background: #f6f9fc;
          border-radius: 8px;
          margin: 0 auto 20px;
          overflow: hidden;
          border: 1px solid #e6ebf1;
          cursor: pointer;
        }
        
        .main-image img {
          width: 100%;
          height: 100%;
          object-fit: cover;
          transition: transform 0.3s ease;
        }
        
        .main-image:hover img {
          transform: scale(1.05);
        }
        
        .thumbnails {
          display: flex;
          gap: 8px;
          justify-content: center;
          flex-wrap: wrap;
          padding: 0 10px;
        }
        
        .thumbnail {
          width: 48px;
          height: 48px;
          border-radius: 6px;
          overflow: hidden;
          border: 2px solid transparent;
          cursor: pointer;
          transition: all 0.2s ease;
          background: #f6f9fc;
        }
        
        .thumbnail:hover {
          border-color: #cfd7df;
        }
        
        .thumbnail.active {
          border-color: #635bff;
          box-shadow: 0 0 0 2px rgba(99, 91, 255, 0.2);
        }
        
        .thumbnail img {
          width: 100%;
          height: 100%;
          object-fit: cover;
        }
        
        @media (max-width: 768px) {
          .main-image {
            max-width: 150px;
            height: 120px;
          }
          
          .thumbnail {
            width: 40px;
            height: 40px;
          }
        }
      `}</style>
      
      <div className="images-container">
        {/* Main image display */}
        <div className="main-image">
          <img
            src={formatImageUrl(selectedImage)}
            alt="Product"
          />
        </div>
        
        {/* Thumbnails */}
        {images.length > 1 && (
          <div className="thumbnails">
            {images.map((image, index) => (
              <button
                key={index}
                className={`thumbnail ${selectedImage === image.url ? 'active' : ''}`}
                onClick={() => setSelectedImage(image.url)}
                type="button"
              >
                <img
                  src={formatImageUrl(image.url)}
                  alt={`Thumbnail ${index + 1}`}
                />
              </button>
            ))}
          </div>
        )}
      </div>
    </>
  );
};

export default ProductImages;


QuantitySelector.tsx
// productcomponents/QuantitySelector.tsx
'use client';

import { useState } from 'react';
import { IProduct } from '../productlib/types';

interface QuantitySelectorProps {
  product: IProduct;
  quantity: number;
  onQuantityChange: (quantity: number) => void;
  maxQuantity?: number;
  minQuantity?: number;
}

const QuantitySelector: React.FC<QuantitySelectorProps> = ({
  product,
  quantity,
  onQuantityChange,
  maxQuantity = 99,
  minQuantity = 1
}) => {
  const [showMaxWarning, setShowMaxWarning] = useState(false);

  // Determine actual max quantity based on stock if applicable
  let actualMaxQuantity = maxQuantity;
  
  // Only check stock if stock management is enabled (stock is defined)
  if (product.type === 'physical' && product.physical?.stock !== undefined) {
    actualMaxQuantity = Math.min(maxQuantity, product.physical.stock);
  }
  
  const handleQuantityChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newQuantity = parseInt(e.target.value, 10);
    
    if (isNaN(newQuantity) || newQuantity < minQuantity) {
      onQuantityChange(minQuantity);
    } else if (newQuantity > actualMaxQuantity) {
      onQuantityChange(actualMaxQuantity);
      setShowMaxWarning(true);
      setTimeout(() => setShowMaxWarning(false), 2000);
    } else {
      onQuantityChange(newQuantity);
      setShowMaxWarning(false);
    }
  };

  const handleInputBlur = (e: React.FocusEvent<HTMLInputElement>) => {
    const newQuantity = parseInt(e.target.value, 10);
    
    if (isNaN(newQuantity) || newQuantity < minQuantity) {
      onQuantityChange(minQuantity);
    } else if (newQuantity > actualMaxQuantity) {
      onQuantityChange(actualMaxQuantity);
      setShowMaxWarning(true);
      setTimeout(() => setShowMaxWarning(false), 2000);
    }
  };

  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    // Prevent entering non-numeric characters
    if (!/[0-9]/.test(e.key) && 
        !['Backspace', 'Delete', 'Tab', 'Escape', 'Enter', 'ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown'].includes(e.key)) {
      e.preventDefault();
    }
  };
  
  const decreaseQuantity = () => {
    if (quantity > minQuantity) {
      onQuantityChange(quantity - 1);
      setShowMaxWarning(false);
    }
  };
  
  const increaseQuantity = () => {
    if (quantity < actualMaxQuantity) {
      onQuantityChange(quantity + 1);
    } else {
      setShowMaxWarning(true);
      setTimeout(() => setShowMaxWarning(false), 2000);
    }
  };
  
  return (
    <>
      <style jsx>{`
        .quantity-container {
          margin-bottom: 16px;
        }
        
        .quantity-label {
          display: block;
          font-size: 13px;
          font-weight: 500;
          color: #6b7c93;
          margin-bottom: 8px;
        }
        
        .quantity-controls {
          display: flex;
          align-items: center;
          gap: 0;
          border: 1px solid #cfd7df;
          border-radius: 4px;
          overflow: hidden;
          background: white;
          width: fit-content;
        }
        
        .quantity-btn {
          width: 40px;
          height: 40px;
          border: none;
          background: #f8f9fa;
          color: #32325d;
          cursor: pointer;
          display: flex;
          align-items: center;
          justify-content: center;
          font-size: 16px;
          font-weight: 500;
          transition: background-color 0.15s ease;
          user-select: none;
        }
        
        .quantity-btn:hover:not(:disabled) {
          background: #e9ecef;
        }
        
        .quantity-btn:disabled {
          opacity: 0.5;
          cursor: not-allowed;
          background: #f8f9fa;
        }
        
        .quantity-btn:active:not(:disabled) {
          background: #dee2e6;
        }
        
        .quantity-btn.decrease {
          border-right: 1px solid #e6ebf1;
        }
        
        .quantity-btn.increase {
          border-left: 1px solid #e6ebf1;
        }
        
        .quantity-input {
          width: 60px;
          height: 40px;
          border: none;
          text-align: center;
          font-size: 16px;
          color: #32325d;
          background: white;
          outline: none;
          font-weight: 500;
          -moz-appearance: textfield; /* Firefox */
        }

        .quantity-input::-webkit-outer-spin-button,
        .quantity-input::-webkit-inner-spin-button {
          -webkit-appearance: none;
          margin: 0;
        }
        
        .quantity-input:focus {
          background: #f8f9fa;
        }

        .quantity-input:invalid {
          color: #ef4444;
        }
        
        .stock-info {
          font-size: 12px;
          color: #8898aa;
          margin-top: 8px;
        }
        
        .stock-warning {
          color: #f59e0b;
        }
        
        .stock-out {
          color: #ef4444;
        }

        .max-warning {
          color: #ef4444;
          font-size: 12px;
          margin-top: 4px;
          animation: fadeInOut 2s ease-in-out;
        }

        @keyframes fadeInOut {
          0% { opacity: 0; transform: translateY(-5px); }
          20% { opacity: 1; transform: translateY(0); }
          80% { opacity: 1; transform: translateY(0); }
          100% { opacity: 0; transform: translateY(-5px); }
        }
      `}</style>
      
      <div className="quantity-container">
        <label className="quantity-label">Quantity</label>
        <div className="quantity-controls">
          <button
            type="button"
            className="quantity-btn decrease"
            onClick={decreaseQuantity}
            disabled={quantity <= minQuantity}
          >
            ‚àí
          </button>
          <input
            type="number"
            className="quantity-input"
            min={minQuantity}
            max={actualMaxQuantity}
            value={quantity}
            onChange={handleQuantityChange}
            onBlur={handleInputBlur}
            onKeyDown={handleKeyDown}
          />
          <button
            type="button"
            className="quantity-btn increase"
            onClick={increaseQuantity}
            disabled={quantity >= actualMaxQuantity}
          >
            +
          </button>
        </div>
        
        {showMaxWarning && (
          <div className="max-warning">
            Maximum quantity is {actualMaxQuantity}
          </div>
        )}
        
        {/* Only show stock info if stock management is enabled (stock is defined) */}
        {product.type === 'physical' && product.physical?.stock !== undefined && (
          <div className={`stock-info ${
            product.physical.stock === 0 ? 'stock-out' : 
            product.physical.stock < 10 ? 'stock-warning' : ''
          }`}>
            {product.physical.stock === 0 ? 'Out of stock' :
             product.physical.stock < 10 ? `Only ${product.physical.stock} left in stock` :
             `${product.physical.stock} available`}
          </div>
        )}
      </div>
    </>
  );
};

export default QuantitySelector;

VariantSelector.tsx
// productcomponents/VariantSelector.tsx
'use client';

import { useState, useEffect } from 'react';
import { IVariant, IVariantSelection } from '../productlib/types';

interface VariantSelectorProps {
  variants: IVariant[];
  onVariantSelect: (selections: IVariantSelection[]) => void;
  selectedQuantity?: number;
}

const VariantSelector: React.FC<VariantSelectorProps> = ({ 
  variants, 
  onVariantSelect, 
  selectedQuantity = 1 
}) => {
  const [selections, setSelections] = useState<IVariantSelection[]>([]);
  
  // Initialize with empty selections
  useEffect(() => {
    if (variants && variants.length > 0) {
      // Create initial selections with empty values
      const initialSelections = variants.map(variant => ({
        name: variant.name,
        value: '',
      }));
      setSelections(initialSelections);
    }
  }, [variants]);
  
  // Update parent component when selections change
  useEffect(() => {
    if (selections.length > 0) {
      onVariantSelect(selections);
    }
  }, [selections, onVariantSelect]);
  
  if (!variants || variants.length === 0) {
    return null;
  }
  
  const handleVariantChange = (variantName: string, value: string) => {
    const newSelections = selections.map(selection => 
      selection.name === variantName 
        ? { ...selection, value } 
        : selection
    );
    setSelections(newSelections);
  };

  // Check if a variant value is available based on stock
  const isVariantValueAvailable = (variant: IVariant, value: string): { 
    available: boolean; 
    stockInfo: string; 
    stockClass: string;
  } => {
    // If variant.stock is undefined, it means stock management is not enabled for this variant
    // In this case, all values are available (unlimited stock)
    if (variant.stock === undefined) {
      return {
        available: true,
        stockInfo: '',
        statusClass: ''
      };
    }

    // If variant.stock is defined, stock management is enabled
    // Check if there's enough stock for the selected quantity
    if (variant.stock === 0) {
      return {
        available: false,
        stockInfo: 'Out of stock',
        stockClass: 'stock-out'
      };
    } else if (variant.stock < selectedQuantity) {
      return {
        available: false,
        stockInfo: `Only ${variant.stock} available`,
        stockClass: 'stock-low'
      };
    } else if (variant.stock < 10) {
      return {
        available: true,
        stockInfo: `${variant.stock} left`,
        stockClass: 'stock-low'
      };
    } else {
      return {
        available: true,
        stockInfo: `${variant.stock} in stock`,
        stockClass: 'stock-good'
      };
    }
  };

  // Get stock status for a variant
  const getVariantStockStatus = (variant: IVariant): {
    available: number;
    statusText: string;
    statusClass: string;
  } => {
    // If variant.stock is undefined, stock management is not enabled (unlimited stock)
    if (variant.stock === undefined) {
      return {
        available: 999,
        statusText: '',
        statusClass: ''
      };
    }

    const stock = variant.stock;
    
    if (stock === 0) {
      return {
        available: 0,
        statusText: 'Out of stock',
        statusClass: 'stock-out'
      };
    } else if (stock < 5) {
      return {
        available: stock,
        statusText: `Only ${stock} left`,
        statusClass: 'stock-low'
      };
    } else {
      return {
        available: stock,
        statusText: `${stock} in stock`,
        statusClass: 'stock-good'
      };
    }
  };
  
  return (
    <>
      <style jsx>{`
        .variants-container {
          margin-bottom: 20px;
        }
        
        .variants-title {
          font-size: 14px;
          font-weight: 600;
          color: #32325d;
          margin-bottom: 16px;
        }
        
        .variant-group {
          margin-bottom: 20px;
        }
        
        .variant-group:last-child {
          margin-bottom: 0;
        }
        
        .variant-label {
          display: block;
          font-size: 13px;
          font-weight: 500;
          color: #6b7c93;
          margin-bottom: 8px;
        }
        
        .variant-option {
          display: flex;
          align-items: center;
          padding: 12px 16px;
          border: 1px solid #e6ebf1;
          border-radius: 6px;
          margin-bottom: 8px;
          cursor: pointer;
          transition: all 0.15s ease;
          background: white;
        }

        .variant-option:hover:not(.disabled) {
          border-color: #635bff;
          background: #f7f9fc;
        }

        .variant-option.selected {
          border-color: #635bff;
          background: #f7f9fc;
          box-shadow: 0 0 0 2px rgba(99, 91, 255, 0.2);
        }

        .variant-option.disabled {
          opacity: 0.5;
          cursor: not-allowed;
          background: #f5f5f5;
        }

        .variant-radio {
          width: 16px;
          height: 16px;
          border: 2px solid #cfd7df;
          border-radius: 50%;
          margin-right: 12px;
          position: relative;
          flex-shrink: 0;
        }

        .variant-radio.checked {
          border-color: #635bff;
        }

        .variant-radio.checked::after {
          content: '';
          width: 8px;
          height: 8px;
          background: #635bff;
          border-radius: 50%;
          position: absolute;
          top: 50%;
          left: 50%;
          transform: translate(-50%, -50%);
        }

        .variant-info {
          flex: 1;
          display: flex;
          justify-content: space-between;
          align-items: center;
        }

        .variant-name {
          font-size: 14px;
          font-weight: 500;
          color: #32325d;
        }

        .variant-stock {
          font-size: 12px;
          color: #8898aa;
        }

        .variant-stock.stock-good {
          color: #16a34a;
        }

        .variant-stock.stock-low {
          color: #f59e0b;
        }

        .variant-stock.stock-out {
          color: #ef4444;
        }

        .variant-group-header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 8px;
        }

        .variant-name-header {
          font-size: 13px;
          font-weight: 500;
          color: #6b7c93;
        }

        .variant-stock-summary {
          font-size: 12px;
          color: #8898aa;
        }

        .insufficient-stock-warning {
          background: #fef2f2;
          border: 1px solid #fecaca;
          border-radius: 4px;
          padding: 8px 12px;
          margin-top: 8px;
          font-size: 12px;
          color: #dc2626;
          display: flex;
          align-items: center;
          gap: 6px;
        }
      `}</style>
      
      <div className="variants-container">
        <div className="variants-title">Product Options</div>
        {variants.map((variant, index) => {
          const currentSelection = selections.find(s => s.name === variant.name);
          const stockStatus = getVariantStockStatus(variant);
          const isOutOfStock = stockStatus.available === 0;
          const hasInsufficientStock = stockStatus.available > 0 && stockStatus.available < selectedQuantity && variant.stock !== undefined;
          
          return (
            <div key={index} className="variant-group">
              <div className="variant-group-header">
                <div className="variant-name-header">{variant.name}</div>
                {stockStatus.statusText && (
                  <div className="variant-stock-summary">
                    {stockStatus.statusText}
                  </div>
                )}
              </div>
              
              {variant.values.map((value, valueIndex) => {
                const { available, stockInfo, stockClass } = isVariantValueAvailable(variant, value);
                const isSelected = currentSelection?.value === value;
                
                return (
                  <div
                    key={valueIndex}
                    className={`variant-option ${isSelected ? 'selected' : ''} ${!available ? 'disabled' : ''}`}
                    onClick={() => available && handleVariantChange(variant.name, value)}
                  >
                    <div className={`variant-radio ${isSelected ? 'checked' : ''}`}></div>
                    <div className="variant-info">
                      <div className="variant-name">{value}</div>
                      {stockInfo && (
                        <div className={`variant-stock ${stockClass}`}>
                          {stockInfo}
                        </div>
                      )}
                    </div>
                  </div>
                );
              })}

              {/* Insufficient stock warning */}
              {hasInsufficientStock && currentSelection?.value && (
                <div className="insufficient-stock-warning">
                  <i className="fas fa-exclamation-triangle"></i>
                  <span>
                    Only {stockStatus.available} available, but you've selected {selectedQuantity}. 
                    Please reduce quantity or choose a different option.
                  </span>
                </div>
              )}
            </div>
          );
        })}
      </div>
    </>
  );
};

export default VariantSelector;

