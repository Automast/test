app/signup/page.tsx

'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import Image from 'next/image';
import { zodResolver } from '@hookform/resolvers/zod';
import { useForm } from 'react-hook-form';
import { signupSchema, type SignupFormData } from '@/lib/schemas/onboarding-schemas';
import { useOnboardingStore } from '@/lib/store/onboarding-store';
import { signupUrl } from '@/consts/paths';
import logoImg from '@/assets/images/logo.svg';
import { Loader2, Eye, EyeOff, Shield, Zap, Globe, DollarSign, CheckCircle, TrendingUp } from 'lucide-react';

export default function SignupPage() {
  const router = useRouter();
  const { setStage, clearData } = useOnboardingStore();
  const [isLoading, setIsLoading] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);

  // Check if user is already logged in
  useEffect(() => {
    const token = localStorage.getItem('jwt_token');
    if (token) {
      // Validate token by checking user status
      fetch(`${process.env.NEXT_PUBLIC_API_URL}/auth/me`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      })
      .then(res => res.json())
      .then(result => {
        if (result.success) {
          // User is authenticated, check onboarding status
          if (result.data.user.onboardingComplete) {
            router.replace('/merchant');
          } else {
            // User exists but onboarding not complete, go to onboarding
            router.replace('/onboarding/business');
          }
        } else {
          // Token is invalid, remove it
          localStorage.removeItem('jwt_token');
          localStorage.removeItem('user_data');
          document.cookie = 'token=; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT;';
        }
      })
      .catch(() => {
        // If error, remove invalid token and let them stay on signup
        localStorage.removeItem('jwt_token');
        localStorage.removeItem('user_data');
        document.cookie = 'token=; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT;';
      });
    }
  }, [router]);

  const {
    register,
    handleSubmit,
    formState: { errors },
    setError,
  } = useForm<SignupFormData>({
    resolver: zodResolver(signupSchema),
  });

  const onSubmit = async (data: SignupFormData) => {
    setIsLoading(true);
    
    try {
      // Clear any existing onboarding data before starting fresh
      clearData();
      
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}${signupUrl}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          email: data.email,
          password: data.password,
        }),
      });

      const result = await response.json();

      if (result.success) {
        // Store the token in both localStorage and as a cookie for middleware
        localStorage.setItem('jwt_token', result.data.token);
        localStorage.setItem('user_data', JSON.stringify(result.data.user));
        
        // Set cookie for middleware
        document.cookie = `token=${result.data.token}; path=/; max-age=86400; secure; samesite=lax`;
        
        // Set onboarding stage to business (first step after signup)
        setStage('business');
        
        // Redirect to onboarding
        router.push('/onboarding/business');
      } else {
        // Handle specific errors
        if (result.message?.includes('email')) {
          setError('email', { message: result.message });
        } else {
          setError('root', { message: result.message || 'Something went wrong' });
        }
      }
    } catch (error) {
      setError('root', { message: 'Network error. Please try again.' });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-white">
      <div className="flex min-h-screen">
        {/* Left Content Section */}
        <div className="hidden lg:flex lg:w-1/2 bg-gradient-to-br from-slate-50 to-blue-50 p-12 flex-col justify-center">
          <div className="max-w-md">
            <div className="mb-8">
              <Image src={logoImg} alt="ArkusPay" className="h-10 w-auto mb-6" />
              <h1 className="text-3xl font-bold text-gray-900 mb-4">
                Accept payments with confidence
              </h1>
              <p className="text-lg text-gray-600">
                Join thousands of merchants who trust ArkusPay for secure, fast, and reliable payment processing.
              </p>
            </div>

            <div className="space-y-6">
              <div className="flex items-start space-x-4">
                <div className="flex-shrink-0">
                  <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
                    <Shield className="w-5 h-5 text-blue-600" />
                  </div>
                </div>
                <div>
                  <h3 className="font-semibold text-gray-900 mb-1">Advanced Security</h3>
                  <p className="text-gray-600 text-sm">
                    Bank-level encryption and fraud protection to keep your transactions secure.
                  </p>
                </div>
              </div>

              <div className="flex items-start space-x-4">
                <div className="flex-shrink-0">
                  <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
                    <Zap className="w-5 h-5 text-blue-600" />
                  </div>
                </div>
                <div>
                  <h3 className="font-semibold text-gray-900 mb-1">Lightning Fast Setup</h3>
                  <p className="text-gray-600 text-sm">
                    Get your payment system up and running in minutes, not hours.
                  </p>
                </div>
              </div>

              <div className="flex items-start space-x-4">
                <div className="flex-shrink-0">
                  <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
                    <Globe className="w-5 h-5 text-blue-600" />
                  </div>
                </div>
                <div>
                  <h3 className="font-semibold text-gray-900 mb-1">Global Reach</h3>
                  <p className="text-gray-600 text-sm">
                    Accept payments from customers worldwide with multi-currency support.
                  </p>
                </div>
              </div>

              <div className="flex items-start space-x-4">
                <div className="flex-shrink-0">
                  <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
                    <DollarSign className="w-5 h-5 text-blue-600" />
                  </div>
                </div>
                <div>
                  <h3 className="font-semibold text-gray-900 mb-1">Competitive Rates</h3>
                  <p className="text-gray-600 text-sm">
                    Transparent pricing with no hidden fees and competitive transaction rates.
                  </p>
                </div>
              </div>
            </div>

            <div className="mt-12 p-6 bg-white rounded-lg shadow-sm border border-gray-100">
              <div className="flex items-center space-x-3 mb-3">
                <CheckCircle className="w-5 h-5 text-green-500" />
                <span className="text-sm font-medium text-gray-900">Trusted by 10,000+ merchants</span>
              </div>
              <div className="flex items-center space-x-3">
                <TrendingUp className="w-5 h-5 text-green-500" />
                <span className="text-sm font-medium text-gray-900">99.9% uptime guarantee</span>
              </div>
            </div>
          </div>
        </div>

        {/* Right Form Section */}
        <div className="flex-1 flex flex-col justify-center px-4 sm:px-6 lg:px-8">
          {/* Mobile Logo */}
          <div className="lg:hidden text-center mb-8">
            <Image src={logoImg} alt="ArkusPay" className="h-10 w-auto mx-auto" />
          </div>

          <div className="w-full max-w-md mx-auto">
            <div className="text-center mb-8">
              <h2 className="text-3xl font-bold text-gray-900">
                Create your account
              </h2>
              <p className="mt-3 text-gray-600">
                Start accepting payments in minutes
              </p>
            </div>

            <div className="bg-white">
              <form className="space-y-6" onSubmit={handleSubmit(onSubmit)}>
                <div>
                  <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-2">
                    Email address
                  </label>
                  <input
                    {...register('email')}
                    type="email"
                    autoComplete="email"
                    disabled={isLoading}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors disabled:bg-gray-100 disabled:cursor-not-allowed"
                    placeholder="Enter your email"
                  />
                  {errors.email && (
                    <p className="mt-2 text-sm text-red-600">{errors.email.message}</p>
                  )}
                </div>

                <div>
                  <label htmlFor="password" className="block text-sm font-medium text-gray-700 mb-2">
                    Password
                  </label>
                  <div className="relative">
                    <input
                      {...register('password')}
                      type={showPassword ? 'text' : 'password'}
                      autoComplete="new-password"
                      disabled={isLoading}
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 pr-12 transition-colors disabled:bg-gray-100 disabled:cursor-not-allowed"
                      placeholder="Enter your password"
                    />
                    <button
                      type="button"
                      disabled={isLoading}
                      className="absolute inset-y-0 right-0 pr-4 flex items-center disabled:cursor-not-allowed"
                      onClick={() => setShowPassword(!showPassword)}
                    >
                      {showPassword ? (
                        <EyeOff className="h-5 w-5 text-gray-400 hover:text-gray-600" />
                      ) : (
                        <Eye className="h-5 w-5 text-gray-400 hover:text-gray-600" />
                      )}
                    </button>
                  </div>
                  {errors.password && (
                    <p className="mt-2 text-sm text-red-600">{errors.password.message}</p>
                  )}
                </div>

                <div>
                  <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700 mb-2">
                    Confirm Password
                  </label>
                  <div className="relative">
                    <input
                      {...register('confirmPassword')}
                      type={showConfirmPassword ? 'text' : 'password'}
                      autoComplete="new-password"
                      disabled={isLoading}
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 pr-12 transition-colors disabled:bg-gray-100 disabled:cursor-not-allowed"
                      placeholder="Confirm your password"
                    />
                    <button
                      type="button"
                      disabled={isLoading}
                      className="absolute inset-y-0 right-0 pr-4 flex items-center disabled:cursor-not-allowed"
                      onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                    >
                      {showConfirmPassword ? (
                        <EyeOff className="h-5 w-5 text-gray-400 hover:text-gray-600" />
                      ) : (
                        <Eye className="h-5 w-5 text-gray-400 hover:text-gray-600" />
                      )}
                    </button>
                  </div>
                  {errors.confirmPassword && (
                    <p className="mt-2 text-sm text-red-600">{errors.confirmPassword.message}</p>
                  )}
                </div>

                {errors.root && (
                  <div className="rounded-lg bg-red-50 border border-red-200 p-4">
                    <p className="text-sm text-red-600">{errors.root.message}</p>
                  </div>
                )}

                <div>
                  <button
                    type="submit"
                    disabled={isLoading}
                    className="w-full flex justify-center py-3 px-4 border border-transparent rounded-lg shadow-sm text-base font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                  >
                    {isLoading ? (
                      <div className="flex items-center">
                        <Loader2 className="animate-spin -ml-1 mr-3 h-5 w-5" />
                        Creating account...
                      </div>
                    ) : (
                      'Create account'
                    )}
                  </button>
                </div>

                <div className="text-center">
                  <p className="text-sm text-gray-600">
                    Already have an account?{' '}
                    <Link href="/signin" className="font-medium text-blue-600 hover:text-blue-500 transition-colors">
                      Sign in
                    </Link>
                  </p>
                </div>
              </form>
            </div>

            {/* Mobile Benefits */}
            <div className="lg:hidden mt-8 pt-8 border-t border-gray-200">
              <div className="grid grid-cols-2 gap-4 text-center">
                <div>
                  <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mx-auto mb-2">
                    <Shield className="w-6 h-6 text-blue-600" />
                  </div>
                  <p className="text-xs text-gray-600">Secure payments</p>
                </div>
                <div>
                  <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mx-auto mb-2">
                    <Zap className="w-6 h-6 text-blue-600" />
                  </div>
                  <p className="text-xs text-gray-600">Fast setup</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

app/onboarding/business/page.tsx

'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { zodResolver } from '@hookform/resolvers/zod';
import { useForm } from 'react-hook-form';
import { businessSchema, type BusinessFormData } from '@/lib/schemas/onboarding-schemas';
import { useOnboardingStore } from '@/lib/store/onboarding-store';
import { onboardingBusinessUrl } from '@/consts/paths';
import OnboardingLayout from '@/components/layouts/OnboardingLayout';
import { Loader2 } from 'lucide-react';

export default function BusinessPage() {
  const router = useRouter();
  const { data, updateData, setStage } = useOnboardingStore();
  const [isLoading, setIsLoading] = useState(false);
  const [checkingAuth, setCheckingAuth] = useState(true);

  // Check authentication and onboarding status
  useEffect(() => {
    const checkAuthAndOnboarding = async () => {
      const token = localStorage.getItem('jwt_token');
      
      if (!token) {
        router.replace('/signup');
        return;
      }

      try {
        const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/auth/me`, {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        });

        const result = await response.json();

        if (result.success) {
          // If user has completed onboarding, redirect to merchant
          if (result.data.user.onboardingComplete) {
            router.replace('/merchant');
            return;
          }
        } else {
          // Invalid token, redirect to signup
          localStorage.removeItem('jwt_token');
          localStorage.removeItem('user_data');
          router.replace('/signup');
          return;
        }
      } catch (error) {
        console.error('Auth check error:', error);
        // On error, redirect to signup
        localStorage.removeItem('jwt_token');
        localStorage.removeItem('user_data');
        router.replace('/signup');
        return;
      }

      setCheckingAuth(false);
    };

    checkAuthAndOnboarding();
  }, [router]);

  const {
    register,
    handleSubmit,
    formState: { errors },
    setError,
    setValue,
    watch,
  } = useForm<BusinessFormData>({
    resolver: zodResolver(businessSchema),
    defaultValues: {
      businessName: data.businessName || '',
      country: data.country || 'US',
      firstName: data.firstName || '',
      lastName: data.lastName || '',
    },
  });

  // Watch country changes to update currency display
  const country = watch('country');

  // Set initial values when component mounts
  useEffect(() => {
    if (data.businessName) setValue('businessName', data.businessName);
    if (data.country) setValue('country', data.country);
    if (data.firstName) setValue('firstName', data.firstName);
    if (data.lastName) setValue('lastName', data.lastName);
  }, [data, setValue]);

  const onSubmit = async (formData: BusinessFormData) => {
    setIsLoading(true);

    try {
      const token = localStorage.getItem('jwt_token');
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}${onboardingBusinessUrl}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`,
        },
        body: JSON.stringify(formData),
      });

      const result = await response.json();

      if (result.success) {
        // Update store with form data
        updateData(formData);
        setStage('address');
        
        // Navigate to next step
        router.push('/onboarding/address');
      } else {
        setError('root', { message: result.message || 'Something went wrong' });
      }
    } catch (error) {
      setError('root', { message: 'Network error. Please try again.' });
    } finally {
      setIsLoading(false);
    }
  };

  const getCurrencySymbol = (country: 'US' | 'BR') => {
    return country === 'US' ? 'USD ($)' : 'BRL (R$)';
  };

  // Show loading while checking auth
  if (checkingAuth) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <Loader2 className="animate-spin mx-auto h-8 w-8 text-blue-600" />
          <p className="mt-2 text-gray-600">Loading...</p>
        </div>
      </div>
    );
  }

  return (
    <OnboardingLayout step={0}>
      <div className="bg-white rounded-lg shadow-sm border border-gray-200">
        <div className="px-6 py-8">
          <div className="mb-8">
            <h1 className="text-2xl font-bold text-gray-900">Business Details</h1>
            <p className="mt-2 text-sm text-gray-600">
              Let's start with some basic information about your business.
            </p>
          </div>

          <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
            {/* Business Name */}
            <div>
              <label htmlFor="businessName" className="block text-sm font-medium text-gray-700 mb-2">
                Business Name <span className="text-red-500">*</span>
              </label>
              <input
                {...register('businessName')}
                type="text"
                disabled={isLoading}
                className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm disabled:bg-gray-100 disabled:cursor-not-allowed"
                placeholder="Enter your business name"
              />
              {errors.businessName && (
                <p className="mt-1 text-sm text-red-600">{errors.businessName.message}</p>
              )}
            </div>

            {/* Country Selection */}
            <div>
              <label htmlFor="country" className="block text-sm font-medium text-gray-700 mb-2">
                Country <span className="text-red-500">*</span>
              </label>
              <select
                {...register('country')}
                disabled={isLoading}
                className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm disabled:bg-gray-100 disabled:cursor-not-allowed"
              >
                <option value="US">United States</option>
                <option value="BR">Brazil</option>
              </select>
              <p className="mt-1 text-xs text-gray-500">
                Currency will be set to {getCurrencySymbol(country)}
              </p>
              {errors.country && (
                <p className="mt-1 text-sm text-red-600">{errors.country.message}</p>
              )}
            </div>

            {/* Owner Information */}
            <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
              <div>
                <label htmlFor="firstName" className="block text-sm font-medium text-gray-700 mb-2">
                  First Name <span className="text-red-500">*</span>
                </label>
                <input
                  {...register('firstName')}
                  type="text"
                  disabled={isLoading}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm disabled:bg-gray-100 disabled:cursor-not-allowed"
                  placeholder="First name"
                />
                {errors.firstName && (
                  <p className="mt-1 text-sm text-red-600">{errors.firstName.message}</p>
                )}
              </div>

              <div>
                <label htmlFor="lastName" className="block text-sm font-medium text-gray-700 mb-2">
                  Last Name <span className="text-red-500">*</span>
                </label>
                <input
                  {...register('lastName')}
                  type="text"
                  disabled={isLoading}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm disabled:bg-gray-100 disabled:cursor-not-allowed"
                  placeholder="Last name"
                />
                {errors.lastName && (
                  <p className="mt-1 text-sm text-red-600">{errors.lastName.message}</p>
                )}
              </div>
            </div>

            {/* Error Message */}
            {errors.root && (
              <div className="rounded-md bg-red-50 p-4">
                <p className="text-sm text-red-600">{errors.root.message}</p>
              </div>
            )}

            {/* Submit Button */}
            <div className="pt-4">
              <button
                type="submit"
                disabled={isLoading}
                className="w-full flex justify-center py-3 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                {isLoading ? (
                  <>
                    <Loader2 className="animate-spin -ml-1 mr-3 h-5 w-5" />
                    Processing...
                  </>
                ) : (
                  'Continue'
                )}
              </button>
            </div>
          </form>
        </div>
      </div>
    </OnboardingLayout>
  );
}

app/onboarding/address/page.tsx

'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { zodResolver } from '@hookform/resolvers/zod';
import { useForm } from 'react-hook-form';
import { addressSchema, type AddressFormData } from '@/lib/schemas/onboarding-schemas';
import { useOnboardingStore } from '@/lib/store/onboarding-store';
import { onboardingAddressUrl } from '@/consts/paths';
import { getStatesForCountry } from '@/lib/data/states';
import { getTimezonesForCountry } from '@/lib/data/timezones';
import OnboardingLayout from '@/components/layouts/OnboardingLayout';
import { Loader2, ArrowLeft } from 'lucide-react';

export default function AddressPage() {
  const router = useRouter();
  const { data, updateData, setStage } = useOnboardingStore();
  const [isLoading, setIsLoading] = useState(false);
  const [checkingAuth, setCheckingAuth] = useState(true);

  // Check authentication and onboarding status first
  useEffect(() => {
    const checkAuthAndOnboarding = async () => {
      const token = localStorage.getItem('jwt_token');
      
      if (!token) {
        router.replace('/signup');
        return;
      }

      try {
        const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/auth/me`, {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        });

        const result = await response.json();

        if (result.success) {
          // If user has completed onboarding, redirect to merchant
          if (result.data.user.onboardingComplete) {
            router.replace('/merchant');
            return;
          }
        } else {
          // Invalid token, redirect to signup
          localStorage.removeItem('jwt_token');
          localStorage.removeItem('user_data');
          router.replace('/signup');
          return;
        }
      } catch (error) {
        console.error('Auth check error:', error);
        localStorage.removeItem('jwt_token');
        localStorage.removeItem('user_data');
        router.replace('/signup');
        return;
      }

      setCheckingAuth(false);
    };

    checkAuthAndOnboarding();
  }, [router]);

  // Redirect if business step not completed
  useEffect(() => {
    if (!checkingAuth && (!data.businessName || !data.country)) {
      router.replace('/onboarding/business');
      return;
    }
  }, [data, router, checkingAuth]);

  const {
    register,
    handleSubmit,
    formState: { errors },
    setError,
    setValue,
    watch,
  } = useForm<AddressFormData>({
    resolver: zodResolver(addressSchema),
    defaultValues: {
      line1: data.line1 || '',
      line2: data.line2 || '',
      city: data.city || '',
      state: data.state || '',
      postalCode: data.postalCode || '',
      phone: data.phone || '',
      timezone: data.timezone || '',
    },
  });

  // Watch state changes for timezone suggestions
  const selectedState = watch('state');

  // Set initial values when component mounts
  useEffect(() => {
    if (data.line1) setValue('line1', data.line1);
    if (data.line2) setValue('line2', data.line2);
    if (data.city) setValue('city', data.city);
    if (data.state) setValue('state', data.state);
    if (data.postalCode) setValue('postalCode', data.postalCode);
    if (data.phone) setValue('phone', data.phone);
    if (data.timezone) setValue('timezone', data.timezone);
  }, [data, setValue]);

  // Auto-suggest timezone based on state
  useEffect(() => {
    if (selectedState && data.country) {
      const timezones = getTimezonesForCountry(data.country);
      if (timezones.length > 0 && !watch('timezone')) {
        // Simple mapping for common states (you can expand this)
        const timezoneMapping: Record<string, string> = {
          'CA': 'America/Los_Angeles',
          'NY': 'America/New_York',
          'IL': 'America/Chicago',
          'TX': 'America/Chicago',
          'SP': 'America/Sao_Paulo',
          'RJ': 'America/Sao_Paulo',
        };
        
        const suggestedTimezone = timezoneMapping[selectedState] || timezones[0].value;
        setValue('timezone', suggestedTimezone);
      }
    }
  }, [selectedState, data.country, setValue, watch]);

  // Phone number formatting functions
  const formatUSPhone = (value: string): string => {
    // Remove all non-digit characters
    const digits = value.replace(/\D/g, '');
    
    // Format as (XXX) XXX-XXXX
    if (digits.length >= 6) {
      return `(${digits.slice(0, 3)}) ${digits.slice(3, 6)}-${digits.slice(6, 10)}`;
    } else if (digits.length >= 3) {
      return `(${digits.slice(0, 3)}) ${digits.slice(3)}`;
    } else if (digits.length > 0) {
      return `(${digits}`;
    }
    return digits;
  };

  const formatBRPhone = (value: string): string => {
    // Remove all non-digit characters
    const digits = value.replace(/\D/g, '');
    
    // Format as (XX) XXXXX-XXXX
    if (digits.length >= 7) {
      return `(${digits.slice(0, 2)}) ${digits.slice(2, 7)}-${digits.slice(7, 11)}`;
    } else if (digits.length >= 2) {
      return `(${digits.slice(0, 2)}) ${digits.slice(2)}`;
    } else if (digits.length > 0) {
      return `(${digits}`;
    }
    return digits;
  };

  const formatPhoneNumber = (value: string, country: 'US' | 'BR'): string => {
    return country === 'US' ? formatUSPhone(value) : formatBRPhone(value);
  };

  const handlePhoneChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const inputElement = e.target as HTMLInputElement;
    const newValue = inputElement.value;
    const currentValue = watch('phone') || '';
    
    // Check if user is deleting
    const isDeleting = newValue.length < currentValue.length;
    
    if (isDeleting) {
      // When deleting, remove the last digit from the current digits
      const currentDigits = currentValue.replace(/\D/g, '');
      const newDigits = currentDigits.slice(0, -1);
      const formatted = formatPhoneNumber(newDigits, data.country);
      setValue('phone', formatted);
    } else {
      // When adding, format the new value
      const formatted = formatPhoneNumber(newValue, data.country);
      setValue('phone', formatted);
    }
  };

  const onSubmit = async (formData: AddressFormData) => {
    setIsLoading(true);

    try {
      const token = localStorage.getItem('jwt_token');
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}${onboardingAddressUrl}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`,
        },
        body: JSON.stringify({
          ...formData,
          country: data.country, // Include country from previous step
        }),
      });

      const result = await response.json();

      if (result.success) {
        // Update store with form data
        updateData(formData);
        setStage('selling');
        
        // Navigate to next step
        router.push('/onboarding/selling');
      } else {
        setError('root', { message: result.message || 'Something went wrong' });
      }
    } catch (error) {
      setError('root', { message: 'Network error. Please try again.' });
    } finally {
      setIsLoading(false);
    }
  };

  const handleBack = () => {
    updateData(watch()); // Save current form data
    router.push('/onboarding/business');
  };

  // Show loading while checking auth
  if (checkingAuth) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <Loader2 className="animate-spin mx-auto h-8 w-8 text-blue-600" />
          <p className="mt-2 text-gray-600">Loading...</p>
        </div>
      </div>
    );
  }

  if (!data.country) {
    return null; // Prevent flash of content before redirect
  }

  const states = getStatesForCountry(data.country);
  const timezones = getTimezonesForCountry(data.country);

  const getPostalCodePlaceholder = (country: 'US' | 'BR') => {
    return country === 'US' ? '12345 or 12345-6789' : '12345-678';
  };

  const getPhonePlaceholder = (country: 'US' | 'BR') => {
    return country === 'US' ? '(123) 456-7890' : '(11) 98765-4321';
  };

  return (
    <OnboardingLayout step={1}>
      <div className="bg-white rounded-lg shadow-sm border border-gray-200">
        <div className="px-6 py-8">
          <div className="mb-8">
            <div className="flex items-center mb-4">
              <button
                onClick={handleBack}
                disabled={isLoading}
                className="mr-4 p-2 text-gray-400 hover:text-gray-600 transition-colors rounded-md hover:bg-gray-100 disabled:cursor-not-allowed"
              >
                <ArrowLeft className="h-5 w-5" />
              </button>
              <div>
                <h1 className="text-2xl font-bold text-gray-900">Business Address</h1>
                <p className="mt-2 text-sm text-gray-600">
                  Please provide your business address and contact information.
                </p>
              </div>
            </div>
            
            {/* Country Display */}
            <div className="bg-gray-50 p-4 rounded-md">
              <p className="text-sm text-gray-600">
                <span className="font-medium">Country:</span> {data.country === 'US' ? 'United States' : 'Brazil'}
                <span className="text-gray-500 ml-2"></span>
              </p>
            </div>
          </div>

          <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
            {/* Address Line 1 */}
            <div>
              <label htmlFor="line1" className="block text-sm font-medium text-gray-700 mb-2">
                Address Line 1 <span className="text-red-500">*</span>
              </label>
              <input
                {...register('line1')}
                type="text"
                disabled={isLoading}
                className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm disabled:bg-gray-100 disabled:cursor-not-allowed"
                placeholder="Street address"
              />
              {errors.line1 && (
                <p className="mt-1 text-sm text-red-600">{errors.line1.message}</p>
              )}
            </div>

            {/* Address Line 2 */}
            <div>
              <label htmlFor="line2" className="block text-sm font-medium text-gray-700 mb-2">
                Address Line 2 <span className="text-gray-500">(optional)</span>
              </label>
              <input
                {...register('line2')}
                type="text"
                disabled={isLoading}
                className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm disabled:bg-gray-100 disabled:cursor-not-allowed"
                placeholder="Apartment, suite, etc."
              />
            </div>

            {/* City, State, Postal Code */}
            <div className="space-y-4">
              <div>
                <label htmlFor="city" className="block text-sm font-medium text-gray-700 mb-2">
                  City <span className="text-red-500">*</span>
                </label>
                <input
                  {...register('city')}
                  type="text"
                  disabled={isLoading}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm disabled:bg-gray-100 disabled:cursor-not-allowed"
                  placeholder="City"
                />
                {errors.city && (
                  <p className="mt-1 text-sm text-red-600">{errors.city.message}</p>
                )}
              </div>

              <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
                <div>
                  <label htmlFor="state" className="block text-sm font-medium text-gray-700 mb-2">
                    State <span className="text-red-500">*</span>
                  </label>
                  <select
                    {...register('state')}
                    disabled={isLoading}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm disabled:bg-gray-100 disabled:cursor-not-allowed"
                  >
                    <option value="">Select state</option>
                    {states.map((state) => (
                      <option key={state.code} value={state.code}>
                        {state.name}
                      </option>
                    ))}
                  </select>
                  {errors.state && (
                    <p className="mt-1 text-sm text-red-600">{errors.state.message}</p>
                  )}
                </div>

                <div>
                  <label htmlFor="postalCode" className="block text-sm font-medium text-gray-700 mb-2">
                    Postal Code <span className="text-red-500">*</span>
                  </label>
                  <input
                    {...register('postalCode')}
                    type="text"
                    disabled={isLoading}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm disabled:bg-gray-100 disabled:cursor-not-allowed"
                    placeholder={getPostalCodePlaceholder(data.country)}
                  />
                  {errors.postalCode && (
                    <p className="mt-1 text-sm text-red-600">{errors.postalCode.message}</p>
                  )}
                </div>
              </div>
            </div>

            {/* Phone */}
            <div>
              <label htmlFor="phone" className="block text-sm font-medium text-gray-700 mb-2">
                Phone Number <span className="text-red-500">*</span>
              </label>
              <input
                {...register('phone')}
                type="tel"
                disabled={isLoading}
                onChange={handlePhoneChange}
                className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm disabled:bg-gray-100 disabled:cursor-not-allowed"
                placeholder={getPhonePlaceholder(data.country)}
              />
              {errors.phone && (
                <p className="mt-1 text-sm text-red-600">{errors.phone.message}</p>
              )}
            </div>

            {/* Timezone */}
            <div>
              <label htmlFor="timezone" className="block text-sm font-medium text-gray-700 mb-2">
                Timezone <span className="text-red-500">*</span>
              </label>
              <select
                {...register('timezone')}
                disabled={isLoading}
                className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm disabled:bg-gray-100 disabled:cursor-not-allowed"
              >
                <option value="">Select timezone</option>
                {timezones.map((tz) => (
                  <option key={tz.value} value={tz.value}>
                    {tz.label}
                  </option>
                ))}
              </select>
              {errors.timezone && (
                <p className="mt-1 text-sm text-red-600">{errors.timezone.message}</p>
              )}
            </div>

            {/* Error Message */}
            {errors.root && (
              <div className="rounded-md bg-red-50 p-4">
                <p className="text-sm text-red-600">{errors.root.message}</p>
              </div>
            )}

            {/* Navigation Buttons */}
            <div className="pt-4 flex flex-col gap-3 sm:flex-row sm:space-x-4 sm:gap-0">
              <button
                type="button"
                onClick={handleBack}
                disabled={isLoading}
                className="w-full sm:flex-1 py-3 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors disabled:cursor-not-allowed disabled:opacity-50"
              >
                Back
              </button>
              <button
                type="submit"
                disabled={isLoading}
                className="w-full sm:flex-1 flex justify-center py-3 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                {isLoading ? (
                  <>
                    <Loader2 className="animate-spin -ml-1 mr-3 h-5 w-5" />
                    Processing...
                  </>
                ) : (
                  'Continue'
                )}
              </button>
            </div>
          </form>
        </div>
      </div>
    </OnboardingLayout>
  );
}

app/onboarding/selling/page.tsx

'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { zodResolver } from '@hookform/resolvers/zod';
import { useForm } from 'react-hook-form';
import { sellingSchema, type SellingFormData } from '@/lib/schemas/onboarding-schemas';
import { useOnboardingStore } from '@/lib/store/onboarding-store';
import { onboardingSellingUrl } from '@/consts/paths';
import OnboardingLayout from '@/components/layouts/OnboardingLayout';
import { Loader2, ArrowLeft, Store, Code, CheckCircle } from 'lucide-react';
import Image from 'next/image';

const integrationLabels = {
  shopify: 'Shopify',
  woocommerce: 'WooCommerce',
  wordpress: 'WordPress',
  custom: 'Custom API',
};

const integrationDescriptions = {
  shopify: 'Integrate with your Shopify store',
  woocommerce: 'Integrate with your WooCommerce store',
  wordpress: 'Integrate with your WordPress site',
  custom: 'Custom API integration',
};

// Integration icons/logos using public folder paths
const integrationIcons = {
  shopify: '/integration/shopify.webp',
  woocommerce: '/integration/woocommerce.webp',
  wordpress: '/integration/wordpress.webp',
  custom: 'https://brandeps.com/icon-download/A/Api-icon-vector-03.svg',
};

export default function SellingPage() {
  const router = useRouter();
  const { data, updateData, setStage, clearData } = useOnboardingStore();
  const [isLoading, setIsLoading] = useState(false);

  // Redirect if previous steps not completed
  useEffect(() => {
    if (!data.businessName || !data.country || !data.line1) {
      router.replace('/onboarding/business');
      return;
    }
  }, [data, router]);

  const {
    register,
    handleSubmit,
    formState: { errors },
    setError,
    setValue,
    watch,
  } = useForm<SellingFormData>({
    resolver: zodResolver(sellingSchema),
    defaultValues: {
      sellingMethod: data.sellingMethod || 'hosted_store',
      integrationTypes: data.integrationTypes || [],
    },
  });

  const sellingMethod = watch('sellingMethod');
  const integrationTypes = watch('integrationTypes') || [];

  // Set initial values when component mounts
  useEffect(() => {
    if (data.sellingMethod) setValue('sellingMethod', data.sellingMethod);
    if (data.integrationTypes) setValue('integrationTypes', data.integrationTypes);
  }, [data, setValue]);

  const onSubmit = async (formData: SellingFormData) => {
    setIsLoading(true);

    try {
      const token = localStorage.getItem('jwt_token');
      if (!token) {
        router.push('/signup');
        return;
      }

      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}${onboardingSellingUrl}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`,
        },
        body: JSON.stringify(formData),
      });

      const result = await response.json();

      if (result.success) {
        // Update store with form data
        updateData(formData);
        setStage('complete');
        
        // Clear the onboarding storage since it's complete
        clearData();
        
        // Update local storage with completion status
        if (result.data && result.data.user) {
          localStorage.setItem('user_data', JSON.stringify(result.data.user));
        }
        
        // Navigate to merchant dashboard
        router.push('/merchant');
      } else {
        // If the API returns 401, the token might be invalid
        if (response.status === 401) {
          localStorage.removeItem('jwt_token');
          localStorage.removeItem('user_data');
          localStorage.removeItem('onboarding-storage');
          router.push('/signup');
          return;
        }
        setError('root', { message: result.message || 'Something went wrong' });
      }
    } catch (error) {
      console.error('Onboarding error:', error);
      setError('root', { message: 'Network error. Please try again.' });
    } finally {
      setIsLoading(false);
    }
  };

  const handleBack = () => {
    updateData(watch()); // Save current form data
    router.push('/onboarding/address');
  };

  const handleSellingMethodChange = (method: 'hosted_store' | 'integration') => {
    setValue('sellingMethod', method);
    if (method === 'hosted_store') {
      setValue('integrationTypes', []);
    }
  };

  const handleIntegrationTypeChange = (type: string, checked: boolean) => {
    const current = integrationTypes || [];
    const updated = checked
      ? [...current, type]
      : current.filter((t) => t !== type);
    setValue('integrationTypes', updated);
  };

  if (!data.businessName) {
    return null; // Prevent flash of content before redirect
  }

  return (
    <OnboardingLayout step={2}>
      <div className="bg-white rounded-lg shadow-sm border border-gray-200">
        <div className="px-6 py-8">
          <div className="mb-8">
            <div className="flex items-center mb-4">
              <button
                onClick={handleBack}
                disabled={isLoading}
                className="mr-4 p-2 text-gray-400 hover:text-gray-600 transition-colors rounded-md hover:bg-gray-100 disabled:cursor-not-allowed"
              >
                <ArrowLeft className="h-5 w-5" />
              </button>
              <div>
                <h1 className="text-2xl font-bold text-gray-900">Selling Method</h1>
                <p className="mt-2 text-sm text-gray-600">
                  How would you like to start accepting payments?
                </p>
              </div>
            </div>
          </div>

          <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
            {/* Selling Method Selection */}
            <div className="space-y-4">
              <label className="block text-sm font-medium text-gray-700">
                Choose your selling method <span className="text-red-500">*</span>
              </label>

              {/* Hosted Store Option */}
              <div
                className={`relative rounded-lg border-2 p-4 cursor-pointer transition-all ${
                  sellingMethod === 'hosted_store'
                    ? 'border-blue-500 bg-blue-50'
                    : 'border-gray-200 hover:border-gray-300'
                } ${isLoading ? 'cursor-not-allowed opacity-50' : ''}`}
                onClick={() => !isLoading && handleSellingMethodChange('hosted_store')}
              >
                <div className="flex items-start">
                  <input
                    {...register('sellingMethod')}
                    type="radio"
                    value="hosted_store"
                    disabled={isLoading}
                    className="mt-1 mr-3 h-4 w-4 text-blue-600 border-gray-300 focus:ring-blue-500 disabled:cursor-not-allowed"
                  />
                  <div className="flex-1">
                    <div className="flex items-center">
                      <Store className="h-6 w-6 text-blue-600 mr-3" />
                      <h3 className="text-lg font-medium text-gray-900">Hosted Store</h3>
                    </div>
                    <p className="mt-2 text-sm text-gray-600">
                      Get a ready-to-use online store hosted by ArkusPay. Perfect for getting started quickly without technical setup.
                    </p>
                    {sellingMethod === 'hosted_store' && (
                      <div className="mt-3 flex items-center text-sm text-green-600">
                        <CheckCircle className="h-4 w-4 mr-1" />
                        No technical knowledge required
                      </div>
                    )}
                  </div>
                </div>
              </div>

              {/* Integration Option */}
              <div
                className={`relative rounded-lg border-2 p-4 cursor-pointer transition-all ${
                  sellingMethod === 'integration'
                    ? 'border-blue-500 bg-blue-50'
                    : 'border-gray-200 hover:border-gray-300'
                } ${isLoading ? 'cursor-not-allowed opacity-50' : ''}`}
                onClick={() => !isLoading && handleSellingMethodChange('integration')}
              >
                <div className="flex items-start">
                  <input
                    {...register('sellingMethod')}
                    type="radio"
                    value="integration"
                    disabled={isLoading}
                    className="mt-1 mr-3 h-4 w-4 text-blue-600 border-gray-300 focus:ring-blue-500 disabled:cursor-not-allowed"
                  />
                  <div className="flex-1">
                    <div className="flex items-center">
                      <Code className="h-6 w-6 text-blue-600 mr-3" />
                      <h3 className="text-lg font-medium text-gray-900">Integration</h3>
                    </div>
                    <p className="mt-2 text-sm text-gray-600">
                      Integrate ArkusPay with your existing website, ecommerce platform, or custom application.
                    </p>
                    {sellingMethod === 'integration' && (
                      <div className="mt-3 flex items-center text-sm text-green-600">
                        <CheckCircle className="h-4 w-4 mr-1" />
                        Flexible integration options
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </div>

            {/* Integration Types (only shown when integration is selected) */}
            {sellingMethod === 'integration' && (
              <div className="space-y-4">
                <label className="block text-sm font-medium text-gray-700">
                  Select integration types <span className="text-red-500">*</span>
                </label>
                <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
                  {Object.entries(integrationLabels).map(([key, label]) => (
                    <div
                      key={key}
                      className={`relative rounded-lg border-2 p-4 cursor-pointer transition-all ${
                        integrationTypes.includes(key)
                          ? 'border-blue-500 bg-blue-50'
                          : 'border-gray-200 hover:border-gray-300'
                      } ${isLoading ? 'cursor-not-allowed opacity-50' : ''}`}
                      onClick={() => 
                        !isLoading && handleIntegrationTypeChange(key, !integrationTypes.includes(key))
                      }
                    >
                      <div className="flex items-start">
                        <input
                          type="checkbox"
                          checked={integrationTypes.includes(key)}
                          onChange={(e) => handleIntegrationTypeChange(key, e.target.checked)}
                          disabled={isLoading}
                          className="mt-1 mr-3 h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500 disabled:cursor-not-allowed"
                        />
                        <div className="flex-1">
                          <div className="flex items-center">
                            <div className="w-6 h-6 mr-3 flex items-center justify-center">
                              {key === 'custom' ? (
                                <img
                                  src={integrationIcons[key as keyof typeof integrationIcons]}
                                  alt={`${label} logo`}
                                  className="w-6 h-6 object-contain"
                                />
                              ) : (
                                <Image
                                  src={integrationIcons[key as keyof typeof integrationIcons]}
                                  alt={`${label} logo`}
                                  width={24}
                                  height={24}
                                  className="object-contain"
                                />
                              )}
                            </div>
                            <h4 className="font-medium text-gray-900">{label}</h4>
                          </div>
                          <p className="mt-1 text-sm text-gray-600">
                            {integrationDescriptions[key as keyof typeof integrationDescriptions]}
                          </p>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
                {errors.integrationTypes && (
                  <p className="text-sm text-red-600">{errors.integrationTypes.message}</p>
                )}
              </div>
            )}

            {/* Error Message */}
            {errors.root && (
              <div className="rounded-md bg-red-50 p-4">
                <p className="text-sm text-red-600">{errors.root.message}</p>
              </div>
            )}

            {/* Navigation Buttons */}
            <div className="pt-4 flex flex-col gap-3 sm:flex-row sm:space-x-4 sm:gap-0">
              <button
                type="button"
                onClick={handleBack}
                disabled={isLoading}
                className="w-full sm:flex-1 py-3 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors disabled:cursor-not-allowed disabled:opacity-50"
              >
                Back
              </button>
              <button
                type="submit"
                disabled={isLoading}
                className="w-full sm:flex-1 flex justify-center py-3 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                {isLoading ? (
                  <>
                    <Loader2 className="animate-spin -ml-1 mr-3 h-5 w-5" />
                    Finalizing...
                  </>
                ) : (
                  'Complete Setup'
                )}
              </button>
            </div>
          </form>
        </div>
      </div>
    </OnboardingLayout>
  );
}

app/onboarding/layout.tsx

// app/onboarding/layout.tsx
import React, { ReactNode, Suspense } from 'react';
// No need to import OnboardingLayout here as it's applied through page structure
// Forcing Suspense boundary for child pages if they use useSearchParams
export default function Layout({ children }: { children: ReactNode }) {
  return <Suspense>{children}</Suspense>;
}

components/ui/ProgressBar.tsx

'use client';

import React from 'react';
import { Check } from 'lucide-react';

interface ProgressBarProps {
  step: number;
}

export default function ProgressBar({ step }: ProgressBarProps) {
  const items = [
    { label: 'Business', index: 0 },
    { label: 'Address', index: 1 },
    { label: 'Selling', index: 2 },
  ];

  return (
    <nav aria-label="Progress" className="flex items-center justify-center gap-8 py-6">
      {items.map((item, index) => (
        <div key={item.label} className="flex items-center">
          <span
            className={`h-8 w-8 rounded-full flex items-center justify-center transition-colors ${
              index === step
                ? 'bg-blue-600 text-white'
                : index < step
                ? 'bg-green-600 text-white'
                : 'bg-gray-200 text-gray-600'
            }`}
            aria-label={`Step ${index + 1}: ${item.label}`}
          >
            {index < step ? <Check size={16} /> : null}
          </span>
          {index < items.length - 1 && (
            <span className="h-px w-16 bg-gray-300" aria-hidden />
          )}
        </div>
      ))}
    </nav>
  );
}

components/ui/index.ts

export { default as BusinessSettingsTab } from './BusinessSettingsTab';
export { default as FeeSettingsTab } from './FeeSettingsTab';
export { default as ProfileSettingsTab } from './ProfileSettingsTab';
export { default as OTPModal } from './OTPModal';
export { default as ConfirmModal } from './ConfirmModal';
export { default as TFACodeModal } from './TFACodeModal';
export { default as AddProductModal } from './AddProductModal';
export { default as AddShippingModal } from './AddShippingModal';
export { default as ProductViewModal } from './ProductViewModal';
export { default as ProgressBar } from './ProgressBar';

components/layouts/OnboardingLayout.tsx

'use client';

import { ReactNode } from 'react';
import { useRouter } from 'next/navigation';
import Image from 'next/image';
import ProgressBar from '@/components/ui/ProgressBar';
import logoImg from '@/assets/images/logo.svg';

interface OnboardingLayoutProps {
  step: number;
  children: ReactNode;
}

export default function OnboardingLayout({ step, children }: OnboardingLayoutProps) {
  const router = useRouter();

  const handleLogout = () => {
    localStorage.removeItem('jwt_token');
    localStorage.removeItem('user_data');
    localStorage.removeItem('onboarding-storage');
    // Clear cookie
    document.cookie = 'token=; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT;';
    router.push('/signin');
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <Image src={logoImg} alt="ArkusPay" className="h-8 w-auto" />
            <button
              onClick={handleLogout}
              className="text-sm text-gray-600 hover:text-gray-900 transition-colors px-3 py-2 rounded-md hover:bg-gray-100"
            >
              Logout
            </button>
          </div>
        </div>
      </header>

      {/* Progress Bar */}
      <div className="bg-white">
        <div className="max-w-2xl mx-auto px-4 sm:px-6 lg:px-8">
          <ProgressBar step={step} />
        </div>
      </div>

      {/* Main Content */}
      <main className="w-full max-w-2xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {children}
      </main>
    </div>
  );
}

components/layouts/index.ts

export { default as MainLayout } from './MainLayout';
export { default as DashLayout } from './DashLayout';
export { default as OnboardingLayout } from './OnboardingLayout';

lib/store/onboarding-store.ts

import { create } from 'zustand';
import { persist } from 'zustand/middleware';

export type OnboardingStage = 'signup' | 'business' | 'address' | 'selling' | 'complete';

export interface OnboardingData {
  businessName: string;
  country: 'US' | 'BR';
  firstName: string;
  lastName: string;
  line1: string;
  line2: string;
  city: string;
  state: string;
  postalCode: string;
  phone: string;
  timezone: string;
  sellingMethod: 'hosted_store' | 'integration';
  integrationTypes: string[];
}

interface OnboardingStore {
  stage: OnboardingStage;
  data: Partial<OnboardingData>;
  setStage: (stage: OnboardingStage) => void;
  updateData: (newData: Partial<OnboardingData>) => void;
  clearData: () => void;
  getCurrentStepIndex: () => number;
  isComplete: () => boolean;
}

const initialData: Partial<OnboardingData> = {
  businessName: '',
  country: 'US',
  firstName: '',
  lastName: '',
  line1: '',
  line2: '',
  city: '',
  state: '',
  postalCode: '',
  phone: '',
  timezone: '',
  sellingMethod: 'hosted_store',
  integrationTypes: [],
};

export const useOnboardingStore = create<OnboardingStore>()(
  persist(
    (set, get) => ({
      stage: 'signup',
      data: initialData,
      setStage: (stage) => set({ stage }),
      updateData: (newData) =>
        set((state) => ({
          data: { ...state.data, ...newData },
        })),
      clearData: () => set({ 
        data: initialData, 
        stage: 'complete' 
      }),
      getCurrentStepIndex: () => {
        const { stage } = get();
        switch (stage) {
          case 'business':
            return 0;
          case 'address':
            return 1;
          case 'selling':
            return 2;
          default:
            return -1;
        }
      },
      isComplete: () => {
        const { stage } = get();
        return stage === 'complete';
      },
    }),
    {
      name: 'onboarding-storage',
    }
  )
);

lib/schemas/onboarding-schemas.ts

import { z } from 'zod';

// Email validation
export const emailSchema = z
  .string()
  .email('Enter a valid email')
  .min(1, 'Email is required');

// Password validation
export const passwordSchema = z
  .string()
  .min(8, 'Password must be at least 8 characters')
  .regex(/[A-Z]/, 'Password must contain at least one uppercase letter')
  .regex(/[a-z]/, 'Password must contain at least one lowercase letter')
  .regex(/\d/, 'Password must contain at least one digit');

// Signup schema
export const signupSchema = z
  .object({
    email: emailSchema,
    password: passwordSchema,
    confirmPassword: z.string().min(1, 'Please confirm your password'),
  })
  .refine((data) => data.password === data.confirmPassword, {
    message: 'Passwords do not match',
    path: ['confirmPassword'],
  });

// Business details schema
export const businessSchema = z.object({
  businessName: z.string().min(2, 'Business name must be at least 2 characters'),
  country: z.enum(['US', 'BR']),
  firstName: z
    .string()
    .min(2, 'First name must be at least 2 characters')
    .regex(/^[a-zA-Z\s]+$/, 'First name must contain only letters'),
  lastName: z
    .string()
    .min(2, 'Last name must be at least 2 characters')
    .regex(/^[a-zA-Z\s]+$/, 'Last name must contain only letters'),
});

// Address schema
export const addressSchema = z.object({
  line1: z.string().min(5, 'Address must be at least 5 characters'),
  line2: z.string().optional(),
  city: z.string().min(2, 'City must be at least 2 characters'),
  state: z.string().min(1, 'State is required'),
  postalCode: z.string().min(1, 'Postal code is required'),
  phone: z.string().min(1, 'Phone number is required'),
  timezone: z.string().min(1, 'Timezone is required'),
});

// Selling method schema
export const sellingSchema = z
  .object({
    sellingMethod: z.enum(['hosted_store', 'integration']),
    integrationTypes: z.array(z.string()).optional(),
  })
  .refine(
    (data) => {
      if (data.sellingMethod === 'integration') {
        return data.integrationTypes && data.integrationTypes.length > 0;
      }
      return true;
    },
    {
      message: 'Please select at least one integration type',
      path: ['integrationTypes'],
    }
  );

export type SignupFormData = z.infer<typeof signupSchema>;
export type BusinessFormData = z.infer<typeof businessSchema>;
export type AddressFormData = z.infer<typeof addressSchema>;
export type SellingFormData = z.infer<typeof sellingSchema>;

lib/data/states.ts

export const US_STATES = [
    { code: 'AL', name: 'Alabama' },
    { code: 'AK', name: 'Alaska' },
    { code: 'AZ', name: 'Arizona' },
    { code: 'AR', name: 'Arkansas' },
    { code: 'CA', name: 'California' },
    { code: 'CO', name: 'Colorado' },
    { code: 'CT', name: 'Connecticut' },
    { code: 'DE', name: 'Delaware' },
    { code: 'FL', name: 'Florida' },
    { code: 'GA', name: 'Georgia' },
    { code: 'HI', name: 'Hawaii' },
    { code: 'ID', name: 'Idaho' },
    { code: 'IL', name: 'Illinois' },
    { code: 'IN', name: 'Indiana' },
    { code: 'IA', name: 'Iowa' },
    { code: 'KS', name: 'Kansas' },
    { code: 'KY', name: 'Kentucky' },
    { code: 'LA', name: 'Louisiana' },
    { code: 'ME', name: 'Maine' },
    { code: 'MD', name: 'Maryland' },
    { code: 'MA', name: 'Massachusetts' },
    { code: 'MI', name: 'Michigan' },
    { code: 'MN', name: 'Minnesota' },
    { code: 'MS', name: 'Mississippi' },
    { code: 'MO', name: 'Missouri' },
    { code: 'MT', name: 'Montana' },
    { code: 'NE', name: 'Nebraska' },
    { code: 'NV', name: 'Nevada' },
    { code: 'NH', name: 'New Hampshire' },
    { code: 'NJ', name: 'New Jersey' },
    { code: 'NM', name: 'New Mexico' },
    { code: 'NY', name: 'New York' },
    { code: 'NC', name: 'North Carolina' },
    { code: 'ND', name: 'North Dakota' },
    { code: 'OH', name: 'Ohio' },
    { code: 'OK', name: 'Oklahoma' },
    { code: 'OR', name: 'Oregon' },
    { code: 'PA', name: 'Pennsylvania' },
    { code: 'RI', name: 'Rhode Island' },
    { code: 'SC', name: 'South Carolina' },
    { code: 'SD', name: 'South Dakota' },
    { code: 'TN', name: 'Tennessee' },
    { code: 'TX', name: 'Texas' },
    { code: 'UT', name: 'Utah' },
    { code: 'VT', name: 'Vermont' },
    { code: 'VA', name: 'Virginia' },
    { code: 'WA', name: 'Washington' },
    { code: 'WV', name: 'West Virginia' },
    { code: 'WI', name: 'Wisconsin' },
    { code: 'WY', name: 'Wyoming' },
  ];
  
  export const BR_STATES = [
    { code: 'AC', name: 'Acre' },
    { code: 'AL', name: 'Alagoas' },
    { code: 'AP', name: 'Amapá' },
    { code: 'AM', name: 'Amazonas' },
    { code: 'BA', name: 'Bahia' },
    { code: 'CE', name: 'Ceará' },
    { code: 'DF', name: 'Distrito Federal' },
    { code: 'ES', name: 'Espírito Santo' },
    { code: 'GO', name: 'Goiás' },
    { code: 'MA', name: 'Maranhão' },
    { code: 'MT', name: 'Mato Grosso' },
    { code: 'MS', name: 'Mato Grosso do Sul' },
    { code: 'MG', name: 'Minas Gerais' },
    { code: 'PA', name: 'Pará' },
    { code: 'PB', name: 'Paraíba' },
    { code: 'PR', name: 'Paraná' },
    { code: 'PE', name: 'Pernambuco' },
    { code: 'PI', name: 'Piauí' },
    { code: 'RJ', name: 'Rio de Janeiro' },
    { code: 'RN', name: 'Rio Grande do Norte' },
    { code: 'RS', name: 'Rio Grande do Sul' },
    { code: 'RO', name: 'Rondônia' },
    { code: 'RR', name: 'Roraima' },
    { code: 'SC', name: 'Santa Catarina' },
    { code: 'SP', name: 'São Paulo' },
    { code: 'SE', name: 'Sergipe' },
    { code: 'TO', name: 'Tocantins' },
  ];
  
  export const getStatesForCountry = (country: 'US' | 'BR') => {
    return country === 'US' ? US_STATES : BR_STATES;
  };

lib/data/timezones.ts

export const US_TIMEZONES = [
    { value: 'America/New_York', label: 'Eastern Time (EST/EDT)' },
    { value: 'America/Chicago', label: 'Central Time (CST/CDT)' },
    { value: 'America/Denver', label: 'Mountain Time (MST/MDT)' },
    { value: 'America/Los_Angeles', label: 'Pacific Time (PST/PDT)' },
    { value: 'America/Anchorage', label: 'Alaska Time (AKST/AKDT)' },
    { value: 'America/Adak', label: 'Hawaii-Aleutian Time (HAST/HADT)' },
  ];
  
  export const BR_TIMEZONES = [
    { value: 'America/Sao_Paulo', label: 'Brasília Time (BRT/BRST)' },
    { value: 'America/Bahia', label: 'Bahia Time (BRT)' },
    { value: 'America/Manaus', label: 'Amazon Time (AMT/AMST)' },
    { value: 'America/Noronha', label: 'Fernando de Noronha Time (FNT)' },
  ];
  
  export const getTimezonesForCountry = (country: 'US' | 'BR') => {
    return country === 'US' ? US_TIMEZONES : BR_TIMEZONES;
  };

lib/utils.ts

// lib/utils.ts
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

consts/paths.ts

export const apiBaseUrl = `${process.env.NEXT_PUBLIC_API_URL}`;

// auth
export const signupUrl = `/auth/register`;
export const signinUrl = `/auth/login`;
export const meUrl = `/auth/me`;

// onboarding
export const onboardingBusinessUrl = `/onboarding/business`;
export const onboardingAddressUrl = `/onboarding/address`;
export const onboardingSellingUrl = `/onboarding/selling-method`;

// notifications
export const notiUrl = `/notifications`;

// transactions
export const transactionsUrl = `/transactions`;
export const transactionDetailUrl = `/transactions`;

// products
export const productsUrl = `/products`;
export const productDetailUrl = `/products`;

// integrations
export const webhooksUrl = `/webhooks`;

// finance
export const payoutsUrl = `/payouts`;
export const payoutDetailUrl = `/payouts`;
export const payoutAccountsUrl = `/payouts/accounts`;

// settings
export const tfaStatusUrl = `/settings/tfa/status`;
export const profileUrl = `/settings/profile`;
export const profileOTPUrl = `/settings/profile/otp`;
export const passwordChangeUrl = `/settings/profile/changepassword`;
export const emailChangeUrl = `/settings/profile/changemail`;
export const mailOTPUrl = `/settings/profile/otpmail`;
export const authenticatorCodeUrl = `/settings/auth/app/code`;
export const authenticatorVerifyUrl = `/settings/auth/app/verify`;

middleware.ts

import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';

export function middleware(request: NextRequest) {
  const token = request.cookies.get('token')?.value;
  const pathname = request.nextUrl.pathname;

  // Public paths that don't require authentication
  const publicPaths = ['/', '/signin', '/signup'];
  const isPublicPath = publicPaths.includes(pathname);
  
  // Onboarding paths
  const isOnboardingPath = pathname.startsWith('/onboarding');
  
  // Merchant paths
  const isMerchantPath = pathname.startsWith('/merchant');

  // If no token and trying to access protected route
  if (!token && !isPublicPath && !isOnboardingPath) {
    return NextResponse.redirect(new URL('/signup', request.url));
  }

  // If has token and trying to access public auth pages (signin/signup)
  if (token && (pathname === '/signin' || pathname === '/signup')) {
    // We need to check user status, but since middleware can't make async calls easily,
    // we'll let the pages handle the redirect based on onboarding status
    return NextResponse.next();
  }

  // If has token and trying to access merchant area
  if (token && isMerchantPath) {
    // Let the merchant pages handle onboarding checks
    return NextResponse.next();
  }

  // If has token and trying to access onboarding
  if (token && isOnboardingPath) {
    // Let the onboarding pages handle completion checks
    return NextResponse.next();
  }

  // Allow requests to continue
  return NextResponse.next();
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - api (API routes)
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * - assets (static assets)
     */
    '/((?!api|_next/static|_next/image|favicon.ico|assets).*)',
  ],
};

