app/globals.css
@import 'tailwindcss';
@custom-variant dark (&:where(.dark, .dark *));

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
}

body {
  background: var(--background);
  color: var(--foreground);
  font-family: 'Geist', Arial, Helvetica, sans-serif;
}


app/layout.tsx
import type { Metadata } from 'next';
import { ToastContainer } from 'react-toastify';
import { Geist, Geist_Mono } from 'next/font/google';

import './globals.css';
import 'react-loading-skeleton/dist/skeleton.css';
import 'react-toastify/dist/ReactToastify.css';

const geistSans = Geist({
  variable: '--font-geist-sans',
  subsets: ['latin'],
});

const geistMono = Geist_Mono({
  variable: '--font-geist-mono',
  subsets: ['latin'],
});

export const metadata: Metadata = {
  title: 'ArkusPay',
  description: 'A simple and faster payment gateway for credit cards, cryptocurrency, and bank transfers.',
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
        {children}
        <ToastContainer 
          position="top-right"
          autoClose={5000}
          hideProgressBar={false}
          newestOnTop={false}
          closeOnClick
          rtl={false}
          pauseOnFocusLoss
          draggable
          pauseOnHover
          theme="colored"
        />
      </body>
    </html>
  );
}

app/merchant/finance/accounts/page.tsx
'use client';

import { DashLayout } from '@/components/layouts';
import { payoutAccountsUrl } from '@/consts/paths';
import Toaster from '@/helpers/Toaster';
import { useApiRequest } from '@/hooks';
import { accountsMock } from '@/mock';
import { Account } from '@/types';
import { ChevronDownIcon, PencilLine, PlusIcon } from 'lucide-react';
import { useEffect, useState } from 'react';

import bankIcon from '@/assets/images/icons/bank.svg';
import cryptoIcon from '@/assets/images/icons/crypto.svg';
import Image from 'next/image';
import { Listbox, ListboxButton, ListboxOption, ListboxOptions } from '@headlessui/react';

const AccountsPage = () => {
  const [typeFilter, setTypeFilter] = useState<'bank' | 'crypto'>('bank');
  const [accountData, setAccountData] = useState<Account[]>([] as Account[]);
  const [showBankModal, setShowBankModal] = useState(false);
  const [showCryptoModal, setShowCryptoModal] = useState(false);
  const [currentBank, setCurrentBank] = useState<{
    id?: string;
  }>({});
  const [currentCrypto, setCurrentCrypto] = useState<{ id?: string }>({});

  const [currency, setCurrency] = useState('');
  const [country, setCountry] = useState('');
  const [accNum, setAccNum] = useState('');
  const [iban, setIban] = useState('');
  const [accNumConf, setAccNumConf] = useState('');
  const [swift, setSwift] = useState('');
  const [routing, setRouting] = useState('');
  const [isPolicy, setPolicy] = useState(false);

  const [crAccount, setCrAccount] = useState('');
  const [crChannel, setCrChannel] = useState('');
  const [crAddress, setCrAddress] = useState('');
  const [crAddressConf, setCrAddressConf] = useState('');
  const [isCrPolicy, setCrPolicy] = useState(false);

  const {
    response: accountsResponse,
    error: accountsError,
    loading: accountsLoading,
    sendRequest: sendAccountsRequest,
  } = useApiRequest({
    endpoint: payoutAccountsUrl,
    headers: {
      Accept: 'application/json',
      Authorization: `Bearer 124567890`, // this needs to be changed with the local storage key
    },
    method: 'GET',
    params: {
      type: typeFilter,
    },
  });

  useEffect(() => {
    if (accountsResponse) {
      // Handle the response data here
      setAccountData(accountsResponse.data); // this should be changed according to the response structure, this is the real code
    }
  }, [accountsResponse]);

  useEffect(() => {
    if (accountsError) {
      Toaster.error(accountsError?.message);

      // mock data instead: remove this code in production mode
      setAccountData(accountsMock);
    }
  }, [accountsError]);

  useEffect(() => {
    if (!showBankModal) {
      setCurrency('');
      setCountry('');
      setAccNum('');
      setAccNumConf('');
      setIban('');
      setSwift('');
      setRouting('');
      setPolicy(false);
    }
  }, [showBankModal]);

  useEffect(() => {
    if (!showCryptoModal) {
      setCrAccount('');
      setCrChannel('');
      setCrAddress('');
      setCrAddressConf('');
      setCrPolicy(false);
    }
  }, [showCryptoModal]);

  useEffect(() => {
    sendAccountsRequest();
  }, [typeFilter]);

  return (
    <DashLayout titleArea={<h2 className="text-xl font-semibold truncate">Manage Payout Accounts</h2>}>
      <div className="p-4 bg-white rounded-lg">
        <div className="flex items-center justify-between border-b border-b-gray-200 pb-2 mb-3 mx-2">
          <div className="flex space-x-4 text-sm font-medium text-gray-900">
            <div
              className={`${
                typeFilter === 'bank' ? 'text-blue-500' : 'cursor-pointer hover:text-gray-500'
              } transition-colors duration-200 ease-in-out truncate`}
              onClick={() => setTypeFilter('bank')}
            >
              Bank Accounts
            </div>
            <div
              className={`${
                typeFilter === 'crypto' ? 'text-blue-500' : 'cursor-pointer hover:text-gray-500'
              } transition-colors duration-200 ease-in-out truncate`}
              onClick={() => setTypeFilter('crypto')}
            >
              Crypto Wallets
            </div>
          </div>
          {typeFilter === 'bank' && (
            <button
              className="flex items-center gap-2 hover:bg-blue-600 text-white px-3 py-2 ml-2 text-sm rounded-md cursor-pointer transition-colors duration-200 ease-in-out hover:bg-blue-400 truncate"
              onClick={() => {
                setCurrentBank({});
                setShowBankModal(true);
              }}
            >
              <PlusIcon className="w-4 h-4" />
              Add New Bank Account
            </button>
          )}
          {typeFilter === 'crypto' && (
            <button
              className="flex items-center gap-2 hover:bg-blue-600 text-white px-3 py-2 ml-2 text-sm rounded-md cursor-pointer transition-colors duration-200 ease-in-out hover:bg-blue-400 truncate"
              onClick={() => setShowCryptoModal(true)}
            >
              <PlusIcon className="w-4 h-4" />
              Add New Crypto Wallet
            </button>
          )}
        </div>
        {/* <div className="flex gap-4 flex-wrap mb-3 px-2 items-center justify-between">
          {typeFilter === 'bank' && <div className="text-lg font-semibold">Payout Bank Accounts</div>}
          {typeFilter === 'crypto' && <div className="text-lg font-semibold">Payout Crypto Wallets</div>}
        </div> */}
        <div className="h-12 bg-gray-100 -mx-6" style={{ width: 'calc(100% + var(--spacing) * 12)' }} />

        <div className="max-w-full overflow-auto -mt-12">
          <table className="table-auto w-full mb-16">
            <thead className="bg-gray-100 text-xs font-semibold text-gray-700 mb-2">
              <tr className="h-12">
                <th className="p-2 text-left">Account Holder</th>
                <th className="p-2 text-left">
                  {typeFilter === 'bank' && 'Account Number'}
                  {typeFilter === 'crypto' && 'Wallet Address'}
                </th>
                <th className="p-2 text-left">
                  {typeFilter === 'bank' && 'Bank Name'}
                  {typeFilter === 'crypto' && 'Crypto Channel'}
                </th>
                <th className="p-2 text-left">Status</th>
                <th className="p-2 text-left">Updated On</th>
                <th className="p-2 text-left"></th>
              </tr>
            </thead>
            <tbody className="text-sm">
              {accountsLoading && (
                <tr>
                  <td colSpan={8} className="text-center p-6">
                    {typeFilter === 'bank' && 'Loading Bank Accounts...'}
                    {typeFilter === 'crypto' && 'Loading Wallet Addresses...'}
                  </td>
                </tr>
              )}
              {!accountsLoading &&
                accountData?.length > 0 &&
                accountData?.map((t, i) => (
                  <tr key={i} className="h-10">
                    <td className="p-2 whitespace-nowrap border-b border-b-gray-200 min-w-30">
                      <div className="flex items-center gap-2">
                        <Image src={typeFilter === 'bank' ? bankIcon : cryptoIcon} alt="icon" className="w-8 h-8" />
                        {t.holder}
                      </div>
                    </td>
                    <td className="p-2 whitespace-nowrap border-b border-b-gray-200">{t.address}</td>
                    <td className="p-2 whitespace-nowrap border-b border-b-gray-200">{t.where}</td>
                    <td className="p-2 border-b border-b-gray-200">
                      <span
                        className={`px-3 py-1 text-xs font-medium rounded-full text-gray-600 ${
                          t.isActive ? 'bg-[#CBFCCB]' : 'bg-gray-200'
                        }`}
                      >
                        {t.isActive ? 'Active' : 'Inactive'}
                      </span>
                    </td>
                    <td className="p-2 whitespace-nowrap border-b border-b-gray-200">
                      {t.updatedAt.toLocaleString('en-US', {
                        month: 'short',
                        day: 'numeric',
                        year: 'numeric',
                      })}
                    </td>
                    <td className="p-2 text-gray-500 border-b border-b-gray-200">
                      <button
                        className="flex items-center justify-center w-8 h-8 rounded-full hover:bg-gray-100 transition cursor-pointer"
                        onClick={() => {
                          if (typeFilter === 'bank') {
                            setCurrentBank({ id: t.id });
                            setShowBankModal(true);
                          } else {
                            setCurrentCrypto({ id: t.id });
                            setShowCryptoModal(true);
                          }
                        }}
                      >
                        <PencilLine
                          fill="gray"
                          className="w-4 h-4 text-gray-700 hover:text-gray-500 cursor-pointer transition"
                        />
                      </button>
                    </td>
                  </tr>
                ))}
              {!accountsLoading && accountData?.length === 0 && (
                <tr>
                  <td colSpan={8} className="text-center p-6">
                    {typeFilter === 'bank' && 'No Bank Accounts'}
                    {typeFilter === 'crypto' && 'No Crypto Wallets'}
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      </div>
      {showBankModal && (
        <div
          className="fixed inset-0 z-50 flex items-center justify-center bg-[#0008]"
          onClick={() => setShowBankModal(false)}
        >
          <div
            className="bg-white p-6 rounded-lg w-full max-w-xl space-y-4"
            onClick={(e) => {
              e.stopPropagation();
            }}
          >
            <div className="flex justify-between items-center border-b border-gray-200 pb-4">
              <h2 className="text-lg font-semibold">
                {currentBank?.id ? 'Edit Bank Details' : 'Add New Bank Details'}
              </h2>
              <span
                className="flex items-center justify-center w-6 h-6 rounded-full text-2xl hover:bg-gray-100 transition-colors duration-200 ease-in-out cursor-pointer"
                onClick={() => setShowBankModal(false)}
              >
                &times;
              </span>
            </div>
            <div className="max-w-xl w-full space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm mb-1">Currency</label>
                  <div className="w-full">
                    <Listbox value={currency} onChange={setCurrency}>
                      <div className="relative">
                        <ListboxButton className="w-full border border-gray-200 rounded-md px-4 py-2 text-sm text-gray-500 bg-white flex justify-between items-center focus:outline-none focus:ring-2 focus:ring-blue-500">
                          {currency?.toUpperCase() || 'Please select'}
                          <ChevronDownIcon className="w-4 h-4 text-gray-400" />
                        </ListboxButton>
                        <ListboxOptions className="absolute mt-1 max-h-60 w-full overflow-auto rounded-md bg-white py-1 text-sm shadow-lg ring-1 ring-gray-300 focus:outline-none z-10">
                          <ListboxOption
                            value="usd"
                            className={({ active }) =>
                              `cursor-pointer select-none px-4 py-2 ${
                                active ? 'bg-blue-100 text-blue-900' : 'text-gray-900'
                              }`
                            }
                          >
                            USD
                          </ListboxOption>
                          <ListboxOption
                            value="euro"
                            className={({ active }) =>
                              `cursor-pointer select-none px-4 py-2 ${
                                active ? 'bg-blue-100 text-blue-900' : 'text-gray-900'
                              }`
                            }
                          >
                            EURO
                          </ListboxOption>
                        </ListboxOptions>
                      </div>
                    </Listbox>
                  </div>
                </div>
                <div>
                  <label className="block text-sm mb-1">Country of Bank Account</label>
                  <div className="w-full">
                    <Listbox value={country} onChange={setCountry}>
                      <div className="relative">
                        <ListboxButton className="w-full border border-gray-200 rounded-md px-4 py-2 text-sm text-gray-500 bg-white flex justify-between items-center focus:outline-none focus:ring-2 focus:ring-blue-500">
                          {country || 'Please select'}
                          <ChevronDownIcon className="w-4 h-4 text-gray-400" />
                        </ListboxButton>
                        <ListboxOptions className="absolute mt-1 max-h-60 w-full overflow-auto rounded-md bg-white py-1 text-sm shadow-lg ring-1 ring-gray-300 focus:outline-none z-10">
                          <ListboxOption
                            value="USA"
                            className={({ active }) =>
                              `cursor-pointer select-none px-4 py-2 ${
                                active ? 'bg-blue-100 text-blue-900' : 'text-gray-900'
                              }`
                            }
                          >
                            United States
                          </ListboxOption>
                          <ListboxOption
                            value="UK"
                            className={({ active }) =>
                              `cursor-pointer select-none px-4 py-2 ${
                                active ? 'bg-blue-100 text-blue-900' : 'text-gray-900'
                              }`
                            }
                          >
                            United Kingdom
                          </ListboxOption>
                        </ListboxOptions>
                      </div>
                    </Listbox>
                  </div>
                </div>
                <div>
                  <label className="block text-sm mb-1">Account Number</label>
                  <input
                    type="text"
                    placeholder="Enter Account Number"
                    className="w-full border border-gray-200 rounded-md px-4 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                    value={accNum}
                    onChange={(e) => setAccNum(e.target.value)}
                  />
                </div>
                <div>
                  <label className="block text-sm mb-1">Confirm Account Number</label>
                  <input
                    type="text"
                    placeholder="Retype Account Number"
                    className="w-full border border-gray-200 rounded-md px-4 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                    value={accNumConf}
                    onChange={(e) => setAccNumConf(e.target.value)}
                  />
                </div>
                <div>
                  <label className="block text-sm mb-1">IBAN</label>
                  <input
                    type="text"
                    placeholder="Enter IBAN Number"
                    className="w-full border border-gray-200 rounded-md px-4 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                    value={iban}
                    onChange={(e) => setIban(e.target.value)}
                  />
                </div>
                <div>
                  <label className="block text-sm mb-1">Swift Code</label>
                  <input
                    type="text"
                    placeholder="Enter Swift Code"
                    className="w-full border border-gray-200 rounded-md px-4 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                    value={swift}
                    onChange={(e) => setSwift(e.target.value)}
                  />
                </div>
                <div>
                  <label className="block text-sm mb-1">Routing Code</label>
                  <input
                    type="text"
                    placeholder="Enter Routing Code"
                    className="w-full border border-gray-200 rounded-md px-4 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                    value={routing}
                    onChange={(e) => setRouting(e.target.value)}
                  />
                </div>
              </div>
              <div className="flex items-center">
                <label className="relative flex items-center cursor-pointer">
                  <input
                    id="remember-me"
                    name="remember-me"
                    type="checkbox"
                    checked={isPolicy}
                    onChange={(e) => setPolicy(e.target.checked)}
                    className="
                      appearance-none
                      h-4 w-4
                      border-2 border-gray-300
                      rounded
                      cursor-pointer
                      peer
                      checked:border-black
                      checked:bg-black"
                  />
                  <span
                    className="
                      absolute
                      left-1/2 top-1/2
                      -translate-x-1/2 -translate-y-1/2
                      text-white
                      opacity-0
                      peer-checked:opacity-100"
                  >
                    <svg width="12" height="9" viewBox="0 0 12 9" fill="none">
                      <path d="M1 4.5L4.5 8L11 1" stroke="currentColor" strokeWidth="2" strokeLinecap="round" />
                    </svg>
                  </span>
                </label>
                <label htmlFor="remember-me" className="ml-2 block text-sm text-gray-900">
                  Submitting this bank details though our platform with your concern
                </label>
              </div>
              <div className="flex gap-4 pt-6 justify-center">
                <button className="bg-blue-50 text-blue-500 font-semibold w-42 py-2 rounded-md hover:bg-blue-100  transition cursor-pointer">
                  Cancel
                </button>
                <button className="hover:bg-blue-600 text-white font-semibold w-42 py-2 rounded-md bg-blue-500 transition cursor-pointer">
                  Save
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
      {showCryptoModal && (
        <div
          className="fixed inset-0 z-50 flex items-center justify-center bg-[#0008]"
          onClick={() => setShowCryptoModal(false)}
        >
          <div
            className="bg-white p-6 rounded-lg w-full max-w-xl space-y-4"
            onClick={(e) => {
              e.stopPropagation();
            }}
          >
            <div className="flex justify-between items-center border-b border-gray-200 pb-4">
              <h2 className="text-lg font-semibold">
                {currentCrypto?.id ? 'Edit Crypto Wallet Details' : 'Add New Crypto Wallet'}
              </h2>
              <span
                className="flex items-center justify-center w-6 h-6 rounded-full text-2xl hover:bg-gray-100 transition-colors duration-200 ease-in-out cursor-pointer"
                onClick={() => setShowCryptoModal(false)}
              >
                &times;
              </span>
            </div>
            <div className="max-w-xl w-full space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm mb-1">Account Number</label>
                  <input
                    type="text"
                    placeholder="Enter Account Number"
                    className="w-full border border-gray-200 rounded-md px-4 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                    value={crAccount}
                    onChange={(e) => setCrAccount(e.target.value)}
                  />
                </div>
                <div>
                  <label className="block text-sm mb-1">Account Number</label>
                  <div className="w-full">
                    <Listbox value={crChannel} onChange={setCrChannel}>
                      <div className="relative">
                        <ListboxButton className="w-full border border-gray-200 rounded-md px-4 py-2 text-sm text-gray-500 bg-white flex justify-between items-center focus:outline-none focus:ring-2 focus:ring-blue-500">
                          {crChannel?.toUpperCase() || 'Please select'}
                          <ChevronDownIcon className="w-4 h-4 text-gray-400" />
                        </ListboxButton>
                        <ListboxOptions className="absolute mt-1 max-h-60 w-full overflow-auto rounded-md bg-white py-1 text-sm shadow-lg ring-1 ring-gray-300 focus:outline-none z-10">
                          <ListboxOption
                            value="erc20-usdt"
                            className={({ active }) =>
                              `cursor-pointer select-none px-4 py-2 ${
                                active ? 'bg-blue-100 text-blue-900' : 'text-gray-900'
                              }`
                            }
                          >
                            ERC20-USDT
                          </ListboxOption>
                          <ListboxOption
                            value="trc20-usdt"
                            className={({ active }) =>
                              `cursor-pointer select-none px-4 py-2 ${
                                active ? 'bg-blue-100 text-blue-900' : 'text-gray-900'
                              }`
                            }
                          >
                            TRC20-USDT
                          </ListboxOption>
                        </ListboxOptions>
                      </div>
                    </Listbox>
                  </div>
                </div>
                <div>
                  <label className="block text-sm mb-1">Wallet Address</label>
                  <input
                    type="text"
                    placeholder="Enter Wallet Address"
                    className="w-full border border-gray-200 rounded-md px-4 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                    value={crAddress}
                    onChange={(e) => setCrAddress(e.target.value)}
                  />
                </div>
                <div>
                  <label className="block text-sm mb-1">Confirm Wallet Address</label>
                  <input
                    type="text"
                    placeholder="Retype Wallet Address"
                    className="w-full border border-gray-200 rounded-md px-4 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                    value={crAddressConf}
                    onChange={(e) => setCrAddressConf(e.target.value)}
                  />
                </div>
              </div>
              <div className="flex items-center">
                <label className="relative flex items-center cursor-pointer">
                  <input
                    id="remember-me"
                    name="remember-me"
                    type="checkbox"
                    checked={isCrPolicy}
                    onChange={(e) => setCrPolicy(e.target.checked)}
                    className="
                      appearance-none
                      h-4 w-4
                      border-2 border-gray-300
                      rounded
                      cursor-pointer
                      peer
                      checked:border-black
                      checked:bg-black"
                  />
                  <span
                    className="
                      absolute
                      left-1/2 top-1/2
                      -translate-x-1/2 -translate-y-1/2
                      text-white
                      opacity-0
                      peer-checked:opacity-100"
                  >
                    <svg width="12" height="9" viewBox="0 0 12 9" fill="none">
                      <path d="M1 4.5L4.5 8L11 1" stroke="currentColor" strokeWidth="2" strokeLinecap="round" />
                    </svg>
                  </span>
                </label>
                <label htmlFor="remember-me" className="ml-2 block text-sm text-gray-900">
                  Submitting this bank details though our platform with your concern
                </label>
              </div>
              <div className="flex gap-4 pt-6 justify-center">
                <button className="bg-blue-50 text-blue-500 font-semibold w-42 py-2 rounded-md hover:bg-blue-100  transition cursor-pointer">
                  Cancel
                </button>
                <button className="hover:bg-blue-600 text-white font-semibold w-42 py-2 rounded-md bg-blue-500 transition cursor-pointer">
                  Save
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </DashLayout>
  );
};

export default AccountsPage;


app/merchant/finance/page.tsx
'use client';

import React, { useState, useEffect } from 'react';
import { DashLayout } from '@/components/layouts';
import { ListFilter } from 'lucide-react';

import Link from 'next/link';
import { Menu, MenuButton, MenuItem, MenuItems } from '@headlessui/react';
import { BalanceCard, Pagination } from '@/components/widgets';
import { ITEMS_PER_PAGE } from '@/consts/vars';
import { useApiRequest } from '@/hooks';
import { payoutsUrl } from '@/consts/paths';
import Toaster from '@/helpers/Toaster';
import { payoutDataMock } from '@/mock';
import { Payout, PayoutData } from '@/types/payout';
import { useRouter } from 'next/navigation';

import walletIcon from '@/assets/images/icons/walletIcon.svg';
import chartIcon from '@/assets/images/icons/chartIcon.svg';
import bagIcon from '@/assets/images/icons/bagIcon.svg';
import balanceIcon from '@/assets/images/icons/balance1.svg';
import Image from 'next/image';

const statusStyles: Record<Payout['status'], string> = {
  Approved: 'bg-green-100 text-green-700',
  Pending: 'bg-yellow-100 text-yellow-700',
  Failed: 'bg-red-100 text-red-700',
};

const formatter = new Intl.NumberFormat('en-US', {
  style: 'decimal',
  minimumFractionDigits: 2,
  maximumFractionDigits: 2,
});

const periods = [1, 2, 7, 15, 30, 0];

const withdrawMethods = [
  {
    type: 'bank',
    name: 'Bank Account',
  },
  {
    type: 'crypto',
    name: 'Crypto Wallet',
  },
];

const FinancePage = () => {
  const router = useRouter();

  const [period, setPeriod] = useState<number>(1);
  const [currentPage, setCurrentPage] = useState(1);
  const [currentCurrency, setCurrentCurrency] = useState<'USD' | 'BRL'>('USD');
  const [userCountry, setUserCountry] = useState<string>('');
  const [balances, setBalances] = useState<any>({});
  const [payoutData, setPayoutData] = useState<PayoutData>({
    pagination: {
      totalLength: 0,
      itemsPerPage: 0,
      pageCount: 0,
      currentPage: 1,
    },
    data: [] as Payout[],
  });

  const [showWithdrawModal, setShowWithdrawModal] = useState(false);
  const [showOTPModal, setShowOTPModal] = useState(false);
  const [showSuccessModal, setShowSuccessModal] = useState(false);
  const [withdrawMethod, setWithdrawMethod] = useState('');
  const [withdrawAmount, setWithdrawAmount] = useState('');
  const [otp, setOTP] = useState('');

  // Fetch user profile to determine country
  const {
    response: userResponse,
    error: userError,
    loading: userLoading,
    sendRequest: sendUserRequest,
  } = useApiRequest({
    endpoint: '/auth/me',
    headers: {
      Accept: 'application/json',
      Authorization: `Bearer ${typeof window !== 'undefined' ? localStorage.getItem('jwt_token') : ''}`,
    },
    method: 'GET',
  });

  // Fetch balance data
  const {
    response: balanceResponse,
    error: balanceError,
    loading: balanceLoading,
    sendRequest: sendBalanceRequest,
  } = useApiRequest({
    endpoint: '/finance/balance',
    headers: {
      Accept: 'application/json',
      Authorization: `Bearer ${typeof window !== 'undefined' ? localStorage.getItem('jwt_token') : ''}`,
    },
    method: 'GET',
  });

  const {
    response: payoutResponse,
    error: payoutError,
    loading: payoutLoading,
    sendRequest: sendPayoutRequest,
  } = useApiRequest({
    endpoint: payoutsUrl,
    headers: {
      Accept: 'application/json',
      Authorization: `Bearer 124567890`, // this needs to be changed with the local storage key
    },
    method: 'GET',
    params: {
      page: currentPage,
      limit: ITEMS_PER_PAGE,
      period,
    },
  });

  // Fetch user profile on component mount
  useEffect(() => {
    sendUserRequest();
    sendBalanceRequest();
  }, []);

  // Set user country and initial currency based on country
  useEffect(() => {
    if (userResponse && userResponse.success) {
      const merchant = userResponse.data.merchant;
      setUserCountry(merchant.country);
      // Set initial currency based on country
      if (merchant.country === 'BR') {
        setCurrentCurrency('BRL');
      } else {
        setCurrentCurrency('USD');
      }
    }
  }, [userResponse]);

  // Handle user fetch error
  useEffect(() => {
    if (userError) {
      console.error('Error fetching user data:', userError);
      // Default to USD if error
      setCurrentCurrency('USD');
    }
  }, [userError]);

  // Handle balance response
  useEffect(() => {
    if (balanceResponse && balanceResponse.success) {
      setBalances(balanceResponse.data.balances);
    }
  }, [balanceResponse]);

  // Handle balance error
  useEffect(() => {
    if (balanceError) {
      console.error('Error fetching balance data:', balanceError);
      Toaster.error('Failed to load balance data');
    }
  }, [balanceError]);

  // Mock payouts data
  useEffect(() => {
    sendPayoutRequest();
  }, [period, currentPage]);

  useEffect(() => {
    if (payoutResponse) {
      // Handle the response data here
      setPayoutData(payoutResponse.data); // this should be changed according to the response structure, this is the real code
    }
  }, [payoutResponse]);

  useEffect(() => {
    if (payoutError) {
      Toaster.error(payoutError?.message);

      // mock data instead: remove this code in production mode
      setPayoutData(payoutDataMock);
    }
  }, [payoutError]);

  const formatCurrency = (amount: number, currency: string) => {
    return new Intl.NumberFormat(currency === 'BRL' ? 'pt-BR' : 'en-US', {
      style: 'currency',
      currency: currency,
    }).format(amount);
  };

  // Get current balance for selected currency
  const getCurrentBalance = () => {
    if (!balances || !balances[currentCurrency]) {
      return { totalBalance: 0, available: 0, reserve: 0 };
    }
    return balances[currentCurrency];
  };

  const currentBalance = getCurrentBalance();

  // Currency flags using flag CDN
  const getCurrencyFlag = (currency: string) => {
    const countryCode = currency === 'BRL' ? 'br' : 'us';
    return `https://flagcdn.com/24x18/${countryCode}.png`;
  };

  // Currency order based on user country
  const getCurrencyOrder = () => {
    return userCountry === 'BR' ? ['BRL', 'USD'] : ['USD', 'BRL'];
  };

  return (
    <DashLayout
      titleArea={
        <>
          <h2 className="text-xl font-semibold">Finance</h2>
        </>
      }
      tools={
        <>
          <Link
            href="/merchant/finance/accounts"
            className="rounded-full bg-white hover:text-blue-500 cursor-pointer text-sm px-3 py-1.5 text-gray-700 transition-colors border border-gray-200 truncate"
          >
            Manage Accounts
          </Link>
          <button
            className="rounded-full hover:bg-blue-600 bg-blue-500 cursor-pointer text-sm px-3 py-1.5 text-white transition"
            onClick={() => setShowWithdrawModal(true)}
          >
            Withdraw
          </button>
        </>
      }
    >
      {/* Currency Toggle */}
      <div className="mb-6">
        <div className="flex items-center space-x-4">
          {getCurrencyOrder().map((currency) => (
            <button
              key={currency}
              onClick={() => setCurrentCurrency(currency as 'USD' | 'BRL')}
              className={`flex items-center space-x-2 px-4 py-2 rounded-lg border transition-colors ${
                currentCurrency === currency
                  ? 'bg-blue-500 text-white border-blue-500'
                  : 'bg-white text-gray-700 border-gray-300 hover:border-blue-300'
              }`}
            >
              <Image
                src={getCurrencyFlag(currency)}
                alt={`${currency} flag`}
                width={24}
                height={18}
                className="rounded"
              />
              <span className="font-medium">{currency}</span>
            </button>
          ))}
        </div>
        {balanceLoading && (
          <div className="mt-2 text-sm text-gray-500">Loading balances...</div>
        )}
      </div>

      {/* Balance Cards */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-3 lg:gap-6 mb-6">
        <BalanceCard
          icon={walletIcon}
          label="Available Balance"
          amount={currentBalance.available || 0}
          currency={currentCurrency}
        />
        <BalanceCard
          icon={chartIcon}
          label="Total Balance"
          amount={currentBalance.totalBalance || 0}
          currency={currentCurrency}
        />
        <BalanceCard
          icon={bagIcon}
          label="Reserve Balance"
          amount={currentBalance.reserve || 0}
          currency={currentCurrency}
        />
      </div>

      <div className="p-4 bg-white rounded-lg">
        <div className="flex gap-4 flex-wrap mb-3 px-2 items-center justify-between">
          <div className="text-lg font-bold">Payouts List</div>
          <Menu as="div" className="relative inline-block text-left">
            <div>
              <MenuButton className="inline-flex items-center gap-2 border border-gray-400 px-3 py-1 rounded-full text-sm font-medium text-gray-700 hover:bg-gray-100 cursor-pointer">
                <ListFilter className="w-4 h-4 text-indigo-900" />
                {period === 0
                  ? 'Lifetime'
                  : period === 1
                  ? 'Today'
                  : period === 2
                  ? 'Yesterday'
                  : `Last ${period} days`}
              </MenuButton>
            </div>
            <MenuItems className="absolute right-0 z-10 mt-2 w-40 origin-top-right rounded-md bg-white ring-1 ring-gray-300 focus:outline-none cursor-pointer">
              <div className="py-1">
                {periods.map((p, i) => (
                  <MenuItem key={i}>
                    <button
                      className="hover:bg-gray-100 hover:text-black text-gray-700 w-full px-4 py-2 text-left text-sm cursor-pointer"
                      onClick={() => setPeriod(p)}
                    >
                      {p === 0 ? 'Lifetime' : p === 1 ? 'Today' : p === 2 ? 'Yesterday' : `Last ${p} days`}
                    </button>
                  </MenuItem>
                ))}
              </div>
            </MenuItems>
          </Menu>
        </div>

        <div className="h-12 bg-gray-100 -mx-4" style={{ width: 'calc(100% + var(--spacing) * 8)' }} />
        <div className="max-w-full overflow-auto -mt-12">
          <table className="table-auto w-full">
            <thead className="bg-gray-100 text-xs font-semibold text-gray-700 mb-2">
              <tr className="h-12">
                <th className="p-2 text-left cursor-pointer">
                  <div className="flex items-center">
                    <span>Created At</span>
                  </div>
                </th>
                <th className="p-2 text-left cursor-pointer">
                  <div className="flex items-center">
                    <span>Transaction ID</span>
                  </div>
                </th>
                <th className="p-2 text-left cursor-pointer">
                  <div className="flex items-center">
                    <span>Transfer Method</span>
                  </div>
                </th>
                <th className="p-2 text-left cursor-pointer">
                  <div className="flex items-center">
                    <span>Status</span>
                  </div>
                </th>
                <th className="p-2 text-left cursor-pointer">
                  <div className="flex items-center">
                    <span>Amount</span>
                  </div>
                </th>
              </tr>
            </thead>
            <tbody className="text-sm">
              {payoutLoading && (
                <tr>
                  <td colSpan={8} className="text-center p-6">
                    Loading Payouts History...
                  </td>
                </tr>
              )}
              {!payoutLoading &&
                payoutData?.data?.length > 0 &&
                payoutData?.data.map((t, i) => (
                  <tr
                    key={i}
                    className="h-10 hover:bg-gray-50 cursor-pointer"
                    onClick={() => router.push(`/merchant/finance/payouts?id=${t.id}`)}
                  >
                    <td className="p-2 whitespace-nowrap border-b border-b-gray-200">
                      {t.createdAt.toLocaleString('en-US', {
                        month: 'short',
                        day: 'numeric',
                        year: 'numeric',
                        hour: 'numeric',
                        minute: '2-digit',
                        hour12: true,
                      })}
                    </td>
                    <td className="p-2 whitespace-nowrap border-b border-b-gray-200">{t.txid}</td>
                    <td className="p-2 whitespace-nowrap border-b border-b-gray-200">
                      {t.method === 'bank' ? 'Bank' : 'Crypto'}
                    </td>
                    <td className="p-2 border-b border-b-gray-200">
                      <span className={`px-2 py-1 text-xs font-medium rounded-full ${statusStyles[t.status]}`}>
                        {t.status}
                      </span>
                    </td>
                    <td className="p-2 font-semibold border-b border-b-gray-200">{`${formatCurrency(t.amount, currentCurrency)}`}</td>
                  </tr>
                ))}
              {!payoutLoading && payoutData?.data?.length === 0 && (
                <tr>
                  <td colSpan={8} className="text-center p-6">
                    No Payout History
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
        <div className="mt-12">
          <Pagination
            totalLength={payoutData.pagination.totalLength}
            limit={payoutData.pagination.itemsPerPage}
            pageCount={payoutData.pagination.pageCount}
            page={payoutData.pagination.currentPage}
            pageClick={(p) => setCurrentPage(p)}
          />
        </div>
      </div>
      {showWithdrawModal && (
        <div
          className="fixed inset-0 z-50 flex items-center justify-center bg-[#0008]"
          onClick={() => setShowWithdrawModal(false)}
        >
          <div
            className="bg-white p-6 rounded-lg w-full max-w-xl space-y-4"
            onClick={(e) => {
              e.stopPropagation();
            }}
          >
            <div className="flex justify-between items-center border-b border-gray-200 pb-4">
              <h2 className="text-lg font-semibold">Withdraw your amount</h2>
              <span
                className="flex items-center justify-center w-6 h-6 rounded-full text-2xl hover:bg-gray-100 transition-colors duration-200 ease-in-out cursor-pointer"
                onClick={() => setShowWithdrawModal(false)}
              >
                &times;
              </span>
            </div>
            <div className="flex justify-between items-center border-b-4 border-blue-500 py-1">
              <div className="flex items-center text-sm gap-2">
                <Image src={balanceIcon} alt="Balance" className="w-5 h-5" />
                <span>Available Balance</span>
              </div>
              <div className="flex items-center font-semibold text-sm">
                {formatCurrency(currentBalance.available || 0, currentCurrency)}
              </div>
            </div>
            <div className="max-w-xl w-full space-y-6">
              <div>
                <label className="block text-sm mb-1">Withdraw Method</label>
                <div className="w-full">
                  <select 
                    value={withdrawMethod} 
                    onChange={(e) => setWithdrawMethod(e.target.value)}
                    className="w-full border border-gray-200 rounded-md px-4 py-2 text-sm text-gray-500 bg-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Please select your withdraw method</option>
                    {withdrawMethods.map((method, index) => (
                      <option key={index} value={method.type}>
                        {method.name}
                      </option>
                    ))}
                  </select>
                </div>
              </div>
              <div>
                <label className="block text-sm mb-1">Amount</label>
                <input
                  type="text"
                  placeholder="Enter Amount"
                  className="w-full border border-gray-200 rounded-md px-4 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                  value={withdrawAmount}
                  onChange={(e) => setWithdrawAmount(e.target.value)}
                />
              </div>
              <div className="flex items-center text-gray-500 text-sm">
                After confirm, you concern you are requesting to deposit that amount to this bank account/wallet
              </div>
              <div className="grid grid-cols-2 gap-4 pt-6">
                <button className="bg-blue-50 text-blue-500 font-semibold py-2 rounded-md hover:bg-blue-100  transition cursor-pointer">
                  Cancel
                </button>
                <button
                  className="hover:bg-blue-600 text-white font-semibold py-2 rounded-md bg-blue-500 transition cursor-pointer"
                  onClick={() => {
                    // needs to be changed in integration with backend
                    setShowWithdrawModal(false);
                    setShowOTPModal(true);
                  }}
                >
                  Confirm
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
      {showOTPModal && (
        <div
          className="fixed inset-0 z-50 flex items-center justify-center bg-[#0008]"
          onKeyDown={async (e) => {
            if (showOTPModal) {
              if ((e.ctrlKey || e.metaKey) && e.key === 'v') {
                const text = await navigator.clipboard.readText();
                setOTP(text);
              }
            }
          }}
        >
          <div className="bg-white p-6 rounded-lg w-full max-w-md space-y-4">
            <div className="flex text-center items-center pb-4 font-semibold text-xl">
              Sent a verification code on your registered email
            </div>
            <div className="flex items-center justify-center text-center text-gray-500 text-sm">
              Please enter your 6-digit authentication code from email
            </div>
            <div className="max-w-xl w-full space-y-4">
              <div className="flex items-center justify-center text-center font-semibold text-gray-900 text-xl">
                OTP
              </div>
              <div className="flex gap-2 justify-center items-center">
                {Array.from({ length: 6 }, (_, i) => i).map((_, i) => (
                  <input
                    readOnly
                    type="text"
                    key={i}
                    className="border border-gray-400 rounded-md p-2 w-12 h-12 text-xl font-semibold focus:outline-none focus:ring-2 focus:ring-blue-500 text-center"
                    value={otp[i] ?? ''}
                  />
                ))}
              </div>
              <div className="flex items-center justify-center text-center text-green-400 text-xs">
                You can copy OTP code from your email to any inputs in the above.
              </div>
              <div className="grid grid-cols-2 gap-4 pt-6">
                <button className="bg-blue-50 text-blue-500 font-semibold py-2 rounded-md hover:bg-blue-100  transition cursor-pointer">
                  Back
                </button>
                <button
                  className="hover:bg-blue-600 text-white font-semibold py-2 rounded-md bg-blue-500 transition cursor-pointer"
                  onClick={() => {
                    // needs to be changed in integration with backend
                    setShowSuccessModal(true);
                    setShowOTPModal(false);
                  }}
                >
                  Continue
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
      {showSuccessModal && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-[#0008]">
          <div className="bg-white p-6 rounded-lg w-full max-w-md space-y-4">
            <div className="flex text-center justify-center items-center pt-4 font-semibold text-xl">
              <span className="text-green-600">✓</span>
            </div>
            <div className="flex text-center items-center pb-4 font-semibold text-xl">
              You have successfully withdrawn your balance
            </div>
            <div className="flex items-center justify-center text-center text-gray-500 text-sm">
              We have accepted your request. Our team will analyze it and you will receive your money in your bank
              account within one business day.
            </div>
            <div className="max-w-xl w-full space-y-4">
              <div className="grid grid-cols-1 gap-4 pt-6">
                <button
                  className="hover:bg-blue-600 text-white font-semibold py-2 rounded-md bg-blue-500 transition cursor-pointer"
                  onClick={() => setShowSuccessModal(false)}
                >
                  Done
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </DashLayout>
  );
};

export default FinancePage;

app/merchant/finance/payouts/page.tsx
'use client';

import { Suspense, useEffect, useState } from 'react';
import { DashLayout } from '@/components/layouts';
import { payoutDetailUrl } from '@/consts/paths';
import Toaster from '@/helpers/Toaster';
import { useApiRequest } from '@/hooks';
import { payoutDetailMock } from '@/mock';
import { PayoutDetail } from '@/types';
import Image from 'next/image';
import Link from 'next/link';
import { useSearchParams } from 'next/navigation';
import { SpinnerCircular } from 'spinners-react';

import backIcon from '@/assets/images/icons/back.svg';
import pendingImg from '@/assets/images/pending-state.png';
import approvedImg from '@/assets/images/approved-state.png';
import failedImg from '@/assets/images/failed-state.png';
import successImg from '@/assets/images/success-state.png';

const formatter = new Intl.NumberFormat('en-US', {
  style: 'decimal',
  minimumFractionDigits: 2,
  maximumFractionDigits: 2,
});

const PayoutPage = () => {
  const searchParams = useSearchParams();
  const id = searchParams.get('id');

  const [detail, setDetail] = useState<PayoutDetail | undefined>();

  const {
    response: payoutResponse,
    error: payoutError,
    loading: payoutLoading,
    sendRequest: sendPayoutRequest,
  } = useApiRequest({
    endpoint: `${payoutDetailUrl}/${id}`,
    headers: {
      Accept: 'application/json',
      Authorization: `Bearer 124567890`, // this needs to be changed with the local storage key
    },
    method: 'GET',
  });

  useEffect(() => {
    if (searchParams) sendPayoutRequest();
  }, [searchParams]);

  useEffect(() => {
    if (payoutResponse) {
      // Handle the response data here
      setDetail(payoutResponse.data); // this should be changed according to the response structure, this is the real code
    }
  }, [payoutResponse]);

  useEffect(() => {
    if (payoutError) {
      Toaster.error(payoutError?.message);

      // mock data instead: remove this code in production mode
      setDetail(payoutDetailMock);
    }
  }, [payoutError]);

  return (
    <DashLayout
      titleArea={
        <>
          <h2 className="text-xl font-semibold">Payout Details</h2>
        </>
      }
    >
      {payoutLoading && (
        <div className="flex items-center justify-center flex-col p-6 bg-white rounded-lg space-y-6 h-[240px]">
          <SpinnerCircular color="#006aff" secondaryColor="#66AAFF" />
          <div className="text-gray-600">Loading...</div>
        </div>
      )}
      {!payoutLoading && (
        <div className="grid grid-cols-1 lg:grid-cols-12 gap-5">
          <div className="lg:col-span-7 space-y-5">
            <div className="p-6 bg-white rounded-lg space-y-1">
              <div className="flex items-center justify-between pb-2">
                <Link href="/merchant/finance" className="text-sm text-gray-800 cursor-pointer flex items-center gap-1">
                  <Image src={backIcon} alt="Back" className="w-4 h-4" />
                  Back
                </Link>
              </div>
              <div className="text-sm text-gray-800">Payout Details</div>
              <div className="flex my-4 mx-2 gap-4">
                <Image
                  src={
                    detail?.status === 'Approved'
                      ? approvedImg
                      : detail?.status === 'Pending'
                      ? pendingImg
                      : detail?.status === 'Failed'
                      ? failedImg
                      : approvedImg
                  }
                  alt="Status"
                  className="w-16 h-16"
                />
                <div className="flex flex-col justify-between">
                  <p className="text-lg font-semibold">{`$${formatter.format(
                    (detail?.amount.total ?? 0) - (detail?.amount.tax ?? 0) - (detail?.amount.fee ?? 0)
                  )}`}</p>
                  <p className="text-sm text-gray-500">
                    Created on{' '}
                    {detail?.createdAt?.toLocaleString('en-US', {
                      month: 'short',
                      day: 'numeric',
                      year: 'numeric',
                      hour: 'numeric',
                      minute: '2-digit',
                      hour12: true,
                    })}
                  </p>
                </div>
              </div>
            </div>
            <div className="px-6 py-4 bg-white rounded-lg flex flex-col">
              <div className="flex justify-between py-2">
                <div className="text-gray-700">Total Payout</div>
                <div className="font-bold">{`$${formatter.format(detail?.amount.total ?? 0)}`}</div>
              </div>
              <div className="flex justify-between py-2">
                <div className="text-gray-700">Tax</div>
                <div className="font-bold">{`$${formatter.format(detail?.amount.tax ?? 0)}`}</div>
              </div>
              <div className="flex justify-between py-2">
                <div className="text-gray-700">Fee</div>
                <div className="font-bold">{`$${formatter.format(detail?.amount.fee ?? 0)}`}</div>
              </div>
              <div className="flex justify-between py-2 border-t border-gray-200">
                <div className="text-gray-700">You Received</div>
                <div className="font-bold">{`$${formatter.format(
                  (detail?.amount.total ?? 0) - (detail?.amount.tax ?? 0) - (detail?.amount.fee ?? 0)
                )}`}</div>
              </div>
            </div>
          </div>
          <div className="lg:col-span-5">
            <div className="p-6 bg-white rounded-lg flex flex-col">
              <div className="font-semibold text-base">Timeline</div>
              <div className="mt-4 ">
                <div className="flex items-start relative pb-8">
                  <div className="flex flex-col items-center mr-4">
                    <div className="text-green-500">
                      <Image
                        src={detail?.createdAt ? successImg : failedImg}
                        alt="state"
                        width={70}
                        height={70}
                        className="w-6 h-6 rounded-full"
                      />
                    </div>
                    {detail?.createdAt && (
                      <div className="h-full border-l-2 border-[#CBFCCB] absolute left-3 top-6 bottom-0"></div>
                    )}
                  </div>
                  <div className="pl-2 space-y-1">
                    <h4 className="font-semibold text-gray-900">Payout Created At</h4>
                    <div className="text-sm text-gray-600">
                      {detail?.createdAt?.toLocaleString('en-US', {
                        month: 'short',
                        day: 'numeric',
                        year: 'numeric',
                        hour: 'numeric',
                        minute: '2-digit',
                        hour12: true,
                      })}
                    </div>
                  </div>
                </div>
                <div className="flex items-start relative pb-8">
                  <div className="flex flex-col items-center mr-4">
                    <div className="text-green-500">
                      <Image
                        src={detail?.processedAt ? successImg : failedImg}
                        alt="state"
                        width={70}
                        height={70}
                        className="rounded-full"
                      />
                    </div>
                    {detail?.processedAt && (
                      <div className="h-full border-l-2 border-[#CBFCCB] absolute left-3 top-6 bottom-0"></div>
                    )}
                  </div>
                  <div className="pl-2 space-y-1">
                    <h4 className="font-semibold text-gray-900">Payout Processed At</h4>
                    <div className="text-sm text-gray-600">
                      <div>{`Processed on ${detail?.processedAt?.toLocaleString('en-US', {
                        month: 'short',
                        day: 'numeric',
                        year: 'numeric',
                        hour: 'numeric',
                        minute: '2-digit',
                        hour12: true,
                      })}`}</div>
                      <div>
                        {`We have successfully processed the payout request. It may take 2-3 hours for funds reflect in
                        your bank account. If the money has sitll not been deposited after this time, please contact
                        your bank using the Payout Number (`}
                        <span className="font-semibold text-black">{detail?.txid}</span>
                        {')'}
                      </div>
                    </div>
                  </div>
                </div>
                <div className="flex items-start relative pb-8">
                  <div className="flex flex-col items-center mr-4">
                    <div className="text-green-500">
                      <Image
                        src={
                          detail?.status === 'Approved'
                            ? successImg
                            : detail?.status === 'Pending'
                            ? pendingImg
                            : failedImg
                        }
                        alt="state"
                        className="w-6 h-6 rounded-full"
                      />
                    </div>
                  </div>
                  <div className="pl-2 space-y-1">
                    <h4 className="font-semibold text-gray-900">Money Deposited At</h4>
                    <div className="text-sm text-gray-600">
                      <div>
                        Net Amount:{' '}
                        <span className="text-black font-semibold">{`$${formatter.format(
                          (detail?.amount.total ?? 0) - (detail?.amount.tax ?? 0) - (detail?.amount.fee ?? 0)
                        )}`}</span>
                      </div>
                      <div>
                        Payout Number: <span className="text-black font-semibold">{`${detail?.txid}`}</span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </DashLayout>
  );
};

export default function PayoutDetailPage() {
  return (
    <Suspense>
      <PayoutPage />
    </Suspense>
  );
}


app/merchant/integrations/apikeyit/page.tsx
'use client';

import { useEffect, useState } from 'react';
import { Switch } from '@headlessui/react';
import { InfoIcon } from 'lucide-react';
import Image from 'next/image';
import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { DashLayout } from '@/components/layouts';

import fileCopyIcon from '@/assets/images/icons/file-copy-2-fill.svg';
import eyeFillIcon from '@/assets/images/icons/eye-fill.svg';
import arrowRightIcon from '@/assets/images/icons/arrow-right-line.svg';
import backIcon from '@/assets/images/icons/back.svg';

const ApiKeyIntegrationPage = () => {
  const pathname = usePathname();

  const [viewingTestData, setViewingTestData] = useState(true);
  const [title, setTitle] = useState<string | null>(null);

  useEffect(() => {
    const params = new URLSearchParams(window.location.search);
    setTitle(params.get('title'));
  }, [pathname]);

  return (
    <DashLayout
      titleArea={
        <>
          <h2 className="text-xl font-semibold">System Integrations</h2>
        </>
      }
    >
      <div className="p-6 bg-white rounded-lg space-y-6">
        <div className="flex items-center justify-between border-b border-gray-200 pb-3">
          <Link href="/merchant/integrations" className="text-sm text-gray-800 cursor-pointer flex items-center gap-1">
            <Image src={backIcon} alt="Back" className="w-4 h-4" />
            Back
          </Link>
        </div>
        <div className="grid lg:grid-cols-2">
          <div className="text-base font-semibold">{title ?? ''} API Integration Keys</div>
          <Link
            href="/merchant/help"
            className="flex items-center gap-1 text-sm text-blue-500 font-medium cursor-pointer lg:justify-end"
          >
            Learn more about API authentication <Image src={arrowRightIcon} alt="to" className="w-4 h-4" />
          </Link>
        </div>

        <div className="grid lg:grid-cols-2 items-center justify-between bg-gray-100 p-4 rounded-lg gap-2">
          <div className="flex items-center gap-2 text-sm text-gray-700 px-2">
            <InfoIcon fill="#777" stroke="white" className="w-5 h-5 rounded-full border-0" />
            Viewing test API Keys. Toggle to view live Keys
          </div>
          <div className="flex items-center gap-2 text-sm text-gray-700 lg:justify-end">
            <Switch
              checked={!viewingTestData}
              onChange={() => setViewingTestData(!viewingTestData)}
              className={`${
                viewingTestData ? 'bg-gray-200' : 'bg-blue-500'
              } relative inline-flex h-5 w-10 items-center rounded-full transition cursor-pointer`}
            >
              <span
                className={`${
                  viewingTestData ? 'translate-x-1' : 'translate-x-5'
                } inline-block h-4 w-4 transform bg-white rounded-full transition`}
              />
            </Switch>
            Viewing test data
          </div>
        </div>

        <div>
          <h2 className="text-base font-semibold text-gray-800 mb-1">Standard Key</h2>
          <p className="text-sm text-gray-600">
            These keys will allow you to authenticate API request.{' '}
            <Link href="/merchant/help" className="text-blue-500 cursor-pointer">
              Learn more
            </Link>
          </p>
        </div>

        <div className="overflow-x-auto">
          <table className="min-w-full text-sm text-left">
            <thead>
              <tr className="text-gray-800 font-medium border-b border-gray-200">
                <th className="py-1">Name</th>
                <th className="py-1">Token</th>
                <th className="py-1">Last Used</th>
                <th className="py-1">Created</th>
                <th className="py-1">Actions</th>
              </tr>
            </thead>
            <tbody className="text-gray-700">
              {[
                { name: 'Publishable Key', token: 'pk_test_1234567890abcdefghijklmnopqrstuvwxyz', date: 'Feb 6, 2025' },
                { name: 'Secret Key', token: 'sk_test_1234567890abcdefghijklmnopqrstuvwxyz', date: 'Feb 6, 2025' },
              ].map((key, i) => (
                <tr key={key.name} className="">
                  <td className="pt-4 font-bold pr-2 min-w-30">{key.name}</td>
                  <td className="pt-4 truncate pr-2 max-w-xs">{key.token}</td>
                  <td className="pt-4 min-w-30 pr-2 ">{key.date}</td>
                  <td className="pt-4 min-w-30 pr-2">Jan 6, 2025</td>
                  <td className="pt-4 flex gap-2">
                    <button title="Copy" className="p-1 hover:bg-gray-100 rounded-full cursor-pointer">
                      <Image alt="Copy" src={fileCopyIcon} className="w-4 h-4" />
                    </button>
                    <button title="Show" className="p-1 hover:bg-gray-100 rounded-full cursor-pointer">
                      <Image alt="Show" src={eyeFillIcon} className="w-4 h-4" />
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        <div className="flex gap-2 pt-4">
          <button className="hover:bg-blue-600 bg-blue-500 text-white px-4 py-2 rounded-lg text-sm font-semibold transition cursor-pointer">
            Reset Publishable Key
          </button>
          <button className="bg-gray-200 hover:bg-gray-300 text-gray-800 px-4 py-2 rounded-lg text-sm font-semibold transition cursor-pointer">
            Reset Secret Key
          </button>
        </div>
      </div>
    </DashLayout>
  );
};

export default ApiKeyIntegrationPage;


app/merchant/integrations/page.tsx
'use client';

import { DashLayout } from '@/components/layouts';
import { integrations } from '@/mock';
import Image from 'next/image';
import { useRouter } from 'next/navigation';

const IntegrationPage = () => {
  const router = useRouter();

  return (
    <DashLayout
      titleArea={
        <>
          <h2 className="text-xl font-semibold truncate">Integrations</h2>
        </>
      }
    >
      <div className="p-6 bg-white rounded-lg space-y-10">
        {integrations.map((group) => (
          <div key={group.section}>
            <h2 className="text-lg font-semibold text-gray-800 mb-4">{group.section}</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-5 gap-4">
              {group.items.map((item) => (
                <div
                  key={item.name}
                  className="flex flex-col p-4 border border-gray-100 rounded-lg transition cursor-pointer hover:bg-blue-50"
                  onClick={() => {
                    if (group.section === 'Store Platforms')
                      router.push(`/merchant/integrations/apikeyit?title=${item.name}`);
                    else if (item.name === 'API Integration')
                      router.push(`/merchant/integrations/apikeyit?title=Custom`);
                    else if (group.section === 'Tracking Pixels')
                      router.push(`/merchant/integrations/pixelit?title=${item.name}`);
                    else if (item.name === 'Webhook') router.push(`/merchant/integrations/webhookit`);
                  }}
                >
                  <Image src={item.icon} alt={item.name} width={48} height={48} className="mb-3" />
                  <div className="flex flex-col justify-between flex-1">
                    <div>
                      <h3 className="font-bold text-sm text-gray-800">{item.name}</h3>
                      <p className="text-xs text-gray-500 mb-3 mt-1">{item.description}</p>
                    </div>
                    <button className="text-blue-500 text-sm font-semibold flex items-center gap-1 cursor-pointer">
                      Connect Now <span>→</span>
                    </button>
                  </div>
                </div>
              ))}
            </div>
          </div>
        ))}
      </div>
    </DashLayout>
  );
};

export default IntegrationPage;


app/merchant/integrations/pixelit/page.tsx
'use client';

import { useEffect, useState } from 'react';
import Image from 'next/image';
import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { DashLayout } from '@/components/layouts';

import backIcon from '@/assets/images/icons/back.svg';

const PixelIntegrationPage = () => {
  const pathname = usePathname();
  const [title, setTitle] = useState<string | null>(null);

  const [name, setName] = useState('');
  const [pixelID, setPixelID] = useState('');
  const [conversionApi, setConversionApi] = useState('');

  useEffect(() => {
    const params = new URLSearchParams(window.location.search);
    setTitle(params.get('title'));
  }, [pathname]);

  return (
    <DashLayout
      titleArea={
        <>
          <h2 className="text-xl font-semibold">System Integrations</h2>
        </>
      }
    >
      <div className="p-6 bg-white rounded-lg space-y-6">
        <div className="flex items-center justify-between border-b border-gray-200 pb-3">
          <Link href="/merchant/integrations" className="text-sm text-gray-800 cursor-pointer flex items-center gap-1">
            <Image src={backIcon} alt="Back" className="w-4 h-4" />
            Back
          </Link>
        </div>
        <div className="flex items-center justify-between">
          <div className="text-base font-semibold">{title ?? ''} API Integration Keys</div>
        </div>

        <div className="max-w-xl w-full space-y-6">
          <div>
            <label className="block text-sm font-medium mb-1">Name</label>
            <input
              type="text"
              placeholder="Enter name"
              value={name}
              className="w-full border border-gray-200 rounded-md px-4 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
              onChange={(e) => setName(e.target.value)}
            />
          </div>

          <div>
            <label className="block text-sm font-medium mb-1">Pixel ID</label>
            <input
              type="text"
              placeholder="Enter pixel ID"
              className="w-full border border-gray-200 rounded-md px-4 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
              value={pixelID}
              onChange={(e) => setPixelID(e.target.value)}
            />
          </div>

          <div>
            <label className="block text-sm font-medium mb-1">Conversions API</label>
            <input
              type="text"
              placeholder="Enter conversion API"
              className="w-full border border-gray-200 rounded-md px-4 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
              value={conversionApi}
              onChange={(e) => setConversionApi(e.target.value)}
            />
          </div>

          <div className="flex gap-4 pt-2">
            <button className="bg-blue-50 text-blue-500 font-semibold px-12 py-2 rounded-md hover:bg-blue-100  transition cursor-pointer">
              Cancel
            </button>
            <button className="hover:bg-blue-600 text-white font-semibold px-12 py-2 rounded-md bg-blue-500 transition cursor-pointer">
              Create
            </button>
          </div>
        </div>
      </div>
    </DashLayout>
  );
};

export default PixelIntegrationPage;


app/merchant/integrations/webhookit/page.tsx
'use client';

import { useEffect, useState } from 'react';
import Image from 'next/image';
import Link from 'next/link';
import { DashLayout } from '@/components/layouts';
import {
  Listbox,
  ListboxButton,
  ListboxOption,
  ListboxOptions,
  Menu,
  MenuButton,
  MenuItem,
  MenuItems,
} from '@headlessui/react';
import { ChevronDownIcon } from '@heroicons/react/20/solid';
import { Webhook } from '@/types';
import { useApiRequest } from '@/hooks';
import { webhooksUrl } from '@/consts/paths';
import Toaster from '@/helpers/Toaster';
import { webhookMockData } from '@/mock/hook';
import { MoreHorizontal, PlusIcon } from 'lucide-react';

import fileCopyIcon from '@/assets/images/icons/file-copy-2-fill.svg';
import backIcon from '@/assets/images/icons/back.svg';

const WebhookIntegrationPage = () => {
  const [hookData, setHookData] = useState<Webhook[]>([] as Webhook[]);
  const [showModal, setShowModal] = useState(false);
  const [event, setEvent] = useState('');
  const [type, setType] = useState('');
  const [newUrl, setNewUrl] = useState('');

  const handleCopy = (str: string) => {
    navigator.clipboard
      .writeText(str)
      .then(() => {
        Toaster.success('Copied to clipboard');
      })
      .catch((err) => {
        Toaster.error('Failed to copy');
      });
  };

  const {
    response: webhookResponse,
    error: webhookError,
    loading: webhookLoading,
    sendRequest: sendWebhookRequest,
  } = useApiRequest({
    endpoint: webhooksUrl,
    headers: {
      Accept: 'application/json',
      Authorization: `Bearer 124567890`, // this needs to be changed with the local storage key
    },
    method: 'GET',
  });

  useEffect(() => {
    if (webhookResponse) {
      // Handle the response data here
      setHookData(webhookResponse.data); // this should be changed according to the response structure, this is the real code
    }
  }, [webhookResponse]);

  useEffect(() => {
    if (webhookError) {
      Toaster.error(webhookError?.message);

      // mock data instead: remove this code in production mode
      setHookData(webhookMockData);
    }
  }, [webhookError]);

  useEffect(() => {
    sendWebhookRequest();
  }, []);

  return (
    <DashLayout
      titleArea={
        <>
          <h2 className="text-xl font-semibold">System Integrations</h2>
        </>
      }
    >
      <div className="p-6 bg-white rounded-lg space-y-4">
        <div className="flex items-center justify-between border-b border-gray-200 pb-3">
          <Link href="/merchant/integrations" className="text-sm text-gray-800 cursor-pointer flex items-center gap-1">
            <Image src={backIcon} alt="Back" className="w-4 h-4" />
            Back
          </Link>
          <button
            className="flex items-center gap-2 hover:bg-blue-600 text-white text-sm px-4 py-2 rounded-md bg-blue-500 transition cursor-pointer"
            onClick={() => setShowModal(true)}
          >
            <PlusIcon className="w-4 h-4" />
            Add New Webhook
          </button>
        </div>
        <div className="flex items-center justify-between">
          <div className="text-base font-semibold">Webhooks</div>
        </div>
        <div className="h-12 bg-gray-100 -mx-6" style={{ width: 'calc(100% + var(--spacing) * 12)' }} />
        <div className="max-w-full overflow-auto -mt-16">
          <table className="table-auto w-full mb-16">
            <thead className="bg-gray-100 text-xs font-semibold text-gray-700 mb-2">
              <tr className="h-12">
                <th className="p-2 text-left">Created On</th>
                <th className="p-2 text-left">Type</th>
                <th className="p-2 text-left">URL</th>
                <th className="p-2 text-left">Status</th>
                <th className="p-2 text-left"></th>
              </tr>
            </thead>
            <tbody className="text-sm">
              {webhookLoading && (
                <tr>
                  <td colSpan={8} className="text-center p-6">
                    Loading Webhooks...
                  </td>
                </tr>
              )}
              {!webhookLoading &&
                hookData?.length > 0 &&
                hookData?.map((t, i) => (
                  <tr key={i} className="h-10">
                    <td className="p-2 whitespace-nowrap border-b border-b-gray-200">
                      {t.createdAt.toLocaleString('en-US', {
                        month: 'short',
                        day: 'numeric',
                        year: 'numeric',
                        hour: 'numeric',
                        minute: '2-digit',
                        hour12: true,
                      })}
                    </td>
                    <td className="p-2 whitespace-nowrap border-b border-b-gray-200">{t.type}</td>
                    <td className="p-2 whitespace-nowrap border-b border-b-gray-200">
                      <div className="flex items-center gap-2">
                        <span>{t.url}</span>
                        <button
                          title="Copy"
                          className="p-1 hover:bg-gray-100 rounded-full cursor-pointer"
                          onClick={() => handleCopy(t.url)}
                        >
                          <Image alt="Copy" src={fileCopyIcon} className="w-4 h-4" />
                        </button>
                      </div>
                    </td>
                    <td className="p-2 border-b border-b-gray-200">
                      <span
                        className={`px-3 py-1 text-xs font-medium rounded-full text-gray-600 ${
                          t.isActive ? 'bg-[#CBFCCB]' : 'bg-gray-200'
                        }`}
                      >
                        {t.isActive ? 'Active' : 'Inactive'}
                      </span>
                    </td>
                    <td className="p-2 text-gray-500 border-b border-b-gray-200">
                      <Menu as="div" className="relative inline-block text-left">
                        <div>
                          <MenuButton className="flex items-center justify-center w-8 h-8 rounded-full hover:bg-gray-100 transition-colors duration-200 ease-in-out cursor-pointer">
                            <MoreHorizontal className="h-4 w-4" />
                          </MenuButton>
                        </div>
                        <MenuItems className="absolute right-0 z-10 mt-2 w-40 origin-top-right rounded-md bg-white ring-1 ring-gray-300 focus:outline-none cursor-pointer">
                          <div className="py-1">
                            <MenuItem>
                              <button
                                className="hover:bg-gray-100 hover:text-black text-gray-700 w-full px-4 py-2 text-left text-sm cursor-pointer"
                                onClick={() => {}}
                              >
                                Activate
                              </button>
                            </MenuItem>
                            <MenuItem>
                              <button
                                className="hover:bg-gray-100 hover:text-black text-gray-700 w-full px-4 py-2 text-left text-sm cursor-pointer"
                                onClick={() => {}}
                              >
                                Deactivate
                              </button>
                            </MenuItem>
                            <MenuItem>
                              <button
                                className="hover:bg-gray-100 hover:text-black text-gray-700 w-full px-4 py-2 text-left text-sm cursor-pointer"
                                onClick={() => {}}
                              >
                                Edit
                              </button>
                            </MenuItem>
                            <MenuItem>
                              <button
                                className="hover:bg-gray-100 hover:text-red-600 text-red-500 w-full px-4 py-2 text-left text-sm cursor-pointer"
                                onClick={() => {}}
                              >
                                Delete
                              </button>
                            </MenuItem>
                          </div>
                        </MenuItems>
                      </Menu>
                    </td>
                  </tr>
                ))}
              {!webhookLoading && hookData?.length === 0 && (
                <tr>
                  <td colSpan={8} className="text-center p-6">
                    No Webhooks
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      </div>
      {showModal && (
        <div
          className="fixed inset-0 z-50 flex items-center justify-center bg-[#0008]"
          onClick={() => setShowModal(false)}
        >
          <div
            className="bg-white p-6 rounded-lg w-full max-w-lg shadow-lg space-y-4"
            onClick={(e) => {
              e.stopPropagation();
            }}
          >
            <div className="flex justify-between items-center border-b border-gray-200 pb-4">
              <h2 className="text-lg font-semibold">Webhook Setup</h2>
              <span
                className="flex items-center justify-center w-6 h-6 rounded-full text-2xl hover:bg-gray-100 transition-colors duration-200 ease-in-out cursor-pointer"
                onClick={() => setShowModal(false)}
              >
                &times;
              </span>
            </div>
            <div className="max-w-xl w-full space-y-6">
              <div>
                <label className="block text-sm font-medium mb-1">Type</label>
                <div className="w-full">
                  <Listbox value={type} onChange={setType}>
                    <div className="relative">
                      <ListboxButton className="w-full border border-gray-200 rounded-md px-4 py-2 text-sm text-gray-500 bg-white flex justify-between items-center focus:outline-none focus:ring-2 focus:ring-blue-500">
                        {type || 'Please select'}
                        <ChevronDownIcon className="w-4 h-4 text-gray-400" />
                      </ListboxButton>
                      <ListboxOptions className="absolute mt-1 max-h-60 w-full overflow-auto rounded-md bg-white py-1 text-sm shadow-lg ring-1 ring-gray-300 focus:outline-none z-10">
                        <ListboxOption
                          value="success"
                          className={({ active }) =>
                            `cursor-pointer select-none px-4 py-2 ${
                              active ? 'bg-blue-100 text-blue-900' : 'text-gray-900'
                            }`
                          }
                        >
                          success
                        </ListboxOption>
                        <ListboxOption
                          value="failed"
                          className={({ active }) =>
                            `cursor-pointer select-none px-4 py-2 ${
                              active ? 'bg-blue-100 text-blue-900' : 'text-gray-900'
                            }`
                          }
                        >
                          failed
                        </ListboxOption>
                        <ListboxOption
                          value="pending"
                          className={({ active }) =>
                            `cursor-pointer select-none px-4 py-2 ${
                              active ? 'bg-blue-100 text-blue-900' : 'text-gray-900'
                            }`
                          }
                        >
                          pending
                        </ListboxOption>
                        <ListboxOption
                          value="refund"
                          className={({ active }) =>
                            `cursor-pointer select-none px-4 py-2 ${
                              active ? 'bg-blue-100 text-blue-900' : 'text-gray-900'
                            }`
                          }
                        >
                          refund
                        </ListboxOption>
                        <ListboxOption
                          value="chargeback"
                          className={({ active }) =>
                            `cursor-pointer select-none px-4 py-2 ${
                              active ? 'bg-blue-100 text-blue-900' : 'text-gray-900'
                            }`
                          }
                        >
                          chargeback
                        </ListboxOption>
                        <ListboxOption
                          value="dispute"
                          className={({ active }) =>
                            `cursor-pointer select-none px-4 py-2 ${
                              active ? 'bg-blue-100 text-blue-900' : 'text-gray-900'
                            }`
                          }
                        >
                          dispute
                        </ListboxOption>
                      </ListboxOptions>
                    </div>
                  </Listbox>
                </div>
              </div>
              <div>
                <label className="block text-sm font-medium mb-1">Event</label>
                <div className="w-full">
                  <Listbox value={event} onChange={setEvent}>
                    <div className="relative">
                      <ListboxButton className="w-full border border-gray-200 rounded-md px-4 py-2 text-sm text-gray-500 bg-white flex justify-between items-center focus:outline-none focus:ring-2 focus:ring-blue-500">
                        {event || 'Please select'}
                        <ChevronDownIcon className="w-4 h-4 text-gray-400" />
                      </ListboxButton>
                      <ListboxOptions className="absolute mt-1 max-h-60 w-full overflow-auto rounded-md bg-white py-1 text-sm shadow-lg ring-1 ring-gray-300 focus:outline-none z-10">
                        <ListboxOption
                          value="Payment"
                          className={({ active }) =>
                            `cursor-pointer select-none px-4 py-2 ${
                              active ? 'bg-blue-100 text-blue-900' : 'text-gray-900'
                            }`
                          }
                        >
                          Payment
                        </ListboxOption>
                        <ListboxOption
                          value="Subscription"
                          className={({ active }) =>
                            `cursor-pointer select-none px-4 py-2 ${
                              active ? 'bg-blue-100 text-blue-900' : 'text-gray-900'
                            }`
                          }
                        >
                          Subscription
                        </ListboxOption>
                        <ListboxOption
                          value="Order"
                          className={({ active }) =>
                            `cursor-pointer select-none px-4 py-2 ${
                              active ? 'bg-blue-100 text-blue-900' : 'text-gray-900'
                            }`
                          }
                        >
                          Order
                        </ListboxOption>
                        <ListboxOption
                          value="Payout"
                          className={({ active }) =>
                            `cursor-pointer select-none px-4 py-2 ${
                              active ? 'bg-blue-100 text-blue-900' : 'text-gray-900'
                            }`
                          }
                        >
                          Payout & Settlement
                        </ListboxOption>
                        <ListboxOption
                          value="Customer"
                          className={({ active }) =>
                            `cursor-pointer select-none px-4 py-2 ${
                              active ? 'bg-blue-100 text-blue-900' : 'text-gray-900'
                            }`
                          }
                        >
                          Customer
                        </ListboxOption>
                        <ListboxOption
                          value="Merchant"
                          className={({ active }) =>
                            `cursor-pointer select-none px-4 py-2 ${
                              active ? 'bg-blue-100 text-blue-900' : 'text-gray-900'
                            }`
                          }
                        >
                          Merchant
                        </ListboxOption>
                      </ListboxOptions>
                    </div>
                  </Listbox>
                </div>
              </div>
              <div>
                <label className="block text-sm font-medium mb-1">Webhook URL</label>
                <input
                  type="text"
                  placeholder="HTTPS URL is recommended"
                  className="w-full border border-gray-200 rounded-md px-4 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                  value={newUrl}
                  onChange={(e) => setNewUrl(e.target.value)}
                />
              </div>

              <div className="flex gap-4 pt-6 justify-center">
                <button className="bg-blue-50 text-blue-500 font-semibold w-42 py-2 rounded-md hover:bg-blue-100  transition cursor-pointer">
                  Cancel
                </button>
                <button className="hover:bg-blue-600 text-white font-semibold w-42 py-2 rounded-md bg-blue-500 transition cursor-pointer">
                  Save Webhook
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </DashLayout>
  );
};

export default WebhookIntegrationPage;


app/merchant/page.tsx
'use client';

import React, { useState, useEffect } from 'react';
import { XAxis, YAxis, Tooltip, ResponsiveContainer, AreaChart, Area, CartesianGrid } from 'recharts';
import { DashLayout } from '@/components/layouts';
import { ListFilter } from 'lucide-react';
import { CircularProgressbar, buildStyles } from 'react-circular-progressbar';

import 'react-circular-progressbar/dist/styles.css';
import '@/assets/styles/dashboard.css';
import { Menu, MenuButton, MenuItem, MenuItems } from '@headlessui/react';
import Link from 'next/link';

const CustomTooltip: React.FC<{ payload?: Array<{ payload: { value: number | string } }>; label?: string }> = ({
  payload,
  label,
}) => {
  if (!payload || payload.length === 0) return null;

  const data = payload[0].payload;
  return (
    <div style={{ backgroundColor: 'black', color: 'white', padding: '10px', borderRadius: '5px' }}>
      <p className="text-sm">US$ {data.value}</p>
      <p className="text-xs">{label}</p>
    </div>
  );
};

const Dashboard = () => {
  const [period, setPeriod] = useState<number>(0); // 0 = today, 1 = yesterday, 7 = week, etc.
  const [userData, setUserData] = useState<any>(null);
  const [merchantData, setMerchantData] = useState<any>(null);
  const [balances, setBalances] = useState<any>(null);
  const [orderOverview, setOrderOverview] = useState<any>(null);
  const [salesData, setSalesData] = useState<any[]>([]);
  const [orderStatus, setOrderStatus] = useState<any>(null);
  const [loading, setLoading] = useState<boolean>(true);
  const [dashboardCurrency, setDashboardCurrency] = useState<string>('USD');
  const [isClient, setIsClient] = useState(false);

  const formatter = new Intl.NumberFormat('en-US', {
    style: 'decimal',
    minimumFractionDigits: 2,
    maximumFractionDigits: 2,
  });

  // Check if we're on the client side
  useEffect(() => {
    setIsClient(true);
  }, []);

  // Authentication check
  useEffect(() => {
    if (isClient) {
      if (typeof window !== 'undefined') {
        const token = localStorage.getItem('jwt_token');
        if (!token) {
          window.location.href = '/signin';
          return;
        }
        loadDashboard();
      }
    }
  }, [period, isClient]);

  const loadDashboard = async () => {
    if (typeof window === 'undefined') return;
    
    try {
      setLoading(true);
      const token = localStorage.getItem('jwt_token');
      
      if (!token) {
        window.location.href = '/signin';
        return;
      }

      // 1. Get user and merchant info using the correct endpoint
      const meResponse = await fetch('/api/auth/me', {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (meResponse.status === 401) {
        localStorage.removeItem('jwt_token');
        localStorage.removeItem('user_data');
        window.location.href = '/signin';
        return;
      }

      const meData = await meResponse.json();
      if (!meData.success) {
        throw new Error('Failed to load user data');
      }

      const { user, merchant } = meData.data;
      setUserData(user);
      setMerchantData(merchant);

      // Determine dashboard currency based on merchant country
      const isBrazil = merchant.country === 'BR';
      const dashCur = isBrazil ? 'BRL' : 'USD';
      setDashboardCurrency(dashCur);

      // 2. Get date ranges for current and previous periods
      const rangeNow = getDateRange(period);
      const rangePrev = getPreviousDateRange(period, rangeNow);

      // 3. Fetch balance and transaction data in parallel
      const [balanceResponse, txNowResponse, txPrevResponse] = await Promise.all([
        fetch('/api/finance/balance', {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        }),
        fetch(`/api/finance/transactions?fromDate=${encodeURIComponent(rangeNow.from)}&toDate=${encodeURIComponent(rangeNow.to)}`, {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        }),
        fetch(`/api/finance/transactions?fromDate=${encodeURIComponent(rangePrev.from)}&toDate=${encodeURIComponent(rangePrev.to)}`, {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        })
      ]);

      const balanceData = await balanceResponse.json();
      const txNowData = await txNowResponse.json();
      const txPrevData = await txPrevResponse.json();

      // Set balances
      if (balanceData.success) {
        setBalances(balanceData.data.balances);
      }

      // Process transaction data for metrics
      const txNow = txNowData.success ? txNowData.data.transactions : [];
      const txPrev = txPrevData.success ? txPrevData.data.transactions : [];
      
      const statsNow = calcStats(txNow, dashCur);
      const statsPrev = calcStats(txPrev, dashCur);

      setOrderOverview({
        gross: {
          amount: statsNow.gross,
          delta: percentChange(statsNow.gross, statsPrev.gross)
        },
        paidOrder: {
          amount: statsNow.paid,
          delta: percentChange(statsNow.paid, statsPrev.paid)
        },
        averageSucceedOrder: {
          amount: statsNow.acceptance,
          delta: percentChange(statsNow.acceptance, statsPrev.acceptance)
        }
      });

      // Calculate order status
      const orderStatusData = calcOrderStatus(txNow);
      setOrderStatus(orderStatusData);

      // Generate sales chart data (last 12 months)
      const chartData = await generateSalesData(token, dashCur);
      setSalesData(chartData);

    } catch (error) {
      console.error('Dashboard load error:', error);
    } finally {
      setLoading(false);
    }
  };

  const calcStats = (txs: any[], currency: string) => {
    let gross = 0, paid = 0, cardTry = 0, cardOk = 0;
    
    txs.forEach(tx => {
      if (tx.payment_method === 'card') {
        cardTry++;
        if (isSuccess(tx)) cardOk++;
      }
      if (isSuccess(tx)) {
        paid++;
        // Use the correct currency field based on dashboard currency
        gross += currency === 'USD'
          ? (tx.amount_usd ?? tx.amount ?? 0)
          : (tx.amount_brl ?? tx.amount ?? 0);
      }
    });

    return {
      gross,
      paid,
      acceptance: cardTry ? (cardOk / cardTry * 100) : 0
    };
  };

  const calcOrderStatus = (txs: any[]) => {
    let total = txs.length;
    let paid = 0, chargeback = 0, refunded = 0;

    txs.forEach(tx => {
      if (isSuccess(tx)) paid++;
      else if (tx.status === 'chargeback') chargeback++;
      else if (tx.status === 'refunded') refunded++;
    });

    return {
      paid: {
        amount: paid,
        percent: total ? Math.round((paid / total) * 100) : 0
      },
      chargeback: {
        amount: chargeback,
        percent: total ? Math.round((chargeback / total) * 100) : 0
      },
      refunded: {
        amount: refunded,
        percent: total ? Math.round((refunded / total) * 100) : 0
      }
    };
  };

  const isSuccess = (tx: any) => ['captured', 'succeeded'].includes(tx.status);

  const percentChange = (now: number, prev: number) => {
    if (prev === 0) return now === 0 ? 0 : null;
    return Math.round(((now - prev) / prev) * 100);
  };

  const generateSalesData = async (token: string, currency: string) => {
    const data = [];
    const now = new Date();
    
    for (let i = 11; i >= 0; i--) {
      const monthStart = new Date(now.getFullYear(), now.getMonth() - i, 1);
      const monthEnd = new Date(now.getFullYear(), now.getMonth() - i + 1, 0);
      
      try {
        const response = await fetch(`/api/finance/transactions?fromDate=${monthStart.toISOString()}&toDate=${monthEnd.toISOString()}`, {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        });
        
        const result = await response.json();
        if (result.success) {
          const stats = calcStats(result.data.transactions, currency);
          data.push({
            month: monthStart.toLocaleDateString('en-US', { month: 'short' }),
            value: stats.gross
          });
        } else {
          data.push({
            month: monthStart.toLocaleDateString('en-US', { month: 'short' }),
            value: 0
          });
        }
      } catch (error) {
        data.push({
          month: monthStart.toLocaleDateString('en-US', { month: 'short' }),
          value: 0
        });
      }
    }
    
    return data;
  };

  const getDateRange = (filter: number) => {
    const now = new Date();
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    const iso = (d: Date) => d.toISOString();

    switch (filter) {
      case 0: // today
        return { from: iso(today), to: iso(new Date(today.getTime() + 24 * 60 * 60 * 1000)) };
      case 1: // yesterday
        const yesterday = new Date(today.getTime() - 24 * 60 * 60 * 1000);
        return { from: iso(yesterday), to: iso(today) };
      case 7: // last 7 days
        const week = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);
        return { from: iso(week), to: iso(new Date(today.getTime() + 24 * 60 * 60 * 1000)) };
      case 30: // last 30 days
        const month = new Date(today.getTime() - 30 * 24 * 60 * 60 * 1000);
        return { from: iso(month), to: iso(new Date(today.getTime() + 24 * 60 * 60 * 1000)) };
      default:
        return { from: iso(today), to: iso(new Date(today.getTime() + 24 * 60 * 60 * 1000)) };
    }
  };

  const getPreviousDateRange = (filter: number, current: any) => {
    const currentDate = new Date(current.from);
    const daysDiff = Math.ceil((new Date(current.to).getTime() - currentDate.getTime()) / (1000 * 60 * 60 * 24));
    const prevStart = new Date(currentDate.getTime() - daysDiff * 24 * 60 * 60 * 1000);
    const prevEnd = new Date(prevStart.getTime() + daysDiff * 24 * 60 * 60 * 1000);
    
    return {
      from: prevStart.toISOString(),
      to: prevEnd.toISOString()
    };
  };

  const periods = [
    { value: 0, label: 'Today' },
    { value: 1, label: 'Yesterday' },
    { value: 7, label: 'Last 7 days' },
    { value: 30, label: 'Last 30 days' }
  ];

  const formatCurrency = (amount: number | null, currency: string = dashboardCurrency) => {
    if (amount === null) return 'N/A';
    const locales = currency === 'BRL' ? 'pt-BR' : 'en-US';
    return new Intl.NumberFormat(locales, {
      style: 'currency',
      currency: currency
    }).format(amount);
  };

  const formatPercentage = (value: number | null) => {
    if (value === null) return 'N/A';
    const arrow = value >= 0 ? '▲' : '▼';
    return `${arrow} ${Math.abs(value)}%`;
  };

  // Don't render anything until we're on the client side
  if (!isClient) {
    return null;
  }

  if (loading) {
    return (
      <DashLayout titleArea={<h2 className="text-xl font-semibold">Loading...</h2>}>
        <div className="flex items-center justify-center h-64">
          <div className="text-gray-500">Loading dashboard...</div>
        </div>
      </DashLayout>
    );
  }

  return (
    <DashLayout
      titleArea={
        <>
          <h2 className="text-xl font-semibold">
            Hello, {merchantData?.businessName || 'Business'}
          </h2>
          <p className="text-sm text-gray-500">
            {new Intl.DateTimeFormat('en-US', {
              weekday: 'long',
              year: 'numeric',
              month: 'long',
              day: '2-digit',
            }).format(new Date())}
          </p>
        </>
      }
      tools={
        <Menu as="div" className="relative inline-block text-left">
          <div>
            <MenuButton className="inline-flex items-center gap-2 border border-gray-400 px-3 py-1 rounded-full text-sm font-medium text-gray-700 hover:bg-gray-100 cursor-pointer">
              <ListFilter className="w-4 h-4 text-indigo-900" />
              {periods.find(p => p.value === period)?.label || 'Today'}
            </MenuButton>
          </div>
          <MenuItems className="absolute right-0 z-10 mt-2 w-40 origin-top-right rounded-md bg-white ring-1 ring-gray-300 focus:outline-none cursor-pointer">
            <div className="py-1">
              {periods.map((p) => (
                <MenuItem key={p.value}>
                  <button
                    className="hover:bg-gray-100 hover:text-black text-gray-700 w-full px-4 py-2 text-left text-sm cursor-pointer"
                    onClick={() => setPeriod(p.value)}
                  >
                    {p.label}
                  </button>
                </MenuItem>
              ))}
            </div>
          </MenuItems>
        </Menu>
      }
    >
      <div className="grid grid-cols-3 gap-6">
        <div className="col-span-3 lg:col-span-2 space-y-4">
          <div className="grid grid-cols-1 lg:grid-cols-3 bg-white px-4 py-2 rounded-2xl">
            <div className="mt-4 mb-4 pl-4 pr-2 border-r-none lg:border-r border-gray-200">
              <p className="text-[#777B84] font-semibold text-sm mb-2 truncate overflow-hidden whitespace-nowrap">
                Gross Revenue
              </p>
              <div className="flex items-center space-x-3">
                <h3 className="text-xl font-bold">{formatCurrency(orderOverview?.gross?.amount || 0)}</h3>
                {orderOverview?.gross?.delta !== null && (
                  <p className={`text-xs px-2 rounded-xl truncate overflow-hidden whitespace-nowrap ${
                    orderOverview?.gross?.delta >= 0 ? 'text-[#309147] bg-[#E9FFE1]' : 'text-red-500 bg-red-100'
                  }`}>
                    {formatPercentage(orderOverview?.gross?.delta)}
                  </p>
                )}
              </div>
            </div>
            <div className="mt-4 mb-4 pl-4 pr-2 lg:pl-10 border-r-none lg:border-r border-gray-200">
              <p className="text-[#777B84] font-semibold text-sm mb-2 truncate overflow-hidden whitespace-nowrap">
                Paid Order
              </p>
              <div className="flex items-center space-x-3">
                <h3 className="text-xl font-bold">{orderOverview?.paidOrder?.amount || 0}</h3>
                {orderOverview?.paidOrder?.delta !== null && (
                  <p className={`text-xs px-2 rounded-xl truncate overflow-hidden whitespace-nowrap ${
                    orderOverview?.paidOrder?.delta >= 0 ? 'text-[#309147] bg-[#E9FFE1]' : 'text-red-500 bg-red-100'
                  }`}>
                    {formatPercentage(orderOverview?.paidOrder?.delta)}
                  </p>
                )}
              </div>
            </div>
            <div className="mt-4 mb-4 pl-4 pr-2 lg:pl-10">
              <p className="text-[#777B84] font-semibold text-sm mb-2 truncate overflow-hidden whitespace-nowrap">
                Card Acceptance
              </p>
              <div className="flex items-center space-x-3">
                <h3 className="text-xl font-bold">{orderOverview?.averageSucceedOrder?.amount?.toFixed(1) || 0}%</h3>
                {orderOverview?.averageSucceedOrder?.delta !== null && (
                  <p className={`text-xs px-2 rounded-xl truncate overflow-hidden whitespace-nowrap ${
                    orderOverview?.averageSucceedOrder?.delta >= 0 ? 'text-[#309147] bg-[#E9FFE1]' : 'text-red-500 bg-red-100'
                  }`}>
                    {formatPercentage(orderOverview?.averageSucceedOrder?.delta)}
                  </p>
                )}
              </div>
            </div>
          </div>
          {/* Sale Overview*/}
          <div className="bg-white p-6 rounded-2xl">
            <h4 className="font-semibold mb-2 text-[#777B84] text-xl">Sales Overview</h4>
            <p className="text-sm text-[#BEBEBE] mb-4">Track your company daily volume</p>
            <ResponsiveContainer width="100%" height={338}>
              <AreaChart data={salesData}>
                <defs>
                  <linearGradient id="colorSales" x1="0" y1="0" x2="0" y2="1">
                    <stop offset="5%" stopColor="#006AFF" stopOpacity={0.8} />
                    <stop offset="95%" stopColor="#006AFF" stopOpacity={0} />
                  </linearGradient>
                </defs>
                <XAxis dataKey="month" stroke="#9FA6B2" tickLine={false} tick={{ fontSize: 12 }} />
                <YAxis
                  dataKey="value"
                  stroke="#9FA6B2"
                  tickLine={false}
                  axisLine={false}
                  tickFormatter={(value) => {
                    if (value === 0) return value;
                    return dashboardCurrency === 'BRL' ? `R$ ${value}` : `$ ${value}`;
                  }}
                  tick={{ fontSize: 12 }}
                />
                <CartesianGrid stroke="#D2D6DC33" vertical={false} />
                <Tooltip content={<CustomTooltip />} />
                <Area type="monotone" dataKey="value" stroke="#006AFF" fillOpacity={1} fill="url(#colorSales)" />
              </AreaChart>
            </ResponsiveContainer>
          </div>
        </div>
        <div className="col-span-3 lg:col-span-1 space-y-4 w-full text-sm text-black">
          {/* Balance Section */}
          <div className="p-4 bg-white rounded-xl space-y-4">
            <div className="flex justify-between items-start">
              <div>
                <h4 className="text-[#777B84] font-semibold my-1">Total Balance (USD)</h4>
                <p className="text-xl font-semibold my-2">{formatCurrency(balances?.USD?.totalBalance || 0, 'USD')}</p>
                <p className="text-[#BEBEBE] my-1 truncate overflow-hidden whitespace-nowrap text-sm">
                Total Balance in USD
                </p>
              </div>
              <Link
                href="/merchant/finance"
                className="font-normal text-gray-600 hover:underline truncate overflow-hidden whitespace-nowrap"
              >
                See Details
              </Link>
            </div>

            <hr className="border-gray-200" />

            <div className="flex justify-between items-start">
              <div>
                <h4 className="text-[#777B84] font-semibold my-1">Total Balance (BRL)</h4>
                <p className="text-xl font-semibold my-2">{formatCurrency(balances?.BRL?.totalBalance || 0, 'BRL')}</p>
                <p className="text-[#BEBEBE] my-1 truncate overflow-hidden whitespace-nowrap text-sm">
                Total Balance in BRL
                </p>
              </div>
              <Link
                href="/merchant/finance"
                className="font-normal text-gray-600 hover:underline truncate overflow-hidden whitespace-nowrap"
              >
                See Details
              </Link>
            </div>
          </div>

          {/* Account Status Section */}
          <div className="p-4 bg-white rounded-xl">
            <h4 className="font-semibold text-[#090E18] mb-1 text-base">Account status</h4>
            <p className="text-sm text-[#BEBEBE] mb-4 truncate overflow-hidden whitespace-nowrap">
              Paid Orders, Chargebacks, Refunded
            </p>
            <div className="space-y-3">
              <div className="flex items-center gap-4">
                <div className="w-16 h-16">
                  <CircularProgressbar
                    value={orderStatus?.paid?.percent || 0}
                    text={`${orderStatus?.paid?.percent || 0}%`}
                    strokeWidth={10}
                    styles={buildStyles({
                      pathColor: '#006aff',
                      textColor: '#2E3033',
                      trailColor: '#E5E5FD',
                      textSize: '20px',
                    })}
                  />
                </div>
                <div>
                  <p className="font-semibold text-base text-[#090E18] truncate overflow-hidden whitespace-nowrap">
                    Paid Orders
                  </p>
                  <p className="text-sm text-[#BEBEBE] truncate overflow-hidden whitespace-nowrap">
                    {orderStatus?.paid?.amount || 0} in this period
                  </p>
                </div>
              </div>
              <div className="flex items-center gap-4">
                <div className="w-16 h-16">
                  <CircularProgressbar
                    value={orderStatus?.chargeback?.percent || 0}
                    text={`${orderStatus?.chargeback?.percent || 0}%`}
                    strokeWidth={10}
                    styles={buildStyles({
                      pathColor: '#DE0707',
                      textColor: '#2E3033',
                      trailColor: '#FBF3F4',
                      textSize: '20px',
                    })}
                  />
                </div>
                <div>
                  <p className="font-semibold text-base text-[#090E18] truncate overflow-hidden whitespace-nowrap">
                    Chargebacks
                  </p>
                  <p className="text-sm text-[#BEBEBE] truncate overflow-hidden whitespace-nowrap">
                    {orderStatus?.chargeback?.amount || 0} in this period
                  </p>
                </div>
              </div>
              <div className="flex items-center gap-4">
                <div className="w-16 h-16">
                  <CircularProgressbar
                    value={orderStatus?.refunded?.percent || 0}
                    text={`${orderStatus?.refunded?.percent || 0}%`}
                    strokeWidth={10}
                    styles={buildStyles({
                      pathColor: '#808080',
                      textColor: '#2E3033',
                      trailColor: '#EFEFEF',
                      textSize: '20px',
                    })}
                  />
                </div>
                <div>
                  <p className="font-semibold text-base text-[#090E18] truncate overflow-hidden whitespace-nowrap">
                    Refunded
                  </p>
                  <p className="text-sm text-[#BEBEBE] truncate overflow-hidden whitespace-nowrap">
                    {orderStatus?.refunded?.amount || 0} in this period
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </DashLayout>
  );
};

export default Dashboard;

app/merchant/products/page.tsx
'use client';

import { DashLayout } from '@/components/layouts';
import { BinaryIcon, MoreHorizontal, TagIcon, Eye, Edit, Trash2 } from 'lucide-react';
import Image from 'next/image';
import { useEffect, useState } from 'react';
import { Pagination } from '@/components/widgets';
import { ITEMS_PER_PAGE } from '@/consts/vars';
import { Menu, MenuButton, MenuItem, MenuItems } from '@headlessui/react';
import { AddProductModal, ProductViewModal } from '@/components/ui';
import Toaster from '@/helpers/Toaster';
import { useRouter } from 'next/navigation';

const formatter = new Intl.NumberFormat('en-US', {
  style: 'decimal',
  minimumFractionDigits: 2,
  maximumFractionDigits: 2,
});

interface Product {
  _id: string;
  title: string;
  name?: string;
  shortDescription?: string;
  description?: string;
  price: number;
  defaultCurrency?: string;
  type: 'physical' | 'digital';
  status: 'active' | 'deactivated';
  sku?: string;
  barcode?: string;
  images?: Array<{
    url: string;
    isMain: boolean;
  }>;
  createdAt: string;
  updatedAt?: string;
  slug?: string;
  autoLocalPrice?: boolean;
  digital?: any;
  physical?: any;
  variants?: any[];
}

interface ProductsData {
  products: Product[];
  total: number;
  page: number;
  pages: number;
  limit: number;
}

const ProductsPage = () => {
  const router = useRouter();
  const [statusFilter, setStatusFilter] = useState<'All' | 'Active' | 'Deactivated'>('All');
  const [currentPage, setCurrentPage] = useState(1);
  const [addModal, setAddModal] = useState(false);
  const [viewModal, setViewModal] = useState(false);
  const [editModal, setEditModal] = useState(false);
  const [selectedProduct, setSelectedProduct] = useState<Product | null>(null);
  const [type, setType] = useState<'Physical' | 'Digital' | undefined>();
  const [products, setProducts] = useState<Product[]>([]);
  const [loading, setLoading] = useState(true);
  const [pagination, setPagination] = useState({
    total: 0,
    page: 1,
    pages: 1,
    limit: ITEMS_PER_PAGE
  });

  const selectStatusFilter = (status: 'All' | 'Active' | 'Deactivated') => {
    setStatusFilter(status);
    setCurrentPage(1);
  };

  const loadProducts = async () => {
    setLoading(true);
    try {
      const token = localStorage.getItem('jwt_token');
      if (!token) {
        router.push('/signin');
        return;
      }

      const baseUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:5000/api';
      const params = new URLSearchParams({
        page: currentPage.toString(),
        limit: ITEMS_PER_PAGE.toString(),
      });

      if (statusFilter !== 'All') {
        params.append('status', statusFilter.toLowerCase());
      }

      const response = await fetch(`${baseUrl}/products?${params}`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (response.status === 401) {
        localStorage.removeItem('jwt_token');
        localStorage.removeItem('user_data');
        router.push('/signin');
        return;
      }

      if (response.ok) {
        const result = await response.json();
        if (result.success) {
          setProducts(result.data.products || []);
          setPagination({
            total: result.data.total || 0,
            page: result.data.page || 1,
            pages: result.data.pages || 1,
            limit: result.data.limit || ITEMS_PER_PAGE
          });
        } else {
          Toaster.error(result.message || 'Failed to load products');
        }
      } else {
        throw new Error('Failed to fetch products');
      }
    } catch (error) {
      console.error('Error loading products:', error);
      Toaster.error('Error loading products');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadProducts();
  }, [statusFilter, currentPage]);

  const formatImageUrl = (imageUrl: string) => {
    if (!imageUrl) return '/api/placeholder/100/100';
    if (imageUrl.startsWith('http://') || imageUrl.startsWith('https://')) {
      return imageUrl;
    }
    const baseUrl = process.env.NEXT_PUBLIC_API_URL?.split('/api')[0] || 'http://localhost:5000';
    if (imageUrl.startsWith('/uploads/') || imageUrl.startsWith('/api/uploads/')) {
      return `${baseUrl}${imageUrl}`;
    }
    return `${baseUrl}/uploads/${imageUrl}`;
  };

  const formatCurrency = (amount: number, currency: string = 'USD') => {
    const locales = currency === 'BRL' ? 'pt-BR' : 'en-US';
    return new Intl.NumberFormat(locales, {
      style: 'currency',
      currency: currency
    }).format(amount);
  };

  const handleView = (product: Product) => {
    setSelectedProduct(product);
    setViewModal(true);
  };

  const handleEdit = (product: Product) => {
    setSelectedProduct(product);
    setType(product.type === 'physical' ? 'Physical' : 'Digital');
    setEditModal(true);
  };

  const handleDelete = async (product: Product) => {
    if (!confirm('Are you sure you want to delete this product? This action can be undone by an admin.')) {
      return;
    }

    try {
      const token = localStorage.getItem('jwt_token');
      const baseUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:5000/api';
      
      const response = await fetch(`${baseUrl}/products/${product._id}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      const result = await response.json();
      if (result.success) {
        Toaster.success('Product deleted successfully');
        loadProducts();
      } else {
        Toaster.error(result.message || 'Failed to delete product');
      }
    } catch (error) {
      console.error('Error deleting product:', error);
      Toaster.error('Error deleting product');
    }
  };

  return (
    <DashLayout
      titleArea={
        <>
          <h2 className="text-xl font-semibold">Products</h2>
        </>
      }
    >
      <div className="p-6 bg-white rounded-lg">
        <div className="flex items-center justify-between border-b border-b-gray-200 pb-2 mb-3">
          <div className="flex space-x-4 text-sm font-medium text-gray-900">
            <div
              className={`${
                statusFilter === 'All' ? 'text-blue-500' : 'cursor-pointer hover:text-gray-500'
              } transition-colors duration-200 ease-in-out`}
              onClick={() => selectStatusFilter('All')}
            >
              All
            </div>
            <div
              className={`${
                statusFilter === 'Active' ? 'text-blue-500' : 'cursor-pointer hover:text-gray-500'
              } transition-colors duration-200 ease-in-out`}
              onClick={() => selectStatusFilter('Active')}
            >
              Active
            </div>
            <div
              className={`${
                statusFilter === 'Deactivated' ? 'text-blue-500' : 'cursor-pointer hover:text-gray-500'
              } transition-colors duration-200 ease-in-out`}
              onClick={() => selectStatusFilter('Deactivated')}
            >
              Deactivated
            </div>
          </div>
          <Menu as="div" className="relative inline-block text-left">
            <div>
              <MenuButton className="flex items-center gap-2 hover:bg-blue-600 text-white px-3 py-1.5 text-sm rounded-sm cursor-pointer transition-colors duration-200 ease-in-out bg-blue-500">
                {'+ '}
                Add Product
              </MenuButton>
            </div>
            <MenuItems className="absolute right-0 z-10 mt-2 w-40 origin-top-right rounded-md bg-white ring-1 ring-gray-300 focus:outline-none cursor-pointer">
              <div className="py-1">
                <MenuItem>
                  <button
                    className="hover:bg-gray-100 hover:text-black text-gray-700 w-full px-4 py-2 text-left text-sm cursor-pointer flex items-center justify-start gap-2"
                    onClick={(e) => {
                      e.stopPropagation();
                      setType('Physical');
                      setSelectedProduct(null);
                      setAddModal(true);
                    }}
                  >
                    <TagIcon className="w-4 h-4" />
                    Physical
                  </button>
                </MenuItem>
                <MenuItem>
                  <button
                    className="hover:bg-gray-100 hover:text-black text-gray-700 w-full px-4 py-2 text-left text-sm cursor-pointer flex items-center justify-start gap-2"
                    onClick={(e) => {
                      e.stopPropagation();
                      setType('Digital');
                      setSelectedProduct(null);
                      setAddModal(true);
                    }}
                  >
                    <BinaryIcon className="w-4 h-4" />
                    Digital
                  </button>
                </MenuItem>
              </div>
            </MenuItems>
          </Menu>
        </div>

        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="bg-gray-50 border-b border-gray-200">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Image
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Name
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Price
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Type
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Status
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Created
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Actions
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {loading && (
                <tr>
                  <td colSpan={7} className="text-center p-6">
                    Loading products...
                  </td>
                </tr>
              )}
              {!loading && products.length === 0 && (
                <tr>
                  <td colSpan={7} className="text-center p-6">
                    No products found. Create your first product!
                  </td>
                </tr>
              )}
              {!loading &&
                products.map((product) => {
                  const mainImage = product.images?.find(img => img.isMain);
                  const imageUrl = mainImage ? formatImageUrl(mainImage.url) : '/api/placeholder/50/50';
                  
                  return (
                    <tr key={product._id} className="hover:bg-gray-50">
                      <td className="px-6 py-4 whitespace-nowrap">
                        <img
                          src={imageUrl}
                          alt={product.title || 'Product'}
                          className="w-12 h-12 object-cover rounded-md"
                          onError={(e) => {
                            const target = e.target as HTMLImageElement;
                            target.src = '/api/placeholder/50/50';
                          }}
                        />
                      </td>
                      <td className="px-6 py-4">
                        <div>
                          <div className="text-sm font-medium text-gray-900">
                            {product.title || product.name}
                          </div>
                          {product.shortDescription && (
                            <div className="text-sm text-gray-500 truncate max-w-xs">
                              {product.shortDescription}
                            </div>
                          )}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {formatCurrency(product.price, product.defaultCurrency)}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                          {product.type === 'physical' ? 'Physical' : 'Digital'}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span
                          className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                            product.status === 'active'
                              ? 'bg-green-100 text-green-800'
                              : 'bg-red-100 text-red-800'
                          }`}
                        >
                          {product.status === 'active' ? 'Active' : 'Deactivated'}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {new Date(product.createdAt).toLocaleDateString()}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        <div className="flex items-center space-x-2">
                          <button
                            onClick={() => handleView(product)}
                            className="text-blue-600 hover:text-blue-900 p-1 rounded hover:bg-blue-50"
                            title="View"
                          >
                            <Eye className="w-4 h-4" />
                          </button>
                          <button
                            onClick={() => handleEdit(product)}
                            className="text-indigo-600 hover:text-indigo-900 p-1 rounded hover:bg-indigo-50"
                            title="Edit"
                          >
                            <Edit className="w-4 h-4" />
                          </button>
                          <button
                            onClick={() => handleDelete(product)}
                            className="text-red-600 hover:text-red-900 p-1 rounded hover:bg-red-50"
                            title="Delete"
                          >
                            <Trash2 className="w-4 h-4" />
                          </button>
                        </div>
                      </td>
                    </tr>
                  );
                })}
            </tbody>
          </table>
        </div>

        {pagination.pages > 1 && (
          <div className="mt-6">
            <Pagination
              totalLength={pagination.total}
              limit={pagination.limit}
              page={pagination.page}
              pageCount={pagination.pages}
              pageClick={(page) => setCurrentPage(page)}
            />
          </div>
        )}
      </div>

      {/* Modals */}
      <AddProductModal 
        open={addModal || editModal} 
        onClose={() => {
          setAddModal(false);
          setEditModal(false);
          setSelectedProduct(null);
          loadProducts();
        }} 
        type={type || 'Digital'}
        product={editModal ? selectedProduct : undefined}
      />
      
      <ProductViewModal
        open={viewModal}
        onClose={() => {
          setViewModal(false);
          setSelectedProduct(null);
        }}
        product={selectedProduct}
        onEdit={(product) => {
          setViewModal(false);
          setSelectedProduct(product);
          setType(product.type === 'physical' ? 'Physical' : 'Digital');
          setEditModal(true);
        }}
      />
    </DashLayout>
  );
};

export default ProductsPage;

app/merchant/products/[id]/page.tsx
'use client';

import { DashLayout } from '@/components/layouts';
import Image from 'next/image';
import Link from 'next/link';
import { useParams } from 'next/navigation';
import { useEffect, useState } from 'react';
import { MoreHorizontal } from 'lucide-react';
import Toaster from '@/helpers/Toaster';
import { useApiRequest } from '@/hooks';
import { productDetailUrl, transactionDetailUrl } from '@/consts/paths';
import { integrations, prDetailMock, txDetailMock } from '@/mock';
import { ProductDetail, TransactionDetail } from '@/types';
import { SpinnerCircular } from 'spinners-react';
import { Menu, MenuButton, MenuItem, MenuItems } from '@headlessui/react';

import backIcon from '@/assets/images/icons/back.svg';
import { AddProductModal } from '@/components/ui';

const formatter = new Intl.NumberFormat('en-US', {
  style: 'decimal',
  minimumFractionDigits: 2,
  maximumFractionDigits: 2,
});

const ProductDetailPage = () => {
  const { id } = useParams();
  const [prDetail, setPrDetail] = useState<ProductDetail | null>(null);
  const [editModal, setEditModal] = useState(false);

  const {
    response: prResponse,
    error: prError,
    loading: prLoading,
    sendRequest: sendPrRequest,
  } = useApiRequest({
    endpoint: `${productDetailUrl}/${id}`,
    headers: {
      Accept: 'application/json',
      Authorization: `Bearer 124567890`, // this needs to be changed with the local storage key
    },
    method: 'GET',
  });

  useEffect(() => {
    if (id) {
      sendPrRequest();
    }
  }, [id]);

  useEffect(() => {
    if (prResponse) {
      // Handle the response data here
      setPrDetail(prResponse.data); // this should be changed according to the response structure, this is the real code
    }
  }, [prResponse]);

  useEffect(() => {
    if (prError) {
      Toaster.error(prError?.message);

      // mock data instead: remove this code in production mode
      setPrDetail(prDetailMock);
    }
  }, [prError]);

  return (
    <DashLayout
      titleArea={
        <>
          <h2 className="text-xl font-semibold">Product #{id}</h2>
        </>
      }
    >
      <div className="p-6 bg-white rounded-lg">
        <div className="flex items-center justify-between pb-6">
          <Link href="/merchant/products" className="text-sm text-gray-800 cursor-pointer flex items-center gap-1">
            <Image src={backIcon} alt="Back" className="w-4 h-4" />
            Back
          </Link>
        </div>
        {prLoading && (
          <div className="flex items-center justify-center flex-col p-6 bg-white rounded-lg space-y-6 h-[240px]">
            <SpinnerCircular color="#006aff" secondaryColor="#66AAFF" />
            <div className="text-gray-600">Loading...</div>
          </div>
        )}
        {!prLoading && prDetail && (
          <div className="space-y-6">
            {/* Header */}
            <div className="flex justify-between items-start flex-wrap gap-4">
              <div>
                <h1 className="text-lg font-semibold">Product Name</h1>
                <p className="text-gray-500 text-sm">Copy and share to start accepting payment with this link</p>
                <div className="flex mt-4 space-x-2">
                  <Link
                    href={prDetail.url}
                    className="border border-gray-300 p-1 rounded w-80 h-7 text-sm truncate flex items-center"
                  >
                    {prDetail.url}
                  </Link>
                  <button
                    className="hover:bg-blue-600 bg-blue-500 text-white px-4 h-7 rounded-lg text-sm cursor-pointer"
                    onClick={async () => {
                      try {
                        await navigator.clipboard.writeText(prDetail.url);
                        Toaster.success('URL is copied to clipboard');
                      } catch (err) {
                        Toaster.error(err instanceof Error ? err.message : 'Something went wrong');
                      }
                    }}
                  >
                    Copy
                  </button>
                </div>
              </div>
              <div className="flex items-center justify-end gap-3">
                <button
                  className="border border-gray-100 shadow-lg px-4 py-1 font-semibold rounded-lg text-sm text-gray-700 hover:bg-gray-100 cursor-pointer"
                  onClick={() => setEditModal(true)}
                >
                  Edit Product
                </button>
                <Menu as="div" className="relative inline-block text-left">
                  <div>
                    <MenuButton
                      className="flex items-center justify-center w-8 h-7.5 rounded-md shadow-lg bg-gray-300 hover:bg-gray-200 transition-colors duration-200 ease-in-out cursor-pointer"
                      onClick={(e) => {
                        e.stopPropagation();
                      }}
                    >
                      <MoreHorizontal className="h-4 w-4" />
                    </MenuButton>
                  </div>
                  <MenuItems className="absolute right-0 z-10 mt-2 w-40 origin-top-right rounded-md bg-white ring-1 ring-gray-300 focus:outline-none cursor-pointer">
                    <div className="py-1">
                      <MenuItem>
                        <button
                          className="hover:bg-gray-100 hover:text-black text-gray-700 w-full px-4 py-2 text-left text-sm cursor-pointer"
                          onClick={(e) => {
                            e.stopPropagation();
                          }}
                        >
                          Deactivate Product
                        </button>
                      </MenuItem>
                    </div>
                  </MenuItems>
                </Menu>
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mt-12">
              {/* Left side */}
              <div className="md:col-span-2 space-y-6">
                {/* Product */}
                <div className="rounded-lg bg-white">
                  <h2 className="text-lg font-semibold border-b border-gray-300">Product</h2>
                  <table className="w-full text-sm">
                    <thead>
                      <tr className="border-b border-gray-300 text-gray-500 text-left">
                        <th className="py-2 max-w-16 w-16"></th>
                        <th className="py-2">Name</th>
                        <th className="py-2">Quantity</th>
                        <th className="py-2">Price</th>
                      </tr>
                    </thead>
                    <tbody>
                      <tr className="">
                        <td className="py-2">
                          <Image src={prDetail.image} alt="product" className="w-12 h-12" width={48} height={48} />
                        </td>
                        <td className="">
                          <div>
                            <div className="font-semibold text-black">{prDetail.name}</div>
                            <div className="text-gray-500 text-xs">{prDetail.description}</div>
                          </div>
                        </td>
                        <td>{prDetail.quantity}</td>
                        <td className="font-medium">US$ {formatter.format(prDetail.price)}</td>
                      </tr>
                    </tbody>
                  </table>
                </div>

                {/* Cross-selling */}
                <div className="">
                  <h2 className="text-lg font-semibold">Cross-selling</h2>
                  <p className="text-sm text-gray-500">
                    Suggest a related product for customer to add to their order, right at Checkout.
                  </p>
                  <div className="flex items-center mt-4 gap-4">
                    <div className="text-sm">Cross-selling to</div>
                    <input
                      type="text"
                      placeholder="Find a product…"
                      className="flex-1 border border-gray-300 px-3 py-2 rounded text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                </div>
              </div>

              {/* Right side - Insights & Details */}
              <div className="space-y-6">
                <div className="bg-white space-y-2">
                  <h2 className="text-lg font-semibold border-b border-gray-300">Insights</h2>
                  <div>
                    <div className="text-gray-500 text-sm">MRR</div>
                    <div className="font-medium text-sm">US$ {formatter.format(prDetail.mrr)}</div>
                  </div>
                  <div>
                    <div className="text-gray-500 text-sm">
                      {prDetail.createdAt.toLocaleDateString('en-US', {
                        month: 'short',
                        day: 'numeric',
                        year: 'numeric',
                      })}
                    </div>
                  </div>
                </div>

                <div className="bg-white space-y-2">
                  <h2 className="text-lg font-semibold border-b border-gray-300">Details</h2>
                  <div className="space-y-1">
                    <div className="text-black font-semibold">Product ID</div>
                    <div className="text-sm text-gray-600">{prDetail.id}</div>
                  </div>
                  <div className="space-y-1">
                    <div className="text-black font-semibold">Description</div>
                    <div className="text-sm text-gray-600">{prDetail.description}</div>
                  </div>
                  <div className="space-y-1">
                    <div className="text-black font-semibold">Product Type</div>
                    <div className="text-sm text-gray-600">{prDetail.type}</div>
                  </div>
                  {prDetail.type === 'Physical' && (
                    <div className="space-y-1">
                      <div className="text-black font-semibold">Shipping</div>
                      <table className="w-full text-sm">
                        <tbody>
                          {prDetail.shipping &&
                            prDetail.shipping.map((s, i) => (
                              <tr className="h-6 text-gray-600" key={i}>
                                <td className="">{s.name}</td>
                                <td className="text-center">{`${s.minDay}-${s.maxDay} days`}</td>
                                <td className="font-medium text-end">US$ {formatter.format(s.fee)}</td>
                              </tr>
                            ))}
                        </tbody>
                      </table>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
      <AddProductModal open={editModal} onClose={() => setEditModal(false)} type={prDetail?.type ?? 'Digital'} />
    </DashLayout>
  );
};

export default ProductDetailPage;


app/merchant/settings/page.tsx
'use client';

import { DashLayout } from '@/components/layouts';
import { MoreHorizontal } from 'lucide-react';

import Image from 'next/image';
import { Suspense, useEffect, useState } from 'react';

import { Pagination } from '@/components/widgets';
import { ITEMS_PER_PAGE } from '@/consts/vars';
import { useApiRequest } from '@/hooks';
import { transactionsUrl } from '@/consts/paths';
import Toaster from '@/helpers/Toaster';
import { Transaction, TransactionData } from '@/types';
import { Menu, MenuButton, MenuItem, MenuItems } from '@headlessui/react';
import { txDataMock } from '@/mock';

import excelIcon from '@/assets/images/icons/excel-export.svg';
import orderNormalIcon from '@/assets/images/icons/order-normal.svg';
import orderAscIcon from '@/assets/images/icons/order-asc.svg';
import orderDescIcon from '@/assets/images/icons/order-desc.svg';
import { useRouter, useSearchParams } from 'next/navigation';
import { txStatusStyles } from '@/consts/styles';
import { BusinessSettingsTab, FeeSettingsTab, ProfileSettingsTab } from '@/components/ui';
import Link from 'next/link';

const formatter = new Intl.NumberFormat('en-US', {
  style: 'decimal',
  minimumFractionDigits: 2,
  maximumFractionDigits: 2,
});

const tabs: Record<'business' | 'security' | 'fee', string> = {
  business: 'Business Details',
  security: 'Login & Security',
  fee: 'Account Fees',
};

const RawSettingsPage = () => {
  const router = useRouter();
  const searchParams = useSearchParams();

  const [activeTab, setActiveTab] = useState<'business' | 'security' | 'fee'>('business');

  useEffect(() => {
    const tab = searchParams.get('tab');
    if (tab && ['business', 'security', 'fee'].includes(tab)) {
      setActiveTab(tab as 'business' | 'security' | 'fee');
    }
  }, [searchParams]);

  return (
    <DashLayout
      titleArea={
        <>
          <h2 className="text-xl font-semibold">Settings</h2>
        </>
      }
    >
      <div className="px-2 py-4 bg-white rounded-lg">
        <div className="flex items-center justify-between border-b border-b-gray-200 mx-2 mb-3 pb-2">
          <div className="flex space-x-4 text-sm font-medium text-gray-900">
            {['business', 'security', 'fee'].map((tab) => (
              <Link
                key={tab}
                className={`${
                  activeTab === tab ? 'text-blue-500' : 'cursor-pointer hover:text-gray-500'
                } transition-colors duration-200 ease-in-out`}
                href={`/merchant/settings?tab=${tab}`}
              >
                {tabs[tab as 'business' | 'security' | 'fee']}
              </Link>
            ))}
          </div>
        </div>
        <div className="max-w-5xl px-2">
          {activeTab === 'business' && <BusinessSettingsTab />}
          {activeTab === 'fee' && <FeeSettingsTab />}
          {activeTab === 'security' && <ProfileSettingsTab />}
        </div>
      </div>
    </DashLayout>
  );
};

export default function SettingsPage() {
  return (
    <Suspense>
      <RawSettingsPage />
    </Suspense>
  );
}


app/merchant/transactions/page.tsx
'use client';

import { DashLayout } from '@/components/layouts';
import { MoreHorizontal } from 'lucide-react';

import Image from 'next/image';
import { useEffect, useState } from 'react';

import mastercardImage from '@/assets/images/mastercard.svg';
import visaImage from '@/assets/images/visa.svg';
import { Pagination } from '@/components/widgets';
import { ITEMS_PER_PAGE } from '@/consts/vars';
import { useApiRequest } from '@/hooks';
import { transactionsUrl } from '@/consts/paths';
import Toaster from '@/helpers/Toaster';
import { Transaction, TransactionData } from '@/types';
import { Menu, MenuButton, MenuItem, MenuItems } from '@headlessui/react';
import { txDataMock } from '@/mock';

import excelIcon from '@/assets/images/icons/excel-export.svg';
import orderNormalIcon from '@/assets/images/icons/order-normal.svg';
import orderAscIcon from '@/assets/images/icons/order-asc.svg';
import orderDescIcon from '@/assets/images/icons/order-desc.svg';
import { useRouter } from 'next/navigation';
import { txStatusStyles } from '@/consts/styles';

const cardIcons: Record<Transaction['card'], string> = {
  mastercard: mastercardImage,
  visa: visaImage,
};

const formatter = new Intl.NumberFormat('en-US', {
  style: 'decimal',
  minimumFractionDigits: 2,
  maximumFractionDigits: 2,
});

const TransactionPage = () => {
  const router = useRouter();

  const [statusFilter, setStatusFilter] = useState<
    'All' | 'Success' | 'Failed' | 'Pending' | 'Chargeback' | 'Refunded'
  >('All');
  const [cardType, setCardType] = useState();
  const [dateFilter, setDateFilter] = useState();
  const [amountFilter, setAmountFilter] = useState();
  const [orderField, setOrderField] = useState<'createdAt' | 'txid' | 'card' | 'status' | 'amount'>('createdAt');
  const [order, setOrder] = useState<'asc' | 'desc'>('desc');
  const [currentPage, setCurrentPage] = useState(1);
  const [txData, setTxData] = useState<TransactionData>({
    pagination: {
      totalLength: 0,
      itemsPerPage: 0,
      pageCount: 0,
      currentPage: 1,
    },
    data: [] as Transaction[],
  });

  const {
    response: txResponse,
    error: txError,
    loading: txLoading,
    sendRequest: sendTxRequest,
  } = useApiRequest({
    endpoint: transactionsUrl,
    headers: {
      Accept: 'application/json',
      Authorization: `Bearer 124567890`, // this needs to be changed with the local storage key
    },
    method: 'GET',
    params: {
      status: statusFilter,
      cardType,
      date: dateFilter,
      amount: amountFilter,
      page: currentPage,
      limit: ITEMS_PER_PAGE,
      orderField,
      order,
    },
  });

  const selectStatusFilter = (status: 'All' | 'Success' | 'Failed' | 'Pending' | 'Chargeback' | 'Refunded') => {
    setStatusFilter(status);
  };

  useEffect(() => {
    sendTxRequest();
  }, [statusFilter, cardType, dateFilter, amountFilter, currentPage, ITEMS_PER_PAGE, order, orderField]);

  useEffect(() => {
    if (txResponse) {
      // Handle the response data here
      setTxData(txResponse.data); // this should be changed according to the response structure, this is the real code
    }
  }, [txResponse]);

  useEffect(() => {
    if (txError) {
      Toaster.error(txError?.message);

      // mock data instead: remove this code in production mode
      setTxData(txDataMock);
    }
  }, [txError]);

  useEffect(() => {
    sendTxRequest();
  }, []);

  return (
    <DashLayout
      titleArea={
        <>
          <h2 className="text-xl font-semibold">All Transaction</h2>
        </>
      }
    >
      <div className="p-4 bg-white rounded-lg">
        <div className="flex items-center justify-between border-b border-b-gray-200 pb-2 mb-3">
          <div className="flex space-x-4 text-sm font-medium text-gray-900">
            <div
              className={`${
                statusFilter === 'All' ? 'text-blue-500' : 'cursor-pointer hover:text-gray-500'
              } transition-colors duration-200 ease-in-out`}
              onClick={() => selectStatusFilter('All')}
            >
              All
            </div>
            <div
              className={`${
                statusFilter === 'Success' ? 'text-blue-500' : 'cursor-pointer hover:text-gray-500'
              } transition-colors duration-200 ease-in-out`}
              onClick={() => selectStatusFilter('Success')}
            >
              Success
            </div>
            <div
              className={`${
                statusFilter === 'Failed' ? 'text-blue-500' : 'cursor-pointer hover:text-gray-500'
              } transition-colors duration-200 ease-in-out`}
              onClick={() => selectStatusFilter('Failed')}
            >
              Failed
            </div>
            <div
              className={`${
                statusFilter === 'Pending' ? 'text-blue-500' : 'cursor-pointer hover:text-gray-500'
              } transition-colors duration-200 ease-in-out`}
              onClick={() => selectStatusFilter('Pending')}
            >
              Pending
            </div>
            <div
              className={`${
                statusFilter === 'Chargeback' ? 'text-blue-500' : 'cursor-pointer hover:text-gray-500'
              } transition-colors duration-200 ease-in-out`}
              onClick={() => selectStatusFilter('Chargeback')}
            >
              Chargeback
            </div>
            <div
              className={`${
                statusFilter === 'Refunded' ? 'text-blue-500' : 'cursor-pointer hover:text-gray-500'
              } transition-colors duration-200 ease-in-out`}
              onClick={() => selectStatusFilter('Refunded')}
            >
              Refunded
            </div>
          </div>
          {/* <button className="flex items-center gap-2 hover:bg-blue-600 text-white px-3 py-1 text-sm rounded-full cursor-pointer transition-colors duration-200 ease-in-out hover:bg-blue-400">
            <Image src={excelIcon} alt="Export" className="h-4 w-4" />
            Export
          </button> */}
        </div>

        <div className="flex gap-4 flex-wrap text-sm mb-3">
          {['Date', 'Amount', 'Status', 'Card Type'].map((filter, idx) => (
            <button
              key={idx}
              className="border border-dashed border-gray-400 px-1 py-1 rounded-full flex items-center gap-1 text-gray-500 cursor-pointer"
            >
              <span className="bg-gray-500 text-white w-5 h-5 rounded-full flex items-center justify-center text-xs font-semibold">
                +
              </span>
              <span className="text-sm font-medium">{filter}</span>
            </button>
          ))}
        </div>
        <div className="h-12 bg-gray-100 -mx-4" style={{ width: 'calc(100% + var(--spacing) * 8)' }} />

        <div className="max-w-full overflow-auto -mt-12">
          <table className="table-auto w-full">
            <thead className="bg-gray-100 text-xs font-semibold text-gray-700 mb-2">
              <tr className="h-12">
                <th className="text-left w-8">
                  <input type="checkbox" className="align-middle" />
                </th>
                <th
                  className="p-2 text-left cursor-pointer"
                  onClick={() =>
                    orderField !== 'createdAt' ? setOrderField('createdAt') : setOrder(order === 'asc' ? 'desc' : 'asc')
                  }
                >
                  <div className="flex items-center">
                    <span>Date/Time</span>
                    <Image
                      src={
                        orderField !== 'createdAt' ? orderNormalIcon : order === 'asc' ? orderAscIcon : orderDescIcon
                      }
                      alt="order"
                    />
                  </div>
                </th>
                <th
                  className="p-2 text-left cursor-pointer"
                  onClick={() =>
                    orderField !== 'txid' ? setOrderField('txid') : setOrder(order === 'asc' ? 'desc' : 'asc')
                  }
                >
                  <div className="flex items-center">
                    <span>Transaction ID</span>
                    <Image
                      src={orderField !== 'txid' ? orderNormalIcon : order === 'asc' ? orderAscIcon : orderDescIcon}
                      alt="order"
                    />
                  </div>
                </th>
                <th className="p-2 text-left">Customer</th>
                <th
                  className="p-2 text-left cursor-pointer"
                  onClick={() =>
                    orderField !== 'card' ? setOrderField('card') : setOrder(order === 'asc' ? 'desc' : 'asc')
                  }
                >
                  <div className="flex items-center">
                    <span>Card Type</span>
                    <Image
                      src={orderField !== 'card' ? orderNormalIcon : order === 'asc' ? orderAscIcon : orderDescIcon}
                      alt="order"
                    />
                  </div>
                </th>
                <th
                  className="p-2 text-left cursor-pointer"
                  onClick={() =>
                    orderField !== 'status' ? setOrderField('status') : setOrder(order === 'asc' ? 'desc' : 'asc')
                  }
                >
                  <div className="flex items-center">
                    <span>Status</span>
                    <Image
                      src={orderField !== 'status' ? orderNormalIcon : order === 'asc' ? orderAscIcon : orderDescIcon}
                      alt="order"
                    />
                  </div>
                </th>
                <th
                  className="p-2 text-left cursor-pointer"
                  onClick={() =>
                    orderField !== 'amount' ? setOrderField('amount') : setOrder(order === 'asc' ? 'desc' : 'asc')
                  }
                >
                  <div className="flex items-center">
                    <span>Amount</span>
                    <Image
                      src={orderField !== 'amount' ? orderNormalIcon : order === 'asc' ? orderAscIcon : orderDescIcon}
                      alt="order"
                    />
                  </div>
                </th>
                <th className="p-2 text-left"></th>
              </tr>
            </thead>
            <tbody className="text-sm">
              {txLoading && (
                <tr>
                  <td colSpan={8} className="text-center p-6">
                    Loading Transactions...
                  </td>
                </tr>
              )}
              {!txLoading &&
                txData?.data?.length > 0 &&
                txData?.data.map((t, i) => (
                  <tr
                    key={i}
                    className="h-10 hover:bg-gray-50 transition cursor-pointer"
                    onClick={() => {
                      router.push(`/merchant/transactions/${t.id}`); // this needs to be changed with the local storage key
                    }}
                  >
                    <td className="border-b border-b-gray-200">
                      <input type="checkbox" className="align-middle" />
                    </td>
                    {/* <td className="pl-4 w-8 h-full">
                    <div className="border-b border-b-gray-200 flex items-center h-full w-full">
                      <input type="checkbox" style={{ verticalAlign: 'middle' }} />
                    </div>
                  </td> */}
                    <td className="p-2 whitespace-nowrap border-b border-b-gray-200">
                      {t.date.toLocaleString('en-US', {
                        month: 'short',
                        day: 'numeric',
                        year: 'numeric',
                        hour: 'numeric',
                        minute: '2-digit',
                        hour12: true,
                      })}
                    </td>
                    <td className="p-2 whitespace-nowrap border-b border-b-gray-200">{t.id}</td>
                    <td className="p-2 whitespace-nowrap border-b border-b-gray-200">{t.customer}</td>
                    <td className="p-2 border-b border-b-gray-200">
                      <Image src={cardIcons[t.card]} alt={t.card} className="h-5 inline" />
                    </td>
                    <td className="p-2 border-b border-b-gray-200">
                      <span
                        className={`px-2 py-1 rounded text-xs font-medium ${txStatusStyles[t.status]} rounded-full`}
                      >
                        {t.status}
                      </span>
                    </td>
                    <td className="p-2 font-semibold border-b border-b-gray-200">{`$${formatter.format(t.amount)}`}</td>
                    <td className="p-2 text-gray-500 border-b border-b-gray-200">
                      <Menu as="div" className="relative inline-block text-left">
                        <div>
                          <MenuButton
                            className="flex items-center justify-center w-8 h-8 rounded-full hover:bg-gray-100 transition-colors duration-200 ease-in-out cursor-pointer"
                            onClick={(e) => {
                              e.stopPropagation();
                            }}
                          >
                            <MoreHorizontal className="h-4 w-4" />
                          </MenuButton>
                        </div>
                        <MenuItems className="absolute right-0 z-10 mt-2 w-40 origin-top-right rounded-md bg-white ring-1 ring-gray-300 focus:outline-none cursor-pointer">
                          <div className="py-1">
                            <MenuItem>
                              <button
                                className="hover:bg-gray-100 hover:text-black text-gray-700 w-full px-4 py-2 text-left text-sm cursor-pointer"
                                onClick={(e) => {
                                  e.stopPropagation();
                                }}
                              >
                                Archive
                              </button>
                            </MenuItem>
                            <MenuItem>
                              <button
                                className="hover:bg-gray-100 hover:text-black text-gray-700 w-full px-4 py-2 text-left text-sm cursor-pointer"
                                onClick={(e) => {
                                  e.stopPropagation();
                                }}
                              >
                                Refund
                              </button>
                            </MenuItem>
                            <MenuItem>
                              <button
                                className="hover:bg-gray-100 hover:text-black text-gray-700 w-full px-4 py-2 text-left text-sm cursor-pointer"
                                onClick={(e) => {
                                  e.stopPropagation();
                                }}
                              >
                                Checkout URL
                              </button>
                            </MenuItem>
                          </div>
                        </MenuItems>
                      </Menu>
                    </td>
                  </tr>
                ))}
              {!txLoading && txData?.data?.length === 0 && (
                <tr>
                  <td colSpan={8} className="text-center p-6">
                    No Transactions
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
        <div className="mt-12">
          <Pagination
            totalLength={txData.pagination.totalLength}
            limit={txData.pagination.itemsPerPage}
            pageCount={txData.pagination.pageCount}
            page={txData.pagination.currentPage}
            pageClick={(p) => setCurrentPage(p)}
          />
        </div>
      </div>
    </DashLayout>
  );
};

export default TransactionPage;


app/merchant/transactions/[id]/page.tsx
'use client';

import { DashLayout } from '@/components/layouts';
import Image from 'next/image';
import Link from 'next/link';
import { useParams } from 'next/navigation';
import { txStatusStyles } from '@/consts/styles';
import { useEffect, useState } from 'react';
import {
  ChevronDown,
  ChevronUp,
  Copy,
  LocateIcon,
  Mail,
  MapPin,
  MonitorSmartphone,
  Network,
  Phone,
  UserIcon,
} from 'lucide-react';
import Toaster from '@/helpers/Toaster';
import { useApiRequest } from '@/hooks';
import { transactionDetailUrl } from '@/consts/paths';
import { integrations, txDetailMock } from '@/mock';
import { TransactionDetail } from '@/types';

import backIcon from '@/assets/images/icons/back.svg';
import mastercardImage from '@/assets/images/mastercard.svg';
import visaImage from '@/assets/images/visa.svg';
import { SpinnerCircular } from 'spinners-react';

const TransactionDetailPage = () => {
  const { id } = useParams();

  const [menuOpen, setMenuOpen] = useState(false);
  const [txDetail, setTxDetail] = useState<TransactionDetail | null>(null);

  const {
    response: txResponse,
    error: txError,
    loading: txLoading,
    sendRequest: sendTxRequest,
  } = useApiRequest({
    endpoint: `${transactionDetailUrl}/${id}`,
    headers: {
      Accept: 'application/json',
      Authorization: `Bearer 124567890`, // this needs to be changed with the local storage key
    },
    method: 'GET',
  });

  useEffect(() => {
    if (id) {
      sendTxRequest();
    }
  }, [id]);

  useEffect(() => {
    if (txResponse) {
      // Handle the response data here
      setTxDetail(txResponse.data); // this should be changed according to the response structure, this is the real code
    }
  }, [txResponse]);

  useEffect(() => {
    if (txError) {
      Toaster.error(txError?.message);

      // mock data instead: remove this code in production mode
      setTxDetail(txDetailMock);
    }
  }, [txError]);

  return (
    <DashLayout
      titleArea={
        <>
          <h2 className="text-xl font-semibold">Transaction #{id}</h2>
        </>
      }
    >
      <div className="p-4 bg-white rounded-lg">
        <div className="flex items-center justify-between border-b border-gray-200 pb-3">
          <Link href="/merchant/transactions" className="text-sm text-gray-800 cursor-pointer flex items-center gap-1">
            <Image src={backIcon} alt="Back" className="w-4 h-4" />
            Back
          </Link>
        </div>
        {txLoading && (
          <div className="flex items-center justify-center flex-col p-6 bg-white rounded-lg space-y-6 h-[240px]">
            <SpinnerCircular color="#006aff" secondaryColor="#66AAFF" />
            <div className="text-gray-600">Loading...</div>
          </div>
        )}
        {!txLoading && (
          <>
            <div className="flex items-center justify-between py-4">
              <div className="flex-1">
                <div className="flex items-center justify-start gap-4">
                  <div>
                    <h2 className="text-xl font-bold text-gray-900">{txDetail?.customer?.name}</h2>
                    <p className="text-sm text-gray-500">{txDetail?.customer?.email}</p>
                  </div>
                  <span
                    className={`px-2 py-1 rounded text-xs font-medium ${
                      txStatusStyles[txDetail?.status ?? 'Succeeded']
                    } rounded-full`}
                  >
                    {txDetail?.status}
                  </span>
                </div>
              </div>
              <div className="">
                <button
                  className="hover:bg-blue-600 text-white text-sm px-4 py-2 rounded-md flex items-center gap-2 cursor-pointer"
                  onClick={() => setMenuOpen(!menuOpen)}
                >
                  Action {menuOpen ? <ChevronUp size={16} /> : <ChevronDown size={16} />}
                </button>
                {menuOpen && (
                  <div className="absolute right-12 w-32 bg-white border border-gray-300 rounded-md z-10 py-1">
                    <ul className="text-sm text-gray-700">
                      <li className="px-4 py-2 hover:bg-gray-100 cursor-pointer">Archive</li>
                      <li className="px-4 py-2 hover:bg-gray-100 cursor-pointer">Refund</li>
                      <li className="px-4 py-2 hover:bg-gray-100 cursor-pointer">Checkout URL</li>
                    </ul>
                  </div>
                )}
              </div>
            </div>
            <div className="grid lg:grid-cols-3 gap-4">
              <div className="lg:col-span-2 space-y-4">
                {txDetail?.products &&
                  txDetail.products.length > 0 &&
                  txDetail.products.map((item, idx) => (
                    <div key={idx} className="flex justify-between items-center border border-gray-300 p-4 rounded-lg">
                      <div className="flex items-center gap-4 lg:w-[40%]">
                        <div className="w-14 min-w-14 h-14 bg-gray-100 rounded-lg flex items-center justify-center">
                          <Image src={item.imageUrl} alt="Product" width={50} height={50} className="w-14 h-14" />
                        </div>
                        <div className="w-full">
                          <p className="font-semibold text-gray-800 truncate">{item.name}</p>
                          <p className="text-xs text-gray-600 truncate">#{item.id}</p>
                        </div>
                      </div>
                      <div className="text-center hidden lg:block">
                        <p className="text-sm">
                          ${item.price} × {item.quantity}
                        </p>
                      </div>
                      <div className="text-right hidden lg:block">
                        <p className="text-sm text-gray-500 font-semibold">{`$${item.price * item.quantity}`}</p>
                      </div>
                      <div className="block lg:hidden">
                        <p className="text-sm text-right">
                          ${item.price} × {item.quantity}
                        </p>
                        <p className="text-sm text-gray-500 font-semibold text-right">{`$${
                          item.price * item.quantity
                        }`}</p>
                      </div>
                    </div>
                  ))}
                <div className="border border-gray-300 p-4 rounded-lg space-y-3">
                  <h3 className="font-bold text-gray-800 text-lg mb-4">Payment Resume</h3>
                  <div className="flex justify-between items-start gap-4">
                    <div className="max-w-[20%] truncate text-sm hidden lg:block">Subtotal</div>
                    <div className="flex-1 lg:max-w-[50%] space-y-2">
                      {txDetail?.products &&
                        txDetail.products.length > 0 &&
                        txDetail.products.map((item, idx) => (
                          <div className="flex justify-between text-sm" key={idx}>
                            <span>{item.quantity} item (s)</span>
                            <span className="text-right">${item.price * item.quantity}</span>
                          </div>
                        ))}
                    </div>
                  </div>
                  <hr className="text-gray-300" />
                  <div className="flex justify-between font-semibold">
                    <span>Total</span>
                    <span>${txDetail?.amount}</span>
                  </div>
                </div>
              </div>
              <div className="space-y-4 border border-gray-300 p-4 rounded-lg">
                <div>
                  <p className="text-sm flex items-center">
                    ID <span className="text-gray-800 ml-3">{id}</span>
                    <span
                      className="p-2 rounded-full hover:bg-gray-100 transition cursor-pointer"
                      onClick={() => {
                        navigator.clipboard.writeText(id?.toString() ?? '');
                        Toaster.success('Transaction ID copied to clipboard');
                      }}
                    >
                      <Copy className="w-3 h-3 text-gray-500" />
                    </span>
                  </p>
                  <p className="text-sm text-gray-500">
                    Triggered on{' '}
                    {txDetail?.createdAt.toLocaleString('en-US', {
                      month: 'short',
                      day: 'numeric',
                      year: 'numeric',
                      hour: 'numeric',
                      minute: '2-digit',
                      hour12: true,
                    })}
                  </p>
                </div>
                <div className="space-y-0.5">
                  <h3 className="font-semibold text-gray-800">Contact Information</h3>
                  <p className="text-sm text-gray-500 flex items-center gap-2">
                    <Mail className="w-3.5 h-3.5" /> {txDetail?.contact?.email}
                  </p>
                  <p className="text-sm text-gray-500 flex items-center gap-2">
                    <Phone className="w-3.5 h-3.5" /> {txDetail?.contact?.phone}
                  </p>
                </div>
                <div className="space-y-0.5">
                  <h3 className="font-semibold text-gray-800">Billing Address</h3>
                  <p className="text-sm text-gray-500 flex items-center gap-2">
                    <UserIcon className="w-3.5 h-3.5" />
                    {txDetail?.billing.name}
                  </p>
                  <p className="text-sm text-gray-500 flex items-center gap-2">
                    <MapPin className="w-3.5 h-3.5" />
                    {txDetail?.billing.address}
                  </p>
                </div>
                <div className="space-y-0.5">
                  <h3 className="font-semibold text-gray-800">Technical Details</h3>
                  <p className="text-sm text-gray-500 flex items-center gap-2">
                    <Network className="w-3.5 h-3.5" />
                    {txDetail?.technical.ip}
                  </p>
                  <p className="text-sm text-gray-500 flex items-center gap-2">
                    <MonitorSmartphone className="w-3.5 h-3.5" />
                    {txDetail?.technical.device}
                  </p>
                </div>
                <div>
                  <h3 className="font-semibold text-gray-800">Generated By</h3>
                  <Image
                    className="text-sm text-gray-500 flex items-center gap-2 w-12 h-12 mt-1"
                    src={
                      integrations
                        .find((e) => e.items.find((i) => i.name === txDetail?.generatedBy) !== null)
                        ?.items.find((i) => i.name === txDetail?.generatedBy)?.icon ??
                      `https://ui-avatars.com/api/?name=${txDetail?.generatedBy}`
                    }
                    alt="Integration"
                    width={50}
                    height={50}
                  />
                </div>
                <div>
                  <h3 className="font-semibold text-gray-800">Payment Method</h3>
                  <Image
                    src={txDetail?.paymentMethod === 'Mastercard' ? mastercardImage : visaImage}
                    alt="payment"
                    className="w-16 h-10 rounded-md mt-1"
                  />
                </div>
              </div>
            </div>
          </>
        )}
      </div>
    </DashLayout>
  );
};

export default TransactionDetailPage;


app/onboarding/address/page.tsx
'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { zodResolver } from '@hookform/resolvers/zod';
import { useForm } from 'react-hook-form';
import { addressSchema, type AddressFormData } from '@/lib/schemas/onboarding-schemas';
import { useOnboardingStore } from '@/lib/store/onboarding-store';
import { onboardingAddressUrl } from '@/consts/paths';
import { getStatesForCountry } from '@/lib/data/states';
import { getTimezonesForCountry } from '@/lib/data/timezones';
import OnboardingLayout from '@/components/layouts/OnboardingLayout';
import { Loader2, ArrowLeft } from 'lucide-react';

export default function AddressPage() {
  const router = useRouter();
  const { data, updateData, setStage } = useOnboardingStore();
  const [isLoading, setIsLoading] = useState(false);
  const [checkingAuth, setCheckingAuth] = useState(true);

  // Check authentication and onboarding status first
  useEffect(() => {
    const checkAuthAndOnboarding = async () => {
      const token = localStorage.getItem('jwt_token');
      
      if (!token) {
        router.replace('/signup');
        return;
      }

      try {
        const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/auth/me`, {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        });

        const result = await response.json();

        if (result.success) {
          // If user has completed onboarding, redirect to merchant
          if (result.data.user.onboardingComplete) {
            router.replace('/merchant');
            return;
          }
        } else {
          // Invalid token, redirect to signup
          localStorage.removeItem('jwt_token');
          localStorage.removeItem('user_data');
          router.replace('/signup');
          return;
        }
      } catch (error) {
        console.error('Auth check error:', error);
        localStorage.removeItem('jwt_token');
        localStorage.removeItem('user_data');
        router.replace('/signup');
        return;
      }

      setCheckingAuth(false);
    };

    checkAuthAndOnboarding();
  }, [router]);

  // Redirect if business step not completed
  useEffect(() => {
    if (!checkingAuth && (!data.businessName || !data.country)) {
      router.replace('/onboarding/business');
      return;
    }
  }, [data, router, checkingAuth]);

  const {
    register,
    handleSubmit,
    formState: { errors },
    setError,
    setValue,
    watch,
  } = useForm<AddressFormData>({
    resolver: zodResolver(addressSchema),
    defaultValues: {
      line1: data.line1 || '',
      line2: data.line2 || '',
      city: data.city || '',
      state: data.state || '',
      postalCode: data.postalCode || '',
      phone: data.phone || '',
      timezone: data.timezone || '',
    },
  });

  // Watch state changes for timezone suggestions
  const selectedState = watch('state');

  // Set initial values when component mounts
  useEffect(() => {
    if (data.line1) setValue('line1', data.line1);
    if (data.line2) setValue('line2', data.line2);
    if (data.city) setValue('city', data.city);
    if (data.state) setValue('state', data.state);
    if (data.postalCode) setValue('postalCode', data.postalCode);
    if (data.phone) setValue('phone', data.phone);
    if (data.timezone) setValue('timezone', data.timezone);
  }, [data, setValue]);

  // Auto-suggest timezone based on state
  useEffect(() => {
    if (selectedState && data.country) {
      const timezones = getTimezonesForCountry(data.country);
      if (timezones.length > 0 && !watch('timezone')) {
        // Simple mapping for common states (you can expand this)
        const timezoneMapping: Record<string, string> = {
          'CA': 'America/Los_Angeles',
          'NY': 'America/New_York',
          'IL': 'America/Chicago',
          'TX': 'America/Chicago',
          'SP': 'America/Sao_Paulo',
          'RJ': 'America/Sao_Paulo',
        };
        
        const suggestedTimezone = timezoneMapping[selectedState] || timezones[0].value;
        setValue('timezone', suggestedTimezone);
      }
    }
  }, [selectedState, data.country, setValue, watch]);

  // Phone number formatting functions
  const formatUSPhone = (value: string): string => {
    // Remove all non-digit characters
    const digits = value.replace(/\D/g, '');
    
    // Format as (XXX) XXX-XXXX
    if (digits.length >= 6) {
      return `(${digits.slice(0, 3)}) ${digits.slice(3, 6)}-${digits.slice(6, 10)}`;
    } else if (digits.length >= 3) {
      return `(${digits.slice(0, 3)}) ${digits.slice(3)}`;
    } else if (digits.length > 0) {
      return `(${digits}`;
    }
    return digits;
  };

  const formatBRPhone = (value: string): string => {
    // Remove all non-digit characters
    const digits = value.replace(/\D/g, '');
    
    // Format as (XX) XXXXX-XXXX
    if (digits.length >= 7) {
      return `(${digits.slice(0, 2)}) ${digits.slice(2, 7)}-${digits.slice(7, 11)}`;
    } else if (digits.length >= 2) {
      return `(${digits.slice(0, 2)}) ${digits.slice(2)}`;
    } else if (digits.length > 0) {
      return `(${digits}`;
    }
    return digits;
  };

  const formatPhoneNumber = (value: string, country: 'US' | 'BR'): string => {
    return country === 'US' ? formatUSPhone(value) : formatBRPhone(value);
  };

  const handlePhoneChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const inputElement = e.target as HTMLInputElement;
    const newValue = inputElement.value;
    const currentValue = watch('phone') || '';
    
    // Check if user is deleting
    const isDeleting = newValue.length < currentValue.length;
    
    if (isDeleting) {
      // When deleting, remove the last digit from the current digits
      const currentDigits = currentValue.replace(/\D/g, '');
      const newDigits = currentDigits.slice(0, -1);
      const formatted = formatPhoneNumber(newDigits, data.country);
      setValue('phone', formatted);
    } else {
      // When adding, format the new value
      const formatted = formatPhoneNumber(newValue, data.country);
      setValue('phone', formatted);
    }
  };

  const onSubmit = async (formData: AddressFormData) => {
    setIsLoading(true);

    try {
      const token = localStorage.getItem('jwt_token');
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}${onboardingAddressUrl}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`,
        },
        body: JSON.stringify({
          ...formData,
          country: data.country, // Include country from previous step
        }),
      });

      const result = await response.json();

      if (result.success) {
        // Update store with form data
        updateData(formData);
        setStage('selling');
        
        // Navigate to next step
        router.push('/onboarding/selling');
      } else {
        setError('root', { message: result.message || 'Something went wrong' });
      }
    } catch (error) {
      setError('root', { message: 'Network error. Please try again.' });
    } finally {
      setIsLoading(false);
    }
  };

  const handleBack = () => {
    updateData(watch()); // Save current form data
    router.push('/onboarding/business');
  };

  // Show loading while checking auth
  if (checkingAuth) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <Loader2 className="animate-spin mx-auto h-8 w-8 text-blue-600" />
          <p className="mt-2 text-gray-600">Loading...</p>
        </div>
      </div>
    );
  }

  if (!data.country) {
    return null; // Prevent flash of content before redirect
  }

  const states = getStatesForCountry(data.country);
  const timezones = getTimezonesForCountry(data.country);

  const getPostalCodePlaceholder = (country: 'US' | 'BR') => {
    return country === 'US' ? '12345 or 12345-6789' : '12345-678';
  };

  const getPhonePlaceholder = (country: 'US' | 'BR') => {
    return country === 'US' ? '(123) 456-7890' : '(11) 98765-4321';
  };

  return (
    <OnboardingLayout step={1}>
      <div className="bg-white rounded-lg shadow-sm border border-gray-200">
        <div className="px-6 py-8">
          <div className="mb-8">
            <div className="flex items-center mb-4">
              <button
                onClick={handleBack}
                disabled={isLoading}
                className="mr-4 p-2 text-gray-400 hover:text-gray-600 transition-colors rounded-md hover:bg-gray-100 disabled:cursor-not-allowed"
              >
                <ArrowLeft className="h-5 w-5" />
              </button>
              <div>
                <h1 className="text-2xl font-bold text-gray-900">Business Address</h1>
                <p className="mt-2 text-sm text-gray-600">
                  Please provide your business address and contact information.
                </p>
              </div>
            </div>
            
            {/* Country Display */}
            <div className="bg-gray-50 p-4 rounded-md">
              <p className="text-sm text-gray-600">
                <span className="font-medium">Country:</span> {data.country === 'US' ? 'United States' : 'Brazil'}
                <span className="text-gray-500 ml-2"></span>
              </p>
            </div>
          </div>

          <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
            {/* Address Line 1 */}
            <div>
              <label htmlFor="line1" className="block text-sm font-medium text-gray-700 mb-2">
                Address Line 1 <span className="text-red-500">*</span>
              </label>
              <input
                {...register('line1')}
                type="text"
                disabled={isLoading}
                className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm disabled:bg-gray-100 disabled:cursor-not-allowed"
                placeholder="Street address"
              />
              {errors.line1 && (
                <p className="mt-1 text-sm text-red-600">{errors.line1.message}</p>
              )}
            </div>

            {/* Address Line 2 */}
            <div>
              <label htmlFor="line2" className="block text-sm font-medium text-gray-700 mb-2">
                Address Line 2 <span className="text-gray-500">(optional)</span>
              </label>
              <input
                {...register('line2')}
                type="text"
                disabled={isLoading}
                className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm disabled:bg-gray-100 disabled:cursor-not-allowed"
                placeholder="Apartment, suite, etc."
              />
            </div>

            {/* City, State, Postal Code */}
            <div className="space-y-4">
              <div>
                <label htmlFor="city" className="block text-sm font-medium text-gray-700 mb-2">
                  City <span className="text-red-500">*</span>
                </label>
                <input
                  {...register('city')}
                  type="text"
                  disabled={isLoading}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm disabled:bg-gray-100 disabled:cursor-not-allowed"
                  placeholder="City"
                />
                {errors.city && (
                  <p className="mt-1 text-sm text-red-600">{errors.city.message}</p>
                )}
              </div>

              <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
                <div>
                  <label htmlFor="state" className="block text-sm font-medium text-gray-700 mb-2">
                    State <span className="text-red-500">*</span>
                  </label>
                  <select
                    {...register('state')}
                    disabled={isLoading}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm disabled:bg-gray-100 disabled:cursor-not-allowed"
                  >
                    <option value="">Select state</option>
                    {states.map((state) => (
                      <option key={state.code} value={state.code}>
                        {state.name}
                      </option>
                    ))}
                  </select>
                  {errors.state && (
                    <p className="mt-1 text-sm text-red-600">{errors.state.message}</p>
                  )}
                </div>

                <div>
                  <label htmlFor="postalCode" className="block text-sm font-medium text-gray-700 mb-2">
                    Postal Code <span className="text-red-500">*</span>
                  </label>
                  <input
                    {...register('postalCode')}
                    type="text"
                    disabled={isLoading}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm disabled:bg-gray-100 disabled:cursor-not-allowed"
                    placeholder={getPostalCodePlaceholder(data.country)}
                  />
                  {errors.postalCode && (
                    <p className="mt-1 text-sm text-red-600">{errors.postalCode.message}</p>
                  )}
                </div>
              </div>
            </div>

            {/* Phone */}
            <div>
              <label htmlFor="phone" className="block text-sm font-medium text-gray-700 mb-2">
                Phone Number <span className="text-red-500">*</span>
              </label>
              <input
                {...register('phone')}
                type="tel"
                disabled={isLoading}
                onChange={handlePhoneChange}
                className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm disabled:bg-gray-100 disabled:cursor-not-allowed"
                placeholder={getPhonePlaceholder(data.country)}
              />
              {errors.phone && (
                <p className="mt-1 text-sm text-red-600">{errors.phone.message}</p>
              )}
            </div>

            {/* Timezone */}
            <div>
              <label htmlFor="timezone" className="block text-sm font-medium text-gray-700 mb-2">
                Timezone <span className="text-red-500">*</span>
              </label>
              <select
                {...register('timezone')}
                disabled={isLoading}
                className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm disabled:bg-gray-100 disabled:cursor-not-allowed"
              >
                <option value="">Select timezone</option>
                {timezones.map((tz) => (
                  <option key={tz.value} value={tz.value}>
                    {tz.label}
                  </option>
                ))}
              </select>
              {errors.timezone && (
                <p className="mt-1 text-sm text-red-600">{errors.timezone.message}</p>
              )}
            </div>

            {/* Error Message */}
            {errors.root && (
              <div className="rounded-md bg-red-50 p-4">
                <p className="text-sm text-red-600">{errors.root.message}</p>
              </div>
            )}

            {/* Navigation Buttons */}
            <div className="pt-4 flex flex-col gap-3 sm:flex-row sm:space-x-4 sm:gap-0">
              <button
                type="button"
                onClick={handleBack}
                disabled={isLoading}
                className="w-full sm:flex-1 py-3 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors disabled:cursor-not-allowed disabled:opacity-50"
              >
                Back
              </button>
              <button
                type="submit"
                disabled={isLoading}
                className="w-full sm:flex-1 flex justify-center py-3 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                {isLoading ? (
                  <>
                    <Loader2 className="animate-spin -ml-1 mr-3 h-5 w-5" />
                    Processing...
                  </>
                ) : (
                  'Continue'
                )}
              </button>
            </div>
          </form>
        </div>
      </div>
    </OnboardingLayout>
  );
}

app/onboarding/business/page.tsx
'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { zodResolver } from '@hookform/resolvers/zod';
import { useForm } from 'react-hook-form';
import { businessSchema, type BusinessFormData } from '@/lib/schemas/onboarding-schemas';
import { useOnboardingStore } from '@/lib/store/onboarding-store';
import { onboardingBusinessUrl } from '@/consts/paths';
import OnboardingLayout from '@/components/layouts/OnboardingLayout';
import { Loader2 } from 'lucide-react';

export default function BusinessPage() {
  const router = useRouter();
  const { data, updateData, setStage } = useOnboardingStore();
  const [isLoading, setIsLoading] = useState(false);
  const [checkingAuth, setCheckingAuth] = useState(true);

  // Check authentication and onboarding status
  useEffect(() => {
    const checkAuthAndOnboarding = async () => {
      const token = localStorage.getItem('jwt_token');
      
      if (!token) {
        router.replace('/signup');
        return;
      }

      try {
        const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/auth/me`, {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        });

        const result = await response.json();

        if (result.success) {
          // If user has completed onboarding, redirect to merchant
          if (result.data.user.onboardingComplete) {
            router.replace('/merchant');
            return;
          }
        } else {
          // Invalid token, redirect to signup
          localStorage.removeItem('jwt_token');
          localStorage.removeItem('user_data');
          router.replace('/signup');
          return;
        }
      } catch (error) {
        console.error('Auth check error:', error);
        // On error, redirect to signup
        localStorage.removeItem('jwt_token');
        localStorage.removeItem('user_data');
        router.replace('/signup');
        return;
      }

      setCheckingAuth(false);
    };

    checkAuthAndOnboarding();
  }, [router]);

  const {
    register,
    handleSubmit,
    formState: { errors },
    setError,
    setValue,
    watch,
  } = useForm<BusinessFormData>({
    resolver: zodResolver(businessSchema),
    defaultValues: {
      businessName: data.businessName || '',
      country: data.country || 'US',
      firstName: data.firstName || '',
      lastName: data.lastName || '',
    },
  });

  // Watch country changes to update currency display
  const country = watch('country');

  // Set initial values when component mounts
  useEffect(() => {
    if (data.businessName) setValue('businessName', data.businessName);
    if (data.country) setValue('country', data.country);
    if (data.firstName) setValue('firstName', data.firstName);
    if (data.lastName) setValue('lastName', data.lastName);
  }, [data, setValue]);

  const onSubmit = async (formData: BusinessFormData) => {
    setIsLoading(true);

    try {
      const token = localStorage.getItem('jwt_token');
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}${onboardingBusinessUrl}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`,
        },
        body: JSON.stringify(formData),
      });

      const result = await response.json();

      if (result.success) {
        // Update store with form data
        updateData(formData);
        setStage('address');
        
        // Navigate to next step
        router.push('/onboarding/address');
      } else {
        setError('root', { message: result.message || 'Something went wrong' });
      }
    } catch (error) {
      setError('root', { message: 'Network error. Please try again.' });
    } finally {
      setIsLoading(false);
    }
  };

  const getCurrencySymbol = (country: 'US' | 'BR') => {
    return country === 'US' ? 'USD ($)' : 'BRL (R$)';
  };

  // Show loading while checking auth
  if (checkingAuth) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <Loader2 className="animate-spin mx-auto h-8 w-8 text-blue-600" />
          <p className="mt-2 text-gray-600">Loading...</p>
        </div>
      </div>
    );
  }

  return (
    <OnboardingLayout step={0}>
      <div className="bg-white rounded-lg shadow-sm border border-gray-200">
        <div className="px-6 py-8">
          <div className="mb-8">
            <h1 className="text-2xl font-bold text-gray-900">Business Details</h1>
            <p className="mt-2 text-sm text-gray-600">
              Let's start with some basic information about your business.
            </p>
          </div>

          <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
            {/* Business Name */}
            <div>
              <label htmlFor="businessName" className="block text-sm font-medium text-gray-700 mb-2">
                Business Name <span className="text-red-500">*</span>
              </label>
              <input
                {...register('businessName')}
                type="text"
                disabled={isLoading}
                className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm disabled:bg-gray-100 disabled:cursor-not-allowed"
                placeholder="Enter your business name"
              />
              {errors.businessName && (
                <p className="mt-1 text-sm text-red-600">{errors.businessName.message}</p>
              )}
            </div>

            {/* Country Selection */}
            <div>
              <label htmlFor="country" className="block text-sm font-medium text-gray-700 mb-2">
                Country <span className="text-red-500">*</span>
              </label>
              <select
                {...register('country')}
                disabled={isLoading}
                className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm disabled:bg-gray-100 disabled:cursor-not-allowed"
              >
                <option value="US">United States</option>
                <option value="BR">Brazil</option>
              </select>
              <p className="mt-1 text-xs text-gray-500">
                Currency will be set to {getCurrencySymbol(country)}
              </p>
              {errors.country && (
                <p className="mt-1 text-sm text-red-600">{errors.country.message}</p>
              )}
            </div>

            {/* Owner Information */}
            <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
              <div>
                <label htmlFor="firstName" className="block text-sm font-medium text-gray-700 mb-2">
                  First Name <span className="text-red-500">*</span>
                </label>
                <input
                  {...register('firstName')}
                  type="text"
                  disabled={isLoading}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm disabled:bg-gray-100 disabled:cursor-not-allowed"
                  placeholder="First name"
                />
                {errors.firstName && (
                  <p className="mt-1 text-sm text-red-600">{errors.firstName.message}</p>
                )}
              </div>

              <div>
                <label htmlFor="lastName" className="block text-sm font-medium text-gray-700 mb-2">
                  Last Name <span className="text-red-500">*</span>
                </label>
                <input
                  {...register('lastName')}
                  type="text"
                  disabled={isLoading}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm disabled:bg-gray-100 disabled:cursor-not-allowed"
                  placeholder="Last name"
                />
                {errors.lastName && (
                  <p className="mt-1 text-sm text-red-600">{errors.lastName.message}</p>
                )}
              </div>
            </div>

            {/* Error Message */}
            {errors.root && (
              <div className="rounded-md bg-red-50 p-4">
                <p className="text-sm text-red-600">{errors.root.message}</p>
              </div>
            )}

            {/* Submit Button */}
            <div className="pt-4">
              <button
                type="submit"
                disabled={isLoading}
                className="w-full flex justify-center py-3 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                {isLoading ? (
                  <>
                    <Loader2 className="animate-spin -ml-1 mr-3 h-5 w-5" />
                    Processing...
                  </>
                ) : (
                  'Continue'
                )}
              </button>
            </div>
          </form>
        </div>
      </div>
    </OnboardingLayout>
  );
}

app/onboarding/layout.tsx
// app/onboarding/layout.tsx
import React, { ReactNode, Suspense } from 'react';
// No need to import OnboardingLayout here as it's applied through page structure
// Forcing Suspense boundary for child pages if they use useSearchParams
export default function Layout({ children }: { children: ReactNode }) {
  return <Suspense>{children}</Suspense>;
}

app/onboarding/selling/page.tsx
'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { zodResolver } from '@hookform/resolvers/zod';
import { useForm } from 'react-hook-form';
import { sellingSchema, type SellingFormData } from '@/lib/schemas/onboarding-schemas';
import { useOnboardingStore } from '@/lib/store/onboarding-store';
import { onboardingSellingUrl } from '@/consts/paths';
import OnboardingLayout from '@/components/layouts/OnboardingLayout';
import { Loader2, ArrowLeft, Store, Code, CheckCircle } from 'lucide-react';
import Image from 'next/image';

const integrationLabels = {
  shopify: 'Shopify',
  woocommerce: 'WooCommerce',
  wordpress: 'WordPress',
  custom: 'Custom API',
};

const integrationDescriptions = {
  shopify: 'Integrate with your Shopify store',
  woocommerce: 'Integrate with your WooCommerce store',
  wordpress: 'Integrate with your WordPress site',
  custom: 'Custom API integration',
};

// Integration icons/logos using public folder paths
const integrationIcons = {
  shopify: '/integration/shopify.webp',
  woocommerce: '/integration/woocommerce.webp',
  wordpress: '/integration/wordpress.webp',
  custom: 'https://brandeps.com/icon-download/A/Api-icon-vector-03.svg',
};

export default function SellingPage() {
  const router = useRouter();
  const { data, updateData, setStage, clearData } = useOnboardingStore();
  const [isLoading, setIsLoading] = useState(false);

  // Redirect if previous steps not completed
  useEffect(() => {
    if (!data.businessName || !data.country || !data.line1) {
      router.replace('/onboarding/business');
      return;
    }
  }, [data, router]);

  const {
    register,
    handleSubmit,
    formState: { errors },
    setError,
    setValue,
    watch,
  } = useForm<SellingFormData>({
    resolver: zodResolver(sellingSchema),
    defaultValues: {
      sellingMethod: data.sellingMethod || 'hosted_store',
      integrationTypes: data.integrationTypes || [],
    },
  });

  const sellingMethod = watch('sellingMethod');
  const integrationTypes = watch('integrationTypes') || [];

  // Set initial values when component mounts
  useEffect(() => {
    if (data.sellingMethod) setValue('sellingMethod', data.sellingMethod);
    if (data.integrationTypes) setValue('integrationTypes', data.integrationTypes);
  }, [data, setValue]);

  const onSubmit = async (formData: SellingFormData) => {
    setIsLoading(true);

    try {
      const token = localStorage.getItem('jwt_token');
      if (!token) {
        router.push('/signup');
        return;
      }

      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}${onboardingSellingUrl}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`,
        },
        body: JSON.stringify(formData),
      });

      const result = await response.json();

      if (result.success) {
        // Update store with form data
        updateData(formData);
        setStage('complete');
        
        // Clear the onboarding storage since it's complete
        clearData();
        
        // Update local storage with completion status
        if (result.data && result.data.user) {
          localStorage.setItem('user_data', JSON.stringify(result.data.user));
        }
        
        // Navigate to merchant dashboard
        router.push('/merchant');
      } else {
        // If the API returns 401, the token might be invalid
        if (response.status === 401) {
          localStorage.removeItem('jwt_token');
          localStorage.removeItem('user_data');
          localStorage.removeItem('onboarding-storage');
          router.push('/signup');
          return;
        }
        setError('root', { message: result.message || 'Something went wrong' });
      }
    } catch (error) {
      console.error('Onboarding error:', error);
      setError('root', { message: 'Network error. Please try again.' });
    } finally {
      setIsLoading(false);
    }
  };

  const handleBack = () => {
    updateData(watch()); // Save current form data
    router.push('/onboarding/address');
  };

  const handleSellingMethodChange = (method: 'hosted_store' | 'integration') => {
    setValue('sellingMethod', method);
    if (method === 'hosted_store') {
      setValue('integrationTypes', []);
    }
  };

  const handleIntegrationTypeChange = (type: string, checked: boolean) => {
    const current = integrationTypes || [];
    const updated = checked
      ? [...current, type]
      : current.filter((t) => t !== type);
    setValue('integrationTypes', updated);
  };

  if (!data.businessName) {
    return null; // Prevent flash of content before redirect
  }

  return (
    <OnboardingLayout step={2}>
      <div className="bg-white rounded-lg shadow-sm border border-gray-200">
        <div className="px-6 py-8">
          <div className="mb-8">
            <div className="flex items-center mb-4">
              <button
                onClick={handleBack}
                disabled={isLoading}
                className="mr-4 p-2 text-gray-400 hover:text-gray-600 transition-colors rounded-md hover:bg-gray-100 disabled:cursor-not-allowed"
              >
                <ArrowLeft className="h-5 w-5" />
              </button>
              <div>
                <h1 className="text-2xl font-bold text-gray-900">Selling Method</h1>
                <p className="mt-2 text-sm text-gray-600">
                  How would you like to start accepting payments?
                </p>
              </div>
            </div>
          </div>

          <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
            {/* Selling Method Selection */}
            <div className="space-y-4">
              <label className="block text-sm font-medium text-gray-700">
                Choose your selling method <span className="text-red-500">*</span>
              </label>

              {/* Hosted Store Option */}
              <div
                className={`relative rounded-lg border-2 p-4 cursor-pointer transition-all ${
                  sellingMethod === 'hosted_store'
                    ? 'border-blue-500 bg-blue-50'
                    : 'border-gray-200 hover:border-gray-300'
                } ${isLoading ? 'cursor-not-allowed opacity-50' : ''}`}
                onClick={() => !isLoading && handleSellingMethodChange('hosted_store')}
              >
                <div className="flex items-start">
                  <input
                    {...register('sellingMethod')}
                    type="radio"
                    value="hosted_store"
                    disabled={isLoading}
                    className="mt-1 mr-3 h-4 w-4 text-blue-600 border-gray-300 focus:ring-blue-500 disabled:cursor-not-allowed"
                  />
                  <div className="flex-1">
                    <div className="flex items-center">
                      <Store className="h-6 w-6 text-blue-600 mr-3" />
                      <h3 className="text-lg font-medium text-gray-900">Hosted Store</h3>
                    </div>
                    <p className="mt-2 text-sm text-gray-600">
                      Get a ready-to-use online store hosted by ArkusPay. Perfect for getting started quickly without technical setup.
                    </p>
                    {sellingMethod === 'hosted_store' && (
                      <div className="mt-3 flex items-center text-sm text-green-600">
                        <CheckCircle className="h-4 w-4 mr-1" />
                        No technical knowledge required
                      </div>
                    )}
                  </div>
                </div>
              </div>

              {/* Integration Option */}
              <div
                className={`relative rounded-lg border-2 p-4 cursor-pointer transition-all ${
                  sellingMethod === 'integration'
                    ? 'border-blue-500 bg-blue-50'
                    : 'border-gray-200 hover:border-gray-300'
                } ${isLoading ? 'cursor-not-allowed opacity-50' : ''}`}
                onClick={() => !isLoading && handleSellingMethodChange('integration')}
              >
                <div className="flex items-start">
                  <input
                    {...register('sellingMethod')}
                    type="radio"
                    value="integration"
                    disabled={isLoading}
                    className="mt-1 mr-3 h-4 w-4 text-blue-600 border-gray-300 focus:ring-blue-500 disabled:cursor-not-allowed"
                  />
                  <div className="flex-1">
                    <div className="flex items-center">
                      <Code className="h-6 w-6 text-blue-600 mr-3" />
                      <h3 className="text-lg font-medium text-gray-900">Integration</h3>
                    </div>
                    <p className="mt-2 text-sm text-gray-600">
                      Integrate ArkusPay with your existing website, ecommerce platform, or custom application.
                    </p>
                    {sellingMethod === 'integration' && (
                      <div className="mt-3 flex items-center text-sm text-green-600">
                        <CheckCircle className="h-4 w-4 mr-1" />
                        Flexible integration options
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </div>

            {/* Integration Types (only shown when integration is selected) */}
            {sellingMethod === 'integration' && (
              <div className="space-y-4">
                <label className="block text-sm font-medium text-gray-700">
                  Select integration types <span className="text-red-500">*</span>
                </label>
                <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
                  {Object.entries(integrationLabels).map(([key, label]) => (
                    <div
                      key={key}
                      className={`relative rounded-lg border-2 p-4 cursor-pointer transition-all ${
                        integrationTypes.includes(key)
                          ? 'border-blue-500 bg-blue-50'
                          : 'border-gray-200 hover:border-gray-300'
                      } ${isLoading ? 'cursor-not-allowed opacity-50' : ''}`}
                      onClick={() => 
                        !isLoading && handleIntegrationTypeChange(key, !integrationTypes.includes(key))
                      }
                    >
                      <div className="flex items-start">
                        <input
                          type="checkbox"
                          checked={integrationTypes.includes(key)}
                          onChange={(e) => handleIntegrationTypeChange(key, e.target.checked)}
                          disabled={isLoading}
                          className="mt-1 mr-3 h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500 disabled:cursor-not-allowed"
                        />
                        <div className="flex-1">
                          <div className="flex items-center">
                            <div className="w-6 h-6 mr-3 flex items-center justify-center">
                              {key === 'custom' ? (
                                <img
                                  src={integrationIcons[key as keyof typeof integrationIcons]}
                                  alt={`${label} logo`}
                                  className="w-6 h-6 object-contain"
                                />
                              ) : (
                                <Image
                                  src={integrationIcons[key as keyof typeof integrationIcons]}
                                  alt={`${label} logo`}
                                  width={24}
                                  height={24}
                                  className="object-contain"
                                />
                              )}
                            </div>
                            <h4 className="font-medium text-gray-900">{label}</h4>
                          </div>
                          <p className="mt-1 text-sm text-gray-600">
                            {integrationDescriptions[key as keyof typeof integrationDescriptions]}
                          </p>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
                {errors.integrationTypes && (
                  <p className="text-sm text-red-600">{errors.integrationTypes.message}</p>
                )}
              </div>
            )}

            {/* Error Message */}
            {errors.root && (
              <div className="rounded-md bg-red-50 p-4">
                <p className="text-sm text-red-600">{errors.root.message}</p>
              </div>
            )}

            {/* Navigation Buttons */}
            <div className="pt-4 flex flex-col gap-3 sm:flex-row sm:space-x-4 sm:gap-0">
              <button
                type="button"
                onClick={handleBack}
                disabled={isLoading}
                className="w-full sm:flex-1 py-3 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors disabled:cursor-not-allowed disabled:opacity-50"
              >
                Back
              </button>
              <button
                type="submit"
                disabled={isLoading}
                className="w-full sm:flex-1 flex justify-center py-3 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                {isLoading ? (
                  <>
                    <Loader2 className="animate-spin -ml-1 mr-3 h-5 w-5" />
                    Finalizing...
                  </>
                ) : (
                  'Complete Setup'
                )}
              </button>
            </div>
          </form>
        </div>
      </div>
    </OnboardingLayout>
  );
}

app/page.tsx
import { MainLayout } from '@/components/layouts';

export default function Home() {
  return (
    <MainLayout>
      <main className="flex flex-col gap-[32px] row-start-2 items-center justify-center px-4 py-16 sm:px-6 lg:px-8">
        <div className="flex flex-col gap-[32px] items-center justify-center">
          <h1 className="text-4xl font-bold">Welcome to ArkusPay!</h1>
          <p className="text-lg text-center">
            We provide easy and simple ways to pay with credit cards, cryptocurrency, and bank transfers.
          </p>
        </div>
      </main>
    </MainLayout>
  );
}


app/signin/page.tsx
'use client';

import { FormEvent, useEffect, useState } from 'react';
import Link from 'next/link';
import { Eye, EyeOff } from 'lucide-react';
import { MainLayout } from '@/components/layouts';
import { useRouter } from 'next/navigation';
import { API_BASE_URL, API_ENDPOINTS } from '@/consts/api';

const SigninPage = () => {
  const router = useRouter();

  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [rememberMe, setRememberMe] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  // Check if user is already logged in
  useEffect(() => {
    const token = localStorage.getItem('jwt_token');
    if (token) {
      // Check if it's a valid token by calling the me endpoint
      fetch(`${API_BASE_URL}${API_ENDPOINTS.AUTH.ME}`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          // User is already logged in, redirect to dashboard
          router.push('/merchant');
        } else {
          // Invalid token, remove it
          localStorage.removeItem('jwt_token');
          localStorage.removeItem('user_data');
        }
      })
      .catch(error => {
        console.error('Error checking auth:', error);
        localStorage.removeItem('jwt_token');
        localStorage.removeItem('user_data');
      });
    }
  }, [router]);

  const handleSubmit = async (e: FormEvent) => {
    e.preventDefault();
    setError('');

    if (!email) {
      setError('Email field cannot be empty');
      return;
    }

    if (!password) {
      setError('Password field cannot be empty');
      return;
    }

    setLoading(true);

    try {
      console.log('Attempting to connect to:', `${API_BASE_URL}${API_ENDPOINTS.AUTH.LOGIN}`);
      
      const response = await fetch(`${API_BASE_URL}${API_ENDPOINTS.AUTH.LOGIN}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify({ email, password })
      });

      console.log('Response status:', response.status);
      console.log('Response headers:', response.headers);

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      console.log('Response data:', data);

      if (data.success) {
        // Store token and user data
        localStorage.setItem('jwt_token', data.data.token);
        localStorage.setItem('user_data', JSON.stringify(data.data.user));
        
        // Redirect based on user role
        if (data.data.user.role === 'admin') {
          router.push('/admin/index.html');
        } else {
          // Check for redirect parameter
          const urlParams = new URLSearchParams(window.location.search);
          const redirect = urlParams.get('redirect');
          if (redirect) {
            router.push(redirect);
          } else {
            router.push('/merchant');
          }
        }
      } else {
        setError(data.message || 'Login failed');
      }
    } catch (error) {
      console.error('Login error:', error);
      
      // More specific error messages
      if (error instanceof TypeError && error.message === 'Failed to fetch') {
        setError('Cannot connect to server. Please check if the backend is running on http://localhost:5000');
      } else if (error instanceof Error) {
        setError(`Login failed: ${error.message}`);
      } else {
        setError('Login failed: Network error');
      }
    } finally {
      setLoading(false);
    }
  };

  return (
    <MainLayout>
      <div className="flex flex-col justify-center py-12 sm:px-6 lg:px-8">
        <div className="mt-8 sm:mx-auto sm:w-full sm:max-w-lg">
          <div className="bg-white py-8 px-4 shadow rounded-2xl sm:px-10 border-[#D8D7D4] border-[1px]">
            <form className="space-y-6" onSubmit={handleSubmit}>
              <div className="sm:mx-auto sm:w-full sm:max-w-lg">
                <h1 className="text-center text-3xl font-bold text-gray-900 sm:text-4xl">Sign in to your account</h1>
              </div>

              {error && (
                <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded relative">
                  {error}
                </div>
              )}

              <div>
                <label htmlFor="email" className="block text-base font-medium text-gray-700">
                  Email
                </label>
                <div className="mt-1">
                  <input
                    id="email"
                    name="email"
                    type="email"
                    autoComplete="email"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    placeholder="Enter your email address"
                    className="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-base"
                    disabled={loading}
                  />
                </div>
              </div>

              <div>
                <label htmlFor="password" className="block text-base font-medium text-gray-700">
                  Password
                </label>
                <div className="mt-1 relative">
                  <input
                    id="password"
                    name="password"
                    type={showPassword ? 'text' : 'password'}
                    autoComplete="current-password"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    placeholder="Password"
                    className="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-base"
                    disabled={loading}
                  />
                  <button
                    type="button"
                    onClick={() => setShowPassword(!showPassword)}
                    className="absolute inset-y-0 right-0 pr-3 flex items-center text-[#03053D] cursor-pointer hover:text-[#20254C]"
                    aria-label={showPassword ? 'Hide password' : 'Show password'}
                  >
                    {showPassword ? <EyeOff className="h-5 w-5" /> : <Eye className="h-5 w-5" />}
                  </button>
                </div>
              </div>

              <div className="flex items-center justify-between">
                <div className="flex items-center">
                  <label className="relative flex items-center cursor-pointer">
                    <input
                      id="remember-me"
                      name="remember-me"
                      type="checkbox"
                      checked={rememberMe}
                      onChange={(e) => setRememberMe(e.target.checked)}
                      className="
                      appearance-none
                      h-4 w-4
                      border-2 border-gray-300
                      rounded
                      cursor-pointer
                      peer
                      checked:border-black
                      checked:bg-black"
                      disabled={loading}
                    />
                    <span
                      className="
                      absolute
                      left-1/2 top-1/2
                      -translate-x-1/2 -translate-y-1/2
                      text-white
                      opacity-0
                      peer-checked:opacity-100"
                    >
                      <svg width="12" height="9" viewBox="0 0 12 9" fill="none">
                        <path d="M1 4.5L4.5 8L11 1" stroke="currentColor" strokeWidth="2" strokeLinecap="round" />
                      </svg>
                    </span>
                  </label>
                  <label htmlFor="remember-me" className="ml-2 block text-sm text-gray-900">
                    Remember me on this device
                  </label>
                </div>

                <div className="text-sm">
                  <Link href="/forgot-password" className="font-medium text-[#DE0707] hover:text-[#DE4040]">
                    Forgot your password?
                  </Link>
                </div>
              </div>

              <div>
                <button
                  type="submit"
                  disabled={loading}
                  className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-black cursor-pointer hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  {loading ? (
                    <span className="flex items-center">
                      <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                      Signing in...
                    </span>
                  ) : (
                    'Sign In'
                  )}
                </button>
              </div>
            </form>

            <div className="mt-12">
              <div className="relative">
                <div className="relative flex justify-center text-sm">
                  <span className="px-2 bg-white text-gray-500">New to ArkusPay?</span>
                  <Link
                    href="/signup"
                    className="flex justify-center items-center text-sm font-medium text-gray-800 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                  >
                    Create account
                  </Link>
                </div>
              </div>
            </div>
          </div>
        </div>

        <footer className="mt-20 text-center text-sm text-gray-500">© ArkusPay | Privacy & terms</footer>
      </div>
    </MainLayout>
  );
};

export default SigninPage;

app/signup/page.tsx
'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import Image from 'next/image';
import { zodResolver } from '@hookform/resolvers/zod';
import { useForm } from 'react-hook-form';
import { signupSchema, type SignupFormData } from '@/lib/schemas/onboarding-schemas';
import { useOnboardingStore } from '@/lib/store/onboarding-store';
import { signupUrl } from '@/consts/paths';
import logoImg from '@/assets/images/logo.svg';
import { Loader2, Eye, EyeOff, Shield, Zap, Globe, DollarSign, CheckCircle, TrendingUp } from 'lucide-react';

export default function SignupPage() {
  const router = useRouter();
  const { setStage, clearData } = useOnboardingStore();
  const [isLoading, setIsLoading] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);

  // Check if user is already logged in
  useEffect(() => {
    const token = localStorage.getItem('jwt_token');
    if (token) {
      // Validate token by checking user status
      fetch(`${process.env.NEXT_PUBLIC_API_URL}/auth/me`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      })
      .then(res => res.json())
      .then(result => {
        if (result.success) {
          // User is authenticated, check onboarding status
          if (result.data.user.onboardingComplete) {
            router.replace('/merchant');
          } else {
            // User exists but onboarding not complete, go to onboarding
            router.replace('/onboarding/business');
          }
        } else {
          // Token is invalid, remove it
          localStorage.removeItem('jwt_token');
          localStorage.removeItem('user_data');
          document.cookie = 'token=; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT;';
        }
      })
      .catch(() => {
        // If error, remove invalid token and let them stay on signup
        localStorage.removeItem('jwt_token');
        localStorage.removeItem('user_data');
        document.cookie = 'token=; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT;';
      });
    }
  }, [router]);

  const {
    register,
    handleSubmit,
    formState: { errors },
    setError,
  } = useForm<SignupFormData>({
    resolver: zodResolver(signupSchema),
  });

  const onSubmit = async (data: SignupFormData) => {
    setIsLoading(true);
    
    try {
      // Clear any existing onboarding data before starting fresh
      clearData();
      
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}${signupUrl}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          email: data.email,
          password: data.password,
        }),
      });

      const result = await response.json();

      if (result.success) {
        // Store the token in both localStorage and as a cookie for middleware
        localStorage.setItem('jwt_token', result.data.token);
        localStorage.setItem('user_data', JSON.stringify(result.data.user));
        
        // Set cookie for middleware
        document.cookie = `token=${result.data.token}; path=/; max-age=86400; secure; samesite=lax`;
        
        // Set onboarding stage to business (first step after signup)
        setStage('business');
        
        // Redirect to onboarding
        router.push('/onboarding/business');
      } else {
        // Handle specific errors
        if (result.message?.includes('email')) {
          setError('email', { message: result.message });
        } else {
          setError('root', { message: result.message || 'Something went wrong' });
        }
      }
    } catch (error) {
      setError('root', { message: 'Network error. Please try again.' });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-white">
      <div className="flex min-h-screen">
        {/* Left Content Section */}
        <div className="hidden lg:flex lg:w-1/2 bg-gradient-to-br from-slate-50 to-blue-50 p-12 flex-col justify-center">
          <div className="max-w-md">
            <div className="mb-8">
              <Image src={logoImg} alt="ArkusPay" className="h-10 w-auto mb-6" />
              <h1 className="text-3xl font-bold text-gray-900 mb-4">
                Accept payments with confidence
              </h1>
              <p className="text-lg text-gray-600">
                Join thousands of merchants who trust ArkusPay for secure, fast, and reliable payment processing.
              </p>
            </div>

            <div className="space-y-6">
              <div className="flex items-start space-x-4">
                <div className="flex-shrink-0">
                  <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
                    <Shield className="w-5 h-5 text-blue-600" />
                  </div>
                </div>
                <div>
                  <h3 className="font-semibold text-gray-900 mb-1">Advanced Security</h3>
                  <p className="text-gray-600 text-sm">
                    Bank-level encryption and fraud protection to keep your transactions secure.
                  </p>
                </div>
              </div>

              <div className="flex items-start space-x-4">
                <div className="flex-shrink-0">
                  <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
                    <Zap className="w-5 h-5 text-blue-600" />
                  </div>
                </div>
                <div>
                  <h3 className="font-semibold text-gray-900 mb-1">Lightning Fast Setup</h3>
                  <p className="text-gray-600 text-sm">
                    Get your payment system up and running in minutes, not hours.
                  </p>
                </div>
              </div>

              <div className="flex items-start space-x-4">
                <div className="flex-shrink-0">
                  <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
                    <Globe className="w-5 h-5 text-blue-600" />
                  </div>
                </div>
                <div>
                  <h3 className="font-semibold text-gray-900 mb-1">Global Reach</h3>
                  <p className="text-gray-600 text-sm">
                    Accept payments from customers worldwide with multi-currency support.
                  </p>
                </div>
              </div>

              <div className="flex items-start space-x-4">
                <div className="flex-shrink-0">
                  <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
                    <DollarSign className="w-5 h-5 text-blue-600" />
                  </div>
                </div>
                <div>
                  <h3 className="font-semibold text-gray-900 mb-1">Competitive Rates</h3>
                  <p className="text-gray-600 text-sm">
                    Transparent pricing with no hidden fees and competitive transaction rates.
                  </p>
                </div>
              </div>
            </div>

            <div className="mt-12 p-6 bg-white rounded-lg shadow-sm border border-gray-100">
              <div className="flex items-center space-x-3 mb-3">
                <CheckCircle className="w-5 h-5 text-green-500" />
                <span className="text-sm font-medium text-gray-900">Trusted by 10,000+ merchants</span>
              </div>
              <div className="flex items-center space-x-3">
                <TrendingUp className="w-5 h-5 text-green-500" />
                <span className="text-sm font-medium text-gray-900">99.9% uptime guarantee</span>
              </div>
            </div>
          </div>
        </div>

        {/* Right Form Section */}
        <div className="flex-1 flex flex-col justify-center px-4 sm:px-6 lg:px-8">
          {/* Mobile Logo */}
          <div className="lg:hidden text-center mb-8">
            <Image src={logoImg} alt="ArkusPay" className="h-10 w-auto mx-auto" />
          </div>

          <div className="w-full max-w-md mx-auto">
            <div className="text-center mb-8">
              <h2 className="text-3xl font-bold text-gray-900">
                Create your account
              </h2>
              <p className="mt-3 text-gray-600">
                Start accepting payments in minutes
              </p>
            </div>

            <div className="bg-white">
              <form className="space-y-6" onSubmit={handleSubmit(onSubmit)}>
                <div>
                  <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-2">
                    Email address
                  </label>
                  <input
                    {...register('email')}
                    type="email"
                    autoComplete="email"
                    disabled={isLoading}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors disabled:bg-gray-100 disabled:cursor-not-allowed"
                    placeholder="Enter your email"
                  />
                  {errors.email && (
                    <p className="mt-2 text-sm text-red-600">{errors.email.message}</p>
                  )}
                </div>

                <div>
                  <label htmlFor="password" className="block text-sm font-medium text-gray-700 mb-2">
                    Password
                  </label>
                  <div className="relative">
                    <input
                      {...register('password')}
                      type={showPassword ? 'text' : 'password'}
                      autoComplete="new-password"
                      disabled={isLoading}
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 pr-12 transition-colors disabled:bg-gray-100 disabled:cursor-not-allowed"
                      placeholder="Enter your password"
                    />
                    <button
                      type="button"
                      disabled={isLoading}
                      className="absolute inset-y-0 right-0 pr-4 flex items-center disabled:cursor-not-allowed"
                      onClick={() => setShowPassword(!showPassword)}
                    >
                      {showPassword ? (
                        <EyeOff className="h-5 w-5 text-gray-400 hover:text-gray-600" />
                      ) : (
                        <Eye className="h-5 w-5 text-gray-400 hover:text-gray-600" />
                      )}
                    </button>
                  </div>
                  {errors.password && (
                    <p className="mt-2 text-sm text-red-600">{errors.password.message}</p>
                  )}
                </div>

                <div>
                  <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700 mb-2">
                    Confirm Password
                  </label>
                  <div className="relative">
                    <input
                      {...register('confirmPassword')}
                      type={showConfirmPassword ? 'text' : 'password'}
                      autoComplete="new-password"
                      disabled={isLoading}
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 pr-12 transition-colors disabled:bg-gray-100 disabled:cursor-not-allowed"
                      placeholder="Confirm your password"
                    />
                    <button
                      type="button"
                      disabled={isLoading}
                      className="absolute inset-y-0 right-0 pr-4 flex items-center disabled:cursor-not-allowed"
                      onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                    >
                      {showConfirmPassword ? (
                        <EyeOff className="h-5 w-5 text-gray-400 hover:text-gray-600" />
                      ) : (
                        <Eye className="h-5 w-5 text-gray-400 hover:text-gray-600" />
                      )}
                    </button>
                  </div>
                  {errors.confirmPassword && (
                    <p className="mt-2 text-sm text-red-600">{errors.confirmPassword.message}</p>
                  )}
                </div>

                {errors.root && (
                  <div className="rounded-lg bg-red-50 border border-red-200 p-4">
                    <p className="text-sm text-red-600">{errors.root.message}</p>
                  </div>
                )}

                <div>
                  <button
                    type="submit"
                    disabled={isLoading}
                    className="w-full flex justify-center py-3 px-4 border border-transparent rounded-lg shadow-sm text-base font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                  >
                    {isLoading ? (
                      <div className="flex items-center">
                        <Loader2 className="animate-spin -ml-1 mr-3 h-5 w-5" />
                        Creating account...
                      </div>
                    ) : (
                      'Create account'
                    )}
                  </button>
                </div>

                <div className="text-center">
                  <p className="text-sm text-gray-600">
                    Already have an account?{' '}
                    <Link href="/signin" className="font-medium text-blue-600 hover:text-blue-500 transition-colors">
                      Sign in
                    </Link>
                  </p>
                </div>
              </form>
            </div>

            {/* Mobile Benefits */}
            <div className="lg:hidden mt-8 pt-8 border-t border-gray-200">
              <div className="grid grid-cols-2 gap-4 text-center">
                <div>
                  <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mx-auto mb-2">
                    <Shield className="w-6 h-6 text-blue-600" />
                  </div>
                  <p className="text-xs text-gray-600">Secure payments</p>
                </div>
                <div>
                  <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mx-auto mb-2">
                    <Zap className="w-6 h-6 text-blue-600" />
                  </div>
                  <p className="text-xs text-gray-600">Fast setup</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

app/toastify.css
/* Import react-toastify styles */
@import 'react-toastify/dist/ReactToastify.css';

/* Custom toast styles */
.Toastify__toast {
  border-radius: 8px;
  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
}

.Toastify__toast--success {
  background-color: #10b981;
}

.Toastify__toast--error {
  background-color: #ef4444;
}

.Toastify__toast--warning {
  background-color: #f59e0b;
}

.Toastify__toast--info {
  background-color: #3b82f6;
}

.Toastify__progress-bar {
  background-color: rgba(255, 255, 255, 0.7);
}

/* Responsive adjustments */
@media (max-width: 480px) {
  .Toastify__toast-container {
    width: 100vw;
    padding: 0;
    left: 0;
    margin: 0;
  }
  
  .Toastify__toast {
    margin-bottom: 0;
    border-radius: 0;
  }
}

assets/styles/dashboard.css


components/layouts/DashLayout.tsx
'use client';

import { ReactNode, useEffect, useRef, useState } from 'react';
import Link from 'next/link';
import { Bell, ChevronDown } from 'lucide-react';
import { SidebarMerchant } from '../widgets';
import { useApiRequest } from '@/hooks';
import { API_ENDPOINTS } from '@/consts/api';
import { Notification } from '@/types';
import { mockNotiData } from '@/mock';
import Image from 'next/image';
import { useRouter } from 'next/navigation';

const DashLayout: React.FC<{ children: ReactNode; titleArea: ReactNode; tools?: ReactNode }> = ({
  children,
  titleArea,
  tools,
}) => {
  const router = useRouter();
  const [userInfo, setUserInfo] = useState<any>(null);
  const [merchantInfo, setMerchantInfo] = useState<any>(null);
  const [notiShow, setNotiShow] = useState(false);
  const [profileDropdown, setProfileDropdown] = useState(false);
  const [loading, setLoading] = useState(true);
  const [isClient, setIsClient] = useState(false);
  const ref = useRef<HTMLDivElement>(null);
  const profileRef = useRef<HTMLDivElement>(null);
  const [notiList, setNotiList] = useState<Notification[]>([] as Notification[]);

  // Check if we're on the client side
  useEffect(() => {
    setIsClient(true);
  }, []);

  // Fetch user profile
  useEffect(() => {
    if (isClient) {
      fetchUserProfile();
    }
  }, [isClient]);

  const fetchUserProfile = async () => {
    if (typeof window === 'undefined') return;
    
    try {
      const token = localStorage.getItem('jwt_token');
      if (!token) {
        router.push('/signin');
        return;
      }

      // Call the auth/me endpoint with correct URL
      const baseUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:5000/api';
      const response = await fetch(`${baseUrl}${API_ENDPOINTS.AUTH.ME}`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (response.status === 401) {
        localStorage.removeItem('jwt_token');
        localStorage.removeItem('user_data');
        router.push('/signin');
        return;
      }

      if (response.ok) {
        const result = await response.json();
        if (result.success) {
          // Extract user and merchant from the response
          setUserInfo(result.data.user);
          setMerchantInfo(result.data.merchant);
        }
      }
    } catch (error) {
      console.error('Error fetching user profile:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleLogout = async () => {
    if (typeof window === 'undefined') return;
    
    try {
      // Just clear local storage and redirect
      localStorage.removeItem('jwt_token');
      localStorage.removeItem('user_data');
      router.push('/signin');
    } catch (error) {
      console.error('Error during logout:', error);
      router.push('/signin');
    }
  };

  const getInitials = (businessName: string) => {
    if (!businessName) return 'B';
    const words = businessName.split(' ');
    if (words.length >= 2) {
      return (words[0].charAt(0) + words[1].charAt(0)).toUpperCase();
    }
    return businessName.substring(0, 2).toUpperCase();
  };

  const {
    response: notiResponse,
    error: notiError,
    loading: notiLoading,
    sendRequest: sendNotiRequest,
  } = useApiRequest({
    endpoint: '/notifications',
    headers: {
      Accept: 'application/json',
      Authorization: isClient ? `Bearer ${localStorage.getItem('jwt_token') || ''}` : '',
    },
    method: 'GET',
  });

  // Close dropdown on outside click
  useEffect(() => {
    const handleClickOutside = (e: MouseEvent) => {
      if (ref.current && !ref.current.contains(e.target as Node)) {
        setNotiShow(false);
      }
      if (profileRef.current && !profileRef.current.contains(e.target as Node)) {
        setProfileDropdown(false);
      }
    };
    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  useEffect(() => {
    if (isClient) {
      sendNotiRequest();
    }
  }, [isClient]);

  useEffect(() => {
    if (notiError) {
      setNotiList(mockNotiData);
    }
  }, [notiError]);

  useEffect(() => {
    if (notiResponse) {
      setNotiList(notiResponse.data);
    }
  }, [notiResponse]);

  if (!isClient || loading) {
    return (
      <div className="flex min-h-screen bg-gray-100 text-gray-900">
        <SidebarMerchant />
        <main className="flex-1 p-4 md:p-8 transition-all space-y-6 md:ml-64 transform duration-300 ease-in-out max-w-full md:max-w-[calc(100%-16rem)]">
          <div className="flex items-center justify-center h-64">
            <div className="text-gray-500">Loading...</div>
          </div>
        </main>
      </div>
    );
  }

  return (
    <div className="flex min-h-screen bg-gray-100 text-gray-900">
      {/* Sidebar */}
      <SidebarMerchant />
      {/* Main Content */}
      <main className="flex-1 p-4 md:p-8 transition-all space-y-6 md:ml-64 transform duration-300 ease-in-out max-w-full md:max-w-[calc(100%-16rem)]">
        <div className="flex justify-between items-center ml-12 md:ml-0 h-10">
          <div>{titleArea}</div>
          <div className="flex items-center gap-2 md:gap-4 transition">
            {tools}
            {/* Notifications */}
            <div className="relative" ref={ref}>
              <button
                className="relative block rounded-full border-gray-300 border-1 p-1 cursor-pointer hover:bg-white transition"
                onClick={() => setNotiShow(!notiShow)}
              >
                <Bell className="w-5 h-5" />
                {notiList.length > 0 && (
                  <span className="absolute top-1 right-[7px] block h-2 w-2 rounded-full bg-red-500" />
                )}
              </button>
              {notiShow && (
                <div className="absolute right-0 mt-1 w-64 bg-white border border-gray-200 rounded-lg shadow-lg z-50">
                  <div className="font-semibold py-2 px-4 border-b border-b-gray-300">Notifications</div>
                  <div className="p-4 text-sm text-gray-700">
                    {notiList.length === 0 && <p>No new notifications</p>}
                    {notiList.length > 0 &&
                      notiList.map((noti) => (
                        <div key={noti.id} className="flex items-center gap-2 mb-2">
                          <div>
                            <p className="font-medium text-sm truncate">{noti.title}</p>
                            <p className="text-gray-400 text-xs">
                              {noti.date.toLocaleString('en-US', {
                                month: 'short',
                                day: 'numeric',
                                year: 'numeric',
                                hour: 'numeric',
                                minute: '2-digit',
                                hour12: true,
                              })}
                            </p>
                            <p className="text-gray-500 text-xs h-8">{noti.content}</p>
                          </div>
                        </div>
                      ))}
                  </div>
                </div>
              )}
            </div>
            {/* Profile Dropdown */}
            <div className="relative" ref={profileRef}>
              <button
                className="flex items-center gap-2 text-sm cursor-pointer"
                onClick={() => setProfileDropdown(!profileDropdown)}
              >
                <div className="w-8 h-8 rounded-full bg-blue-500 text-white flex items-center justify-center font-medium">
                  {merchantInfo?.businessName ? getInitials(merchantInfo.businessName) : 'B'}
                </div>
                <div className="md:flex hidden">
                  <p className="font-medium truncate">{merchantInfo?.businessName || 'Business'}</p>
                </div>
                <ChevronDown className="w-4 h-4" />
              </button>
              {profileDropdown && (
                <div className="absolute right-0 mt-1 w-48 bg-white border border-gray-200 rounded-lg shadow-lg z-50">
                  <div className="py-1">
                    <Link
                      href="/merchant/settings?tab=security"
                      className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                      onClick={() => setProfileDropdown(false)}
                    >
                      Profile Settings
                    </Link>
                    <button
                      onClick={() => {
                        setProfileDropdown(false);
                        handleLogout();
                      }}
                      className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                    >
                      Logout
                    </button>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
        {children}
      </main>
    </div>
  );
};

export default DashLayout;

components/layouts/index.ts
export { default as MainLayout } from './MainLayout';
export { default as DashLayout } from './DashLayout';
export { default as OnboardingLayout } from './OnboardingLayout';

components/layouts/MainLayout.tsx
import { ReactNode } from 'react';
import { MainNavbar } from '@/components/widgets';

const MainLayout = ({ children }: { children: ReactNode }) => {
  return (
    <div className="flex flex-col min-h-screen">
      <MainNavbar />
      <main className="flex-grow">{children}</main>
    </div>
  );
};

export default MainLayout;


components/layouts/OnboardingLayout.tsx
'use client';

import { ReactNode } from 'react';
import { useRouter } from 'next/navigation';
import Image from 'next/image';
import ProgressBar from '@/components/ui/ProgressBar';
import logoImg from '@/assets/images/logo.svg';

interface OnboardingLayoutProps {
  step: number;
  children: ReactNode;
}

export default function OnboardingLayout({ step, children }: OnboardingLayoutProps) {
  const router = useRouter();

  const handleLogout = () => {
    localStorage.removeItem('jwt_token');
    localStorage.removeItem('user_data');
    localStorage.removeItem('onboarding-storage');
    // Clear cookie
    document.cookie = 'token=; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT;';
    router.push('/signin');
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <Image src={logoImg} alt="ArkusPay" className="h-8 w-auto" />
            <button
              onClick={handleLogout}
              className="text-sm text-gray-600 hover:text-gray-900 transition-colors px-3 py-2 rounded-md hover:bg-gray-100"
            >
              Logout
            </button>
          </div>
        </div>
      </header>

      {/* Progress Bar */}
      <div className="bg-white">
        <div className="max-w-2xl mx-auto px-4 sm:px-6 lg:px-8">
          <ProgressBar step={step} />
        </div>
      </div>

      {/* Main Content */}
      <main className="w-full max-w-2xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {children}
      </main>
    </div>
  );
}

components/ui/AddProductModal.tsx
'use client';

import {
  Listbox,
  ListboxButton,
  ListboxOption,
  ListboxOptions,
  Menu,
  MenuButton,
  MenuItem,
  MenuItems,
} from '@headlessui/react';
import { ChevronDownIcon, MoreHorizontal, Upload, X, Plus, Minus } from 'lucide-react';
import { useEffect, useRef, useState } from 'react';
import { createPortal } from 'react-dom';
import { Product } from '@/types';
import Toaster from '@/helpers/Toaster';

const currencies = [
  { code: 'USD', symbol: '$' },
  { code: 'BRL', symbol: 'R$' },
  { code: 'EUR', symbol: '€' },
  { code: 'GBP', symbol: '£' },
  { code: 'CAD', symbol: 'C$' },
  { code: 'AUD', symbol: 'A$' },
  { code: 'JPY', symbol: '¥' },
];

const formatter = new Intl.NumberFormat('en-US', {
  style: 'decimal',
  minimumFractionDigits: 2,
  maximumFractionDigits: 2,
});

// Simple Rich Text Editor Component
const RichTextEditor: React.FC<{
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
}> = ({ value, onChange, placeholder }) => {
  const textareaRef = useRef<HTMLTextAreaElement>(null);

  const handleCommand = (command: string) => {
    const textarea = textareaRef.current;
    if (!textarea) return;

    const start = textarea.selectionStart;
    const end = textarea.selectionEnd;
    const selectedText = textarea.value.substring(start, end);
    
    let replacement = '';
    switch (command) {
      case 'bold':
        replacement = `<strong>${selectedText || 'text'}</strong>`;
        break;
      case 'italic':
        replacement = `<em>${selectedText || 'text'}</em>`;
        break;
      case 'underline':
        replacement = `<u>${selectedText || 'text'}</u>`;
        break;
      case 'list':
        replacement = selectedText ? `<ul>\n  <li>${selectedText}</li>\n</ul>` : '<ul>\n  <li>List item</li>\n</ul>';
        break;
      case 'link':
        const url = prompt('Enter URL:');
        if (url) {
          replacement = `<a href="${url}" target="_blank">${selectedText || url}</a>`;
        }
        break;
    }

    if (replacement) {
      const newValue = textarea.value.substring(0, start) + replacement + textarea.value.substring(end);
      onChange(newValue);
      
      // Set cursor position after the replacement
      setTimeout(() => {
        textarea.selectionStart = textarea.selectionEnd = start + replacement.length;
        textarea.focus();
      }, 0);
    }
  };

  return (
    <div>
      <div className="toolbar border border-gray-300 border-b-0 rounded-t-md p-2 bg-gray-50 flex gap-2">
        <button
          type="button"
          onClick={() => handleCommand('bold')}
          className="px-2 py-1 text-sm border border-gray-300 rounded hover:bg-gray-100"
          title="Bold"
        >
          <strong>B</strong>
        </button>
        <button
          type="button"
          onClick={() => handleCommand('italic')}
          className="px-2 py-1 text-sm border border-gray-300 rounded hover:bg-gray-100"
          title="Italic"
        >
          <em>I</em>
        </button>
        <button
          type="button"
          onClick={() => handleCommand('underline')}
          className="px-2 py-1 text-sm border border-gray-300 rounded hover:bg-gray-100"
          title="Underline"
        >
          <u>U</u>
        </button>
        <button
          type="button"
          onClick={() => handleCommand('list')}
          className="px-2 py-1 text-sm border border-gray-300 rounded hover:bg-gray-100"
          title="Bullet List"
        >
          • List
        </button>
        <button
          type="button"
          onClick={() => handleCommand('link')}
          className="px-2 py-1 text-sm border border-gray-300 rounded hover:bg-gray-100"
          title="Insert Link"
        >
          🔗 Link
        </button>
      </div>
      <textarea
        ref={textareaRef}
        value={value}
        onChange={(e) => onChange(e.target.value)}
        placeholder={placeholder}
        className="w-full border border-gray-300 rounded-b-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 resize-none"
        rows={6}
      />
    </div>
  );
};

interface ShippingMethod {
  name: string;
  price: number;
}

interface Variant {
  name: string;
  values: string;
  stock: number;
}

interface ImagePreview {
  file?: File;
  url: string;
  isMain: boolean;
  isExisting?: boolean;
  originalUrl?: string; // Store original URL for existing images
}

const AddProductModal: React.FC<{
  open: boolean;
  onClose: () => void;
  type: 'Physical' | 'Digital';
  product?: Product;
}> = ({ open, onClose, type: initialType, product }) => {
  const [mounted, setMounted] = useState(false);
  const [loading, setLoading] = useState(false);

  // Basic fields - Initialize with empty strings to avoid controlled/uncontrolled issues
  const [title, setTitle] = useState('');
  const [shortDescription, setShortDescription] = useState('');
  const [longDescription, setLongDescription] = useState('');
  const [price, setPrice] = useState(''); // Use string to allow empty state
  const [currency, setCurrency] = useState('USD');
  const [autoLocalPrice, setAutoLocalPrice] = useState(true);
  const [productType] = useState(initialType); // Remove setter, use initial type only
  const [sku, setSku] = useState('');
  const [barcode, setBarcode] = useState('');

  // Image handling
  const [images, setImages] = useState<ImagePreview[]>([]);
  const [removedImageUrls, setRemovedImageUrls] = useState<string[]>([]);
  const fileInputRef = useRef<HTMLInputElement>(null);

  // Digital product fields
  const [fileMethod, setFileMethod] = useState<'url' | 'upload'>('url');
  const [fileUrl, setFileUrl] = useState('');
  const [digitalFile, setDigitalFile] = useState<File | null>(null);
  const [isRecurring, setIsRecurring] = useState(false);
  const [billingInterval, setBillingInterval] = useState('monthly');
  const [hasTrial, setHasTrial] = useState(false);
  const [trialDays, setTrialDays] = useState('14'); // Use string

  // Physical product fields
  const [hasStock, setHasStock] = useState(true);
  const [stock, setStock] = useState('0'); // Use string
  const [hasVariants, setHasVariants] = useState(false);
  const [variants, setVariants] = useState<Variant[]>([]);
  const [shippingMethods, setShippingMethods] = useState<ShippingMethod[]>([{ name: '', price: 0 }]);

  // Status (for editing)
  const [status, setStatus] = useState<'active' | 'deactivated'>('active');

  useEffect(() => {
    setMounted(true);
  }, []);

  // Helper function to format image URLs consistently
  const formatImageUrl = (imageUrl: string) => {
    if (!imageUrl) return '';
    if (imageUrl.startsWith('http://') || imageUrl.startsWith('https://')) {
      return imageUrl;
    }
    const baseUrl = process.env.NEXT_PUBLIC_API_URL?.split('/api')[0] || 'http://localhost:5000';
    if (imageUrl.startsWith('/uploads/') || imageUrl.startsWith('/api/uploads/')) {
      return `${baseUrl}${imageUrl}`;
    }
    return `${baseUrl}/uploads/${imageUrl}`;
  };

  // Populate form when editing
  useEffect(() => {
    if (product) {
      setTitle(product.title || product.name || '');
      setShortDescription(product.shortDescription || '');
      setLongDescription(product.longDescription || product.description || '');
      setPrice(product.price?.toString() || '');
      setCurrency(product.defaultCurrency || 'USD');
      setAutoLocalPrice(product.autoLocalPrice !== false);
      setSku(product.sku || '');
      setBarcode(product.barcode || '');
      setStatus(product.status === 'active' ? 'active' : 'deactivated');

      // Handle existing images with proper URL formatting
      if (product.images && product.images.length > 0) {
        const existingImages: ImagePreview[] = product.images.map(img => ({
          url: formatImageUrl(img.url),
          originalUrl: img.url, // Store original URL for reference
          isMain: img.isMain,
          isExisting: true
        }));
        setImages(existingImages);
      }

      // Digital product fields
      if (product.digital) {
        setIsRecurring(product.digital.isRecurring || false);
        if (product.digital.fileUrl) {
          setFileMethod('url');
          setFileUrl(product.digital.fileUrl);
        } else if (product.digital.fileUpload) {
          setFileMethod('upload');
        }
        
        if (product.digital.recurring) {
          setBillingInterval(product.digital.recurring.interval || 'monthly');
          setHasTrial(product.digital.recurring.hasTrial || false);
          setTrialDays(product.digital.recurring.trialDays?.toString() || '14');
        }
      }

      // Physical product fields
      if (product.physical) {
        setHasStock(product.physical.stock !== undefined);
        setStock(product.physical.stock?.toString() || '0');
        
        if (product.physical.shippingMethods) {
          setShippingMethods(product.physical.shippingMethods);
        }
      }

      if (product.variants && product.variants.length > 0) {
        setHasVariants(true);
        setVariants(product.variants.map(v => ({
          name: v.name,
          values: v.values.join(','),
          stock: v.stock
        })));
      }
    }
  }, [product]);

  const handleImageUpload = (files: FileList) => {
    const newImages: ImagePreview[] = [];
    const remainingSlots = 10 - images.length;
    const filesToProcess = Math.min(files.length, remainingSlots);

    for (let i = 0; i < filesToProcess; i++) {
      const file = files[i];
      newImages.push({
        file,
        url: URL.createObjectURL(file),
        isMain: images.length === 0 && i === 0
      });
    }

    setImages(prev => [...prev, ...newImages]);

    if (files.length > remainingSlots) {
      Toaster.warning(`Only ${filesToProcess} images were added. Maximum 10 images allowed.`);
    }
  };

  const removeImage = (index: number) => {
    const imageToRemove = images[index];
    
    if (imageToRemove.isExisting && imageToRemove.originalUrl) {
      setRemovedImageUrls(prev => [...prev, imageToRemove.originalUrl!]);
    }

    const newImages = images.filter((_, i) => i !== index);
    
    // If the removed image was main and there are other images, make the first one main
    if (imageToRemove.isMain && newImages.length > 0) {
      newImages[0].isMain = true;
    }
    
    setImages(newImages);
  };

  const setMainImage = (index: number) => {
    setImages(prev => prev.map((img, i) => ({
      ...img,
      isMain: i === index
    })));
  };

  const addVariant = () => {
    setVariants(prev => [...prev, { name: '', values: '', stock: 0 }]);
  };

  const removeVariant = (index: number) => {
    setVariants(prev => prev.filter((_, i) => i !== index));
  };

  const updateVariant = (index: number, field: keyof Variant, value: string | number) => {
    setVariants(prev => prev.map((variant, i) => 
      i === index ? { ...variant, [field]: value } : variant
    ));
  };

  const addShippingMethod = () => {
    setShippingMethods(prev => [...prev, { name: '', price: 0 }]);
  };

  const removeShippingMethod = (index: number) => {
    setShippingMethods(prev => prev.filter((_, i) => i !== index));
  };

  const updateShippingMethod = (index: number, field: keyof ShippingMethod, value: string | number) => {
    setShippingMethods(prev => prev.map((method, i) => 
      i === index ? { ...method, [field]: value } : method
    ));
  };

  const handlePriceChange = (value: string) => {
    // Allow empty string and valid numbers
    if (value === '' || !isNaN(Number(value))) {
      setPrice(value);
    }
  };

  const handleStockChange = (value: string) => {
    // Allow empty string and valid numbers
    if (value === '' || (!isNaN(Number(value)) && Number(value) >= 0)) {
      setStock(value);
    }
  };

  const handleTrialDaysChange = (value: string) => {
    // Allow empty string and valid numbers
    if (value === '' || (!isNaN(Number(value)) && Number(value) >= 0)) {
      setTrialDays(value);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    // Validation
    if (!title.trim()) {
      Toaster.error('Product title is required');
      return;
    }
    
    if (!price || Number(price) <= 0) {
      Toaster.error('Price must be greater than 0');
      return;
    }

    if (images.length === 0) {
      Toaster.error('At least one product image is required');
      return;
    }

    // Digital product validations
    if (productType === 'Digital') {
      if (fileMethod === 'url' && !fileUrl.trim()) {
        Toaster.error('File URL is required for digital products');
        return;
      }
      if (fileMethod === 'upload' && !digitalFile && !product) {
        Toaster.error('Please upload a digital file');
        return;
      }
    }

    // Physical product validations
    if (productType === 'Physical') {
      if (hasVariants && variants.some(v => !v.name.trim() || !v.values.trim())) {
        Toaster.error('Variant name and values are required');
        return;
      }
      if (shippingMethods.some(s => s.name.trim() && (isNaN(s.price) || s.price < 0))) {
        Toaster.error('Invalid shipping method price');
        return;
      }
    }

    setLoading(true);

    try {
      const formData = new FormData();
      
      // Basic fields
      formData.append('title', title.trim());
      formData.append('shortDescription', shortDescription.trim());
      formData.append('longDescription', longDescription.trim());
      formData.append('description', shortDescription.trim()); // Backwards compatibility
      formData.append('price', price);
      formData.append('currency', currency);
      formData.append('defaultCurrency', currency);
      formData.append('autoLocalPrice', autoLocalPrice.toString());
      formData.append('type', productType.toLowerCase());
      if (sku.trim()) formData.append('sku', sku.trim());
      if (barcode.trim()) formData.append('barcode', barcode.trim());
      
      // Status for editing
      if (product) {
        formData.append('status', status);
      }

      // Generate slug for new products
      if (!product) {
        const slug = generateSlug();
        formData.append('slug', slug);
      }

      // Handle new images
      const newImages = images.filter(img => img.file);
      newImages.forEach(img => {
        if (img.file) formData.append('images', img.file);
      });

      // Handle main image
      const mainImageIndex = images.findIndex(img => img.isMain);
      if (mainImageIndex >= 0) {
        const mainImage = images[mainImageIndex];
        if (mainImage.file) {
          // New image is main
          const newImageIndex = newImages.findIndex(img => img.file === mainImage.file);
          formData.append('mainImageIndex', newImageIndex.toString());
        } else if (mainImage.isExisting) {
          // Existing image is main - use original URL for comparison
          const existingIndex = product?.images?.findIndex(img => img.url === mainImage.originalUrl) || 0;
          formData.append('mainImageIsNew', 'false');
          formData.append('mainImageIndex', existingIndex.toString());
        }
      }

      // Handle removed images for edits
      if (product && removedImageUrls.length > 0) {
        formData.append('removedImageUrls', removedImageUrls.join(','));
      }

      // Digital product fields
      if (productType === 'Digital') {
        formData.append('isRecurring', isRecurring.toString());
        formData.append('fileMethod', fileMethod);
        
        if (fileMethod === 'url') {
          formData.append('fileUrl', fileUrl.trim());
        } else if (digitalFile) {
          formData.append('digitalFile', digitalFile);
        }
        
        if (isRecurring) {
          const digitalData = {
            recurring: {
              interval: billingInterval,
              hasTrial,
              trialDays: hasTrial ? Number(trialDays) || 0 : 0
            }
          };
          formData.append('digital', JSON.stringify(digitalData));
        }
      }

      // Physical product fields
      if (productType === 'Physical') {
        formData.append('hasStock', hasStock.toString());
        if (hasStock && !hasVariants) {
          formData.append('stock', stock);
        }
        
        formData.append('hasVariants', hasVariants.toString());
        if (hasVariants && variants.length > 0) {
          const processedVariants = variants.map(v => ({
            name: v.name.trim(),
            values: v.values.split(',').map(val => val.trim()).filter(val => val),
            stock: v.stock
          }));
          formData.append('variants', JSON.stringify(processedVariants));
        }
        
        // Shipping methods
        const validShippingMethods = shippingMethods.filter(s => s.name.trim());
        if (validShippingMethods.length > 0) {
          formData.append('shippingMethods', JSON.stringify(validShippingMethods));
        }
      }

      // Make API call
      const token = localStorage.getItem('jwt_token');
      const baseUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:5000/api';
      const endpoint = product ? `/products/${product._id}` : '/products';
      const method = product ? 'PUT' : 'POST';

      const response = await fetch(`${baseUrl}${endpoint}`, {
        method,
        headers: {
          'Authorization': `Bearer ${token}`
        },
        body: formData
      });

      const result = await response.json();
      
      if (result.success) {
        Toaster.success(product ? 'Product updated successfully' : 'Product created successfully');
        onClose();
        // Trigger a page refresh or update the product list
        window.location.reload();
      } else {
        Toaster.error(result.message || 'Failed to save product');
      }
    } catch (error) {
      console.error('Error saving product:', error);
      Toaster.error('Error saving product');
    } finally {
      setLoading(false);
    }
  };

  // Generate a random slug
  const generateSlug = () => {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    let slug = '';
    for (let i = 0; i < 10; i++) {
      slug += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return slug;
  };

  if (!mounted) return null;

  return createPortal(
    <div
      className={`fixed inset-0 z-50 flex justify-end bg-black bg-opacity-50 ${open ? 'translate-x-0' : 'translate-x-full'}`}
      onClick={onClose}
    >
      <div
        className={`w-full max-w-6xl h-full bg-white shadow-xl p-6 flex flex-col overflow-hidden transition-transform duration-300 ${
          open ? 'translate-x-0' : 'translate-x-full'
        }`}
        onClick={(e) => e.stopPropagation()}
      >
        {/* Header */}
        <div className="flex items-center justify-between border-b border-gray-300 mb-6 pb-4">
          <h2 className="text-2xl font-bold">
            {product ? 'Edit Product' : `Add ${productType} Product`}
          </h2>
          <button
            className="rounded-full hover:bg-gray-100 transition p-2"
            onClick={onClose}
          >
            <X className="w-6 h-6" />
          </button>
        </div>

        {/* Form */}
        <form onSubmit={handleSubmit} className="flex-1 flex gap-8 overflow-hidden">
          {/* Left Panel - Form Fields */}
          <div className="flex-1 overflow-y-auto space-y-6">
            {/* Basic Information */}
            <section>
              <h3 className="text-lg font-semibold mb-4">Basic Information</h3>
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium mb-1">
                    Title <span className="text-red-500">*</span>
                  </label>
                  <input
                    type="text"
                    value={title}
                    onChange={(e) => setTitle(e.target.value)}
                    className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium mb-1">
                    Short Description
                  </label>
                  <textarea
                    value={shortDescription}
                    onChange={(e) => setShortDescription(e.target.value)}
                    className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                    rows={2}
                    maxLength={200}
                    placeholder="Brief description for listings (max 200 chars)"
                  />
                  <small className="text-gray-500 text-xs">
                    {shortDescription.length}/200 characters
                  </small>
                </div>

                <div>
                  <label className="block text-sm font-medium mb-1">
                    Long Description
                  </label>
                  <RichTextEditor
                    value={longDescription}
                    onChange={setLongDescription}
                    placeholder="Detailed product description with basic formatting"
                  />
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium mb-1">
                      Price <span className="text-red-500">*</span>
                    </label>
                    <input
                      type="text"
                      value={price}
                      onChange={(e) => handlePriceChange(e.target.value)}
                      className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="0.00"
                      required
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium mb-1">
                      Default Currency <span className="text-red-500">*</span>
                    </label>
                    <Listbox value={currency} onChange={setCurrency}>
                      <div className="relative">
                        <ListboxButton className="w-full border border-gray-300 rounded-md px-3 py-2 text-left bg-white flex justify-between items-center focus:outline-none focus:ring-2 focus:ring-blue-500">
                          {currency}
                          <ChevronDownIcon className="w-4 h-4 text-gray-400" />
                        </ListboxButton>
                        <ListboxOptions className="absolute z-10 mt-1 w-full bg-white border border-gray-300 rounded-md shadow-lg max-h-60 overflow-auto">
                          {currencies.map((curr) => (
                            <ListboxOption
                              key={curr.code}
                              value={curr.code}
                              className={({ active }) =>
                                `cursor-pointer select-none px-3 py-2 ${
                                  active ? 'bg-blue-100 text-blue-900' : 'text-gray-900'
                                }`
                              }
                            >
                              {curr.code}
                            </ListboxOption>
                          ))}
                        </ListboxOptions>
                      </div>
                    </Listbox>
                  </div>
                </div>

                <div className="flex items-center space-x-2">
                  <input
                    type="checkbox"
                    id="autoLocalPrice"
                    checked={autoLocalPrice}
                    onChange={(e) => setAutoLocalPrice(e.target.checked)}
                    className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                  />
                  <label htmlFor="autoLocalPrice" className="text-sm">
                    Auto-convert price for shoppers (Currency-Switch)
                  </label>
                </div>
                <small className="text-gray-500 text-xs">
                  If checked, shoppers see prices in their local currency. If unchecked, they see the Default Product Currency.
                </small>

                {/* Hidden product type - removed from form UI */}
                <input type="hidden" value={productType} />

                {product && (
                  <div>
                    <label className="block text-sm font-medium mb-1">Status</label>
                    <Listbox value={status} onChange={setStatus}>
                      <div className="relative">
                        <ListboxButton className="w-full border border-gray-300 rounded-md px-3 py-2 text-left bg-white flex justify-between items-center focus:outline-none focus:ring-2 focus:ring-blue-500">
                          {status === 'active' ? 'Active' : 'Deactivated'}
                          <ChevronDownIcon className="w-4 h-4 text-gray-400" />
                        </ListboxButton>
                        <ListboxOptions className="absolute z-10 mt-1 w-full bg-white border border-gray-300 rounded-md shadow-lg">
                          <ListboxOption
                            value="active"
                            className={({ active }) =>
                              `cursor-pointer select-none px-3 py-2 ${
                                active ? 'bg-blue-100 text-blue-900' : 'text-gray-900'
                              }`
                            }
                          >
                            Active
                          </ListboxOption>
                          <ListboxOption
                            value="deactivated"
                            className={({ active }) =>
                              `cursor-pointer select-none px-3 py-2 ${
                                active ? 'bg-blue-100 text-blue-900' : 'text-gray-900'
                              }`
                            }
                          >
                            Deactivated
                          </ListboxOption>
                        </ListboxOptions>
                      </div>
                    </Listbox>
                  </div>
                )}

                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium mb-1">SKU</label>
                    <input
                      type="text"
                      value={sku}
                      onChange={(e) => setSku(e.target.value)}
                      className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Stock Keeping Unit"
                      maxLength={100}
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium mb-1">Barcode</label>
                    <input
                      type="text"
                      value={barcode}
                      onChange={(e) => setBarcode(e.target.value)}
                      className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="ISBN, UPC, GTIN, etc."
                      maxLength={100}
                    />
                  </div>
                </div>
              </div>
            </section>

            {/* Images */}
            <section>
              <h3 className="text-lg font-semibold mb-4">Images</h3>
              <div>
                <label className="block text-sm font-medium mb-1">
                  Upload Images <span className="text-red-500">*</span>
                </label>
                <div
                  className="border-2 border-dashed border-gray-300 rounded-md p-6 text-center hover:border-gray-400 transition-colors cursor-pointer"
                  onClick={() => fileInputRef.current?.click()}
                >
                  <Upload className="w-8 h-8 mx-auto mb-2 text-gray-400" />
                  <p className="text-sm text-gray-600">
                    Click to upload images or drag and drop
                  </p>
                  <p className="text-xs text-gray-500 mt-1">
                    Maximum 10 images (JPEG, PNG, WebP)
                  </p>
                </div>
                <input
                  ref={fileInputRef}
                  type="file"
                  multiple
                  accept="image/*"
                  onChange={(e) => e.target.files && handleImageUpload(e.target.files)}
                  className="hidden"
                />
                <div className="text-xs text-gray-500 mt-1">
                  {images.length}/10 images selected
                </div>

                {/* Image Previews */}
                {images.length > 0 && (
                  <div className="mt-4 grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                    {images.map((image, index) => (
                      <div key={index} className="relative border border-gray-300 rounded-md overflow-hidden">
                        <img
                          src={image.url}
                          alt={`Preview ${index + 1}`}
                          className="w-full h-32 object-cover"
                          onError={(e) => {
                            console.log('Image error:', image.url);
                            const target = e.target as HTMLImageElement;
                            target.src = '/api/placeholder/150/150';
                          }}
                        />
                        <div className="absolute inset-0 bg-black bg-opacity-50 opacity-0 hover:opacity-100 transition-opacity flex items-center justify-center space-x-2">
                          <button
                            type="button"
                            onClick={() => setMainImage(index)}
                            className={`px-2 py-1 text-xs rounded ${
                              image.isMain
                                ? 'bg-blue-500 text-white'
                                : 'bg-white text-gray-800 hover:bg-gray-100'
                            }`}
                          >
                            {image.isMain ? 'Main' : 'Set as Main'}
                          </button>
                          <button
                            type="button"
                            onClick={() => removeImage(index)}
                            className="px-2 py-1 text-xs bg-red-500 text-white rounded hover:bg-red-600"
                          >
                            Remove
                          </button>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            </section>

            {/* Digital Product Options */}
            {productType === 'Digital' && (
              <section>
                <h3 className="text-lg font-semibold mb-4">Digital Product Options</h3>
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium mb-2">File Method</label>
                    <div className="flex space-x-4">
                      <label className="flex items-center">
                        <input
                          type="radio"
                          value="url"
                          checked={fileMethod === 'url'}
                          onChange={(e) => setFileMethod(e.target.value as 'url' | 'upload')}
                          className="mr-2"
                        />
                        File URL
                      </label>
                      <label className="flex items-center">
                        <input
                          type="radio"
                          value="upload"
                          checked={fileMethod === 'upload'}
                          onChange={(e) => setFileMethod(e.target.value as 'url' | 'upload')}
                          className="mr-2"
                        />
                        File Upload
                      </label>
                    </div>
                  </div>

                  {fileMethod === 'url' ? (
                    <div>
                      <label className="block text-sm font-medium mb-1">File URL</label>
                      <input
                        type="url"
                        value={fileUrl}
                        onChange={(e) => setFileUrl(e.target.value)}
                        className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                        placeholder="https://example.com/your-file.zip"
                      />
                    </div>
                  ) : (
                    <div>
                      <label className="block text-sm font-medium mb-1">Upload Digital File</label>
                      <input
                        type="file"
                        onChange={(e) => setDigitalFile(e.target.files?.[0] || null)}
                        className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                      />
                      {product && product.digital?.fileUpload && (
                        <small className="text-gray-500 text-xs mt-1">
                          Current file: {product.digital.fileUpload.split('/').pop()}
                        </small>
                      )}
                    </div>
                  )}

                  <div className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      id="isRecurring"
                      checked={isRecurring}
                      onChange={(e) => setIsRecurring(e.target.checked)}
                      className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                    />
                    <label htmlFor="isRecurring" className="text-sm">
                      Recurring Subscription
                    </label>
                  </div>

                  {isRecurring && (
                    <div className="bg-gray-50 p-4 rounded-md space-y-4">
                      <div>
                        <label className="block text-sm font-medium mb-1">Billing Interval</label>
                        <Listbox value={billingInterval} onChange={setBillingInterval}>
                          <div className="relative">
                            <ListboxButton className="w-full border border-gray-300 rounded-md px-3 py-2 text-left bg-white flex justify-between items-center focus:outline-none focus:ring-2 focus:ring-blue-500">
                              {billingInterval === 'monthly' ? 'Monthly' : 'Yearly'}
                              <ChevronDownIcon className="w-4 h-4 text-gray-400" />
                            </ListboxButton>
                            <ListboxOptions className="absolute z-10 mt-1 w-full bg-white border border-gray-300 rounded-md shadow-lg">
                              <ListboxOption
                                value="monthly"
                                className={({ active }) =>
                                  `cursor-pointer select-none px-3 py-2 ${
                                    active ? 'bg-blue-100 text-blue-900' : 'text-gray-900'
                                  }`
                                }
                              >
                                Monthly
                              </ListboxOption>
                              <ListboxOption
                                value="yearly"
                                className={({ active }) =>
                                  `cursor-pointer select-none px-3 py-2 ${
                                    active ? 'bg-blue-100 text-blue-900' : 'text-gray-900'
                                  }`
                                }
                              >
                                Yearly
                              </ListboxOption>
                            </ListboxOptions>
                          </div>
                        </Listbox>
                      </div>

                      <div className="flex items-center space-x-2">
                        <input
                          type="checkbox"
                          id="hasTrial"
                          checked={hasTrial}
                          onChange={(e) => setHasTrial(e.target.checked)}
                          className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                        />
                        <label htmlFor="hasTrial" className="text-sm">
                          Offer Free Trial
                        </label>
                      </div>

                      {hasTrial && (
                        <div>
                          <label className="block text-sm font-medium mb-1">Trial Days</label>
                          <input
                            type="text"
                            value={trialDays}
                            onChange={(e) => handleTrialDaysChange(e.target.value)}
                            className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                            placeholder="14"
                          />
                        </div>
                      )}
                    </div>
                  )}
                </div>
              </section>
            )}

            {/* Physical Product Options */}
            {productType === 'Physical' && (
              <section>
                <h3 className="text-lg font-semibold mb-4">Physical Product Options</h3>
                <div className="space-y-4">
                  <div className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      id="hasStock"
                      checked={hasStock}
                      onChange={(e) => setHasStock(e.target.checked)}
                      className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                    />
                    <label htmlFor="hasStock" className="text-sm">
                      Manage Stock
                    </label>
                  </div>

                  {hasStock && !hasVariants && (
                    <div>
                      <label className="block text-sm font-medium mb-1">Stock Quantity</label>
                      <input
                        type="text"
                        value={stock}
                        onChange={(e) => handleStockChange(e.target.value)}
                        className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                        placeholder="0"
                      />
                    </div>
                  )}

                  <div className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      id="hasVariants"
                      checked={hasVariants}
                      onChange={(e) => {
                        setHasVariants(e.target.checked);
                        if (e.target.checked) {
                          setHasStock(true);
                        }
                      }}
                      className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                    />
                    <label htmlFor="hasVariants" className="text-sm">
                      Add Variants (e.g., Size, Color)
                    </label>
                  </div>

                  {hasVariants && (
                    <div className="bg-gray-50 p-4 rounded-md space-y-4">
                      <div className="flex justify-between items-center">
                        <h4 className="font-medium">Product Variants</h4>
                        <button
                          type="button"
                          onClick={addVariant}
                          className="inline-flex items-center px-3 py-1 border border-transparent text-sm rounded-md text-white bg-blue-600 hover:bg-blue-700"
                        >
                          <Plus className="w-4 h-4 mr-1" />
                          Add Variant
                        </button>
                      </div>
                      <small className="text-gray-600">
                        If you add variants, stock will be managed per variant.
                      </small>

                      {variants.map((variant, index) => (
                        <div key={index} className="bg-white p-4 rounded-md border space-y-3">
                          <div className="flex justify-between items-start">
                            <h5 className="font-medium">Variant {index + 1}</h5>
                            <button
                              type="button"
                              onClick={() => removeVariant(index)}
                              className="text-red-600 hover:text-red-800"
                            >
                              <Minus className="w-4 h-4" />
                            </button>
                          </div>
                          <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
                            <div>
                              <label className="block text-sm font-medium mb-1">Variant Name</label>
                              <input
                                type="text"
                                value={variant.name}
                                onChange={(e) => updateVariant(index, 'name', e.target.value)}
                                className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                                placeholder="e.g., Size"
                              />
                            </div>
                            <div>
                              <label className="block text-sm font-medium mb-1">Values (comma-separated)</label>
                              <input
                                type="text"
                                value={variant.values}
                                onChange={(e) => updateVariant(index, 'values', e.target.value)}
                                className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                                placeholder="e.g., Small,Medium,Large"
                              />
                            </div>
                            <div>
                              <label className="block text-sm font-medium mb-1">Stock</label>
                              <input
                                type="number"
                                min="0"
                                value={variant.stock}
                                onChange={(e) => updateVariant(index, 'stock', Number(e.target.value))}
                                className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                              />
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}

                  {/* Shipping Methods */}
                  <div>
                    <div className="flex justify-between items-center mb-3">
                      <h4 className="font-medium">Shipping Methods</h4>
                      <button
                        type="button"
                        onClick={addShippingMethod}
                        className="inline-flex items-center px-3 py-1 border border-transparent text-sm rounded-md text-white bg-blue-600 hover:bg-blue-700"
                      >
                        <Plus className="w-4 h-4 mr-1" />
                        Add Method
                      </button>
                    </div>
                    <small className="text-gray-600 mb-3 block">
                      Add shipping methods for this product. Set price to 0 for free shipping.
                    </small>

                    {shippingMethods.map((method, index) => (
                      <div key={index} className="flex items-center space-x-3 mb-3">
                        <input
                          type="text"
                          value={method.name}
                          onChange={(e) => updateShippingMethod(index, 'name', e.target.value)}
                          className="flex-1 border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="Method name (e.g., Standard Shipping)"
                        />
                        <input
                          type="number"
                          min="0"
                          step="0.01"
                          value={method.price}
                          onChange={(e) => updateShippingMethod(index, 'price', Number(e.target.value))}
                          className="w-32 border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                          placeholder="Price"
                        />
                        {shippingMethods.length > 1 && (
                          <button
                            type="button"
                            onClick={() => removeShippingMethod(index)}
                            className="text-red-600 hover:text-red-800"
                          >
                            <Minus className="w-4 h-4" />
                          </button>
                        )}
                      </div>
                    ))}
                  </div>
                </div>
              </section>
            )}
          </div>

          {/* Right Panel - Preview */}
          <div className="w-80 bg-gray-50 p-6 rounded-lg space-y-4 overflow-y-auto">
            <h3 className="text-lg font-semibold">Preview</h3>
            <div className="bg-white p-4 rounded-md border">
              {/* Product Image */}
              <div className="w-full h-48 bg-gray-200 rounded-md mb-3 overflow-hidden">
                {images.length > 0 ? (
                  <img
                    src={images.find(img => img.isMain)?.url || images[0].url}
                    alt="Product preview"
                    className="w-full h-full object-cover"
                    onError={(e) => {
                      const target = e.target as HTMLImageElement;
                      target.src = '/api/placeholder/300/300';
                    }}
                  />
                ) : (
                  <div className="w-full h-full flex items-center justify-center text-gray-400">
                    <Upload className="w-12 h-12" />
                  </div>
                )}
              </div>

              {/* Product Details */}
              <h4 className="font-semibold text-lg mb-2">{title || 'Product Title'}</h4>
              <p className="text-sm text-gray-600 mb-3">
                {shortDescription || 'Product description...'}
              </p>
              <div className="flex justify-between items-center">
                <span className="text-2xl font-bold">
                  {currencies.find(c => c.code === currency)?.symbol}
                  {price ? Number(price).toFixed(2) : '0.00'}
                </span>
                <span className="text-sm text-gray-500">{currency}</span>
              </div>
              
              {sku && (
                <div className="mt-2 text-xs text-gray-500">
                  SKU: {sku}
                </div>
              )}
            </div>

            {/* Form Actions */}
            <div className="space-y-3">
              <button
                type="submit"
                disabled={loading}
                className="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                {loading ? 'Saving...' : product ? 'Update Product' : 'Create Product'}
              </button>
              <button
                type="button"
                onClick={onClose}
                className="w-full bg-gray-300 text-gray-700 py-2 px-4 rounded-md hover:bg-gray-400 transition-colors"
              >
                Cancel
              </button>
            </div>
          </div>
        </form>
      </div>
    </div>,
    document.body
  );
};

export default AddProductModal;

components/ui/AddShippingModal.tsx
'use client';

import { CheckCircle, X } from 'lucide-react';
import { useState } from 'react';
import { createPortal } from 'react-dom';

const AddShippingModal: React.FC<{
  open: boolean;
  onClose: () => void;
  id?: string;
}> = ({ open, onClose, id }) => {
  const [name, setName] = useState('');
  const [min, setMin] = useState('');
  const [max, setMax] = useState('');
  const [price, setPrice] = useState('');

  if (!open) return null;

  return createPortal(
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-[#0008]" onClick={onClose}>
      <div className="bg-white p-6 rounded-lg w-full max-w-md space-y-4" onClick={(e) => e.stopPropagation()}>
        <div className="flex items-center justify-between border-b border-gray-300 pb-2">
          <div className="text-lg font-semibold">Add Shipping</div>
          <button className="rounded-full hover:bg-gray-100 transition p-2 cursor-pointer" onClick={onClose}>
            <X className="w-4 h-4" />
          </button>
        </div>
        <div className="space-y-4 text-sm">
          <div>
            <label className="block font-medium mb-1">Name</label>
            <input
              value={name}
              onChange={(e) => setName(e.target.value)}
              className="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
          <div>
            <label className="block font-medium mb-1">Minimum Days of Shipping</label>
            <input
              value={min}
              onChange={(e) => setMin(e.target.value)}
              className="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
          <div>
            <label className="block font-medium mb-1">Maximum Days of Shipping</label>
            <input
              value={max}
              onChange={(e) => setMax(e.target.value)}
              className="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
          <div>
            <label className="block font-medium mb-1">Price</label>
            <input
              value={price}
              onChange={(e) => setPrice(e.target.value)}
              className="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
        </div>
        <div className="grid grid-cols-1 gap-4 pt-6">
          <button className="hover:bg-blue-600 text-white font-semibold py-2 rounded-md bg-blue-500 transition cursor-pointer">
            Add
          </button>
        </div>
      </div>
    </div>,
    document.body
  );
};

export default AddShippingModal;


components/ui/BusinessSettingsTab.tsx
'use client';

import { Listbox, ListboxButton, ListboxOption, ListboxOptions } from '@headlessui/react';
import { ChevronDownIcon } from 'lucide-react';
import { useState } from 'react';

import avatarAddImg from '@/assets/images/icons/avatarAdd.svg';
import Image from 'next/image';

const BusinessTab = () => {
  const [businessType, setBusinessType] = useState('');
  const [companyName, setCompanyName] = useState('');
  const [industry, setIndustry] = useState('');
  const [website, setWebsite] = useState('');
  const [country, setCountry] = useState('');
  const [street, setStreet] = useState('');
  const [city, setCity] = useState('');
  const [postalCode, setPostalCode] = useState('');

  return (
    <div className="max-w-4xl bg-white text-sm pb-8">
      {/* Company Logo */}
      <div className="mb-6">
        <label className="block font-medium mb-2">Company Logo</label>
        <div className="w-32 h-32 border border-dashed border-gray-400 flex flex-col items-center justify-center rounded-md cursor-pointer bg-gray-100 hover:bg-gray-200 transition space-y-3">
          <Image src={avatarAddImg} alt="Company logo" className="w-10 h-10" />
          <span className="text-sm text-center">Upload Company Logo</span>
        </div>
      </div>

      {/* Form Fields */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div>
          <label className="block mb-1 font-medium">Company Name</label>
          <input
            type="text"
            value={companyName}
            placeholder="Enter your company name"
            className="w-full border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 rounded-md p-2"
            onChange={(e) => setCompanyName(e.target.value)}
          />
        </div>
        <div>
          <label className="block mb-1 font-medium">Business Type</label>
          <Listbox value={businessType} onChange={setBusinessType}>
            <div className="relative">
              <ListboxButton className="w-full border border-gray-200 rounded-md px-4 py-2 text-sm text-gray-500 bg-white flex justify-between items-center focus:outline-none focus:ring-2 focus:ring-blue-500">
                {businessType || 'Please select'}
                <ChevronDownIcon className="w-4 h-4 text-gray-400" />
              </ListboxButton>
              <ListboxOptions className="absolute mt-1 max-h-60 w-full overflow-auto rounded-md bg-white py-1 text-sm shadow-lg ring-1 ring-gray-300 focus:outline-none z-10">
                <ListboxOption
                  value="Shop"
                  className={({ active }) =>
                    `cursor-pointer select-none px-4 py-2 ${active ? 'bg-blue-100 text-blue-900' : 'text-gray-900'}`
                  }
                >
                  Shop
                </ListboxOption>
                <ListboxOption
                  value="Data Center"
                  className={({ active }) =>
                    `cursor-pointer select-none px-4 py-2 ${active ? 'bg-blue-100 text-blue-900' : 'text-gray-900'}`
                  }
                >
                  Data Center
                </ListboxOption>
              </ListboxOptions>
            </div>
          </Listbox>
        </div>

        <div>
          <label className="block mb-1 font-medium">Industry</label>
          <Listbox value={industry} onChange={setIndustry}>
            <div className="relative">
              <ListboxButton className="w-full border border-gray-200 rounded-md px-4 py-2 text-sm text-gray-500 bg-white flex justify-between items-center focus:outline-none focus:ring-2 focus:ring-blue-500">
                {industry || 'Please select'}
                <ChevronDownIcon className="w-4 h-4 text-gray-400" />
              </ListboxButton>
              <ListboxOptions className="absolute mt-1 max-h-60 w-full overflow-auto rounded-md bg-white py-1 text-sm shadow-lg ring-1 ring-gray-300 focus:outline-none z-10">
                <ListboxOption
                  value="Education"
                  className={({ active }) =>
                    `cursor-pointer select-none px-4 py-2 ${active ? 'bg-blue-100 text-blue-900' : 'text-gray-900'}`
                  }
                >
                  Education
                </ListboxOption>
                <ListboxOption
                  value="Healthcare"
                  className={({ active }) =>
                    `cursor-pointer select-none px-4 py-2 ${active ? 'bg-blue-100 text-blue-900' : 'text-gray-900'}`
                  }
                >
                  Healthcare
                </ListboxOption>
              </ListboxOptions>
            </div>
          </Listbox>
        </div>
        <div>
          <label className="block mb-1 font-medium">Business Website</label>
          <input
            type="text"
            placeholder="example: www.company.com"
            className="w-full border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 rounded-md p-2"
            value={website}
            onChange={(e) => setWebsite(e.target.value)}
          />
        </div>
      </div>

      {/* Business Address */}
      <div className="mt-6">
        <h3 className="font-semibold mb-4">Business Address</h3>
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <div>
            <label className="block mb-1 font-medium">Country</label>
            <Listbox value={country} onChange={setCountry}>
              <div className="relative">
                <ListboxButton className="w-full border border-gray-200 rounded-md px-4 py-2 text-sm text-gray-500 bg-white flex justify-between items-center focus:outline-none focus:ring-2 focus:ring-blue-500">
                  {country || 'Please select'}
                  <ChevronDownIcon className="w-4 h-4 text-gray-400" />
                </ListboxButton>
                <ListboxOptions className="absolute mt-1 max-h-60 w-full overflow-auto rounded-md bg-white py-1 text-sm shadow-lg ring-1 ring-gray-300 focus:outline-none z-10">
                  <ListboxOption
                    value="USA"
                    className={({ active }) =>
                      `cursor-pointer select-none px-4 py-2 ${active ? 'bg-blue-100 text-blue-900' : 'text-gray-900'}`
                    }
                  >
                    USA
                  </ListboxOption>
                  <ListboxOption
                    value="UK"
                    className={({ active }) =>
                      `cursor-pointer select-none px-4 py-2 ${active ? 'bg-blue-100 text-blue-900' : 'text-gray-900'}`
                    }
                  >
                    UK
                  </ListboxOption>
                </ListboxOptions>
              </div>
            </Listbox>
          </div>
          <div>
            <label className="block mb-1 font-medium">Street Address</label>
            <input
              type="text"
              placeholder="Enter your street address"
              className="w-full border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 rounded-md p-2"
              value={street}
              onChange={(e) => setStreet(e.target.value)}
            />
          </div>
          <div>
            <label className="block mb-1 font-medium">Town or City</label>
            <input
              type="text"
              placeholder="Enter your town or city"
              className="w-full border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 rounded-md p-2"
              value={city}
              onChange={(e) => setCity(e.target.value)}
            />
          </div>
          <div>
            <label className="block mb-1 font-medium">Postal Code</label>
            <input
              type="text"
              placeholder="Enter your postal code"
              className="w-full border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 rounded-md p-2"
              value={postalCode}
              onChange={(e) => setPostalCode(e.target.value)}
            />
          </div>
        </div>
      </div>

      {/* Save Button */}
      <div className="mt-6">
        <button className="hover:bg-blue-600 text-white py-2 px-6 rounded-md bg-blue-500 transition cursor-pointer">
          Save Changes
        </button>
      </div>
    </div>
  );
};

export default BusinessTab;


components/ui/ConfirmModal.tsx
'use client';

import { CheckCircle } from 'lucide-react';
import { createPortal } from 'react-dom';

const ConfirmModal: React.FC<{
  open: boolean;
  onClose: () => void;
  title: string;
  subTitle?: string;
}> = ({ open, onClose, title, subTitle }) => {
  if (!open) return null;

  return createPortal(
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-[#0008]">
      <div className="bg-white p-6 rounded-lg w-full max-w-md space-y-4">
        <div className="flex text-center justify-center items-center pt-4 font-semibold text-xl">
          <CheckCircle className="text-green-600 text-lg font-bold" strokeWidth={3} />
        </div>
        <div className="flex text-center items-center font-semibold text-xl">{title}</div>
        {subTitle && (
          <div className="flex items-center justify-center text-center text-gray-500 text-sm">{subTitle}</div>
        )}
        <div className="max-w-xl w-full space-y-4">
          <div className="grid grid-cols-1 gap-4 pt-6">
            <button
              className="hover:bg-blue-600 text-white font-semibold py-2 rounded-md bg-blue-500 transition cursor-pointer"
              onClick={onClose}
            >
              Done
            </button>
          </div>
        </div>
      </div>
    </div>,
    document.body
  );
};

export default ConfirmModal;


components/ui/DeactivateSlot.tsx
'use client';

import Link from 'next/link';
import { useState } from 'react';

const reasons = [
  'I don’t want to keep processing my orders with Arkus',
  'I found a better payment processor',
  'I stopped my business',
  'Other',
];

const DeactivateSlot = () => {
  const [reason, setReason] = useState<string>('');
  const [feedback, setFeedback] = useState<string>('');

  return (
    <div className="">
      <h2 className="font-semibold mb-2 text-lg">Deactivate account</h2>
      <p className="text-gray-600 mb-4 text-sm">
        Everyone needs a break once in awhile. <br />
        Deactivate your account is the best option if you&apos;d like to temporarily hide your merchant profile and
        activity.
      </p>

      <h3 className="text-base font-medium mb-2">Tell us why you want to deactivate your account (optional)</h3>

      <div className="mb-4 space-y-2">
        {reasons.map((item, idx) => (
          <label key={idx} className="flex items-center text-sm space-x-2 cursor-pointer">
            <input
              type="radio"
              name="reason"
              value={item}
              checked={reason === item}
              onChange={() => setReason(item)}
              className="accent-blue-600 cursor-pointer"
            />
            <span className="text-gray-700">{item}</span>
          </label>
        ))}
      </div>

      <p className="text-gray-600 mb-2 text-sm">
        We value your feedback, but please note that we aren’t able to respond to comments about your account submitted
        in this form. If you have a question or request about your account that requires attention, please contact us{' '}
        <Link href="/contact-us" className="text-blue-500 underline">
          here
        </Link>
        .
      </p>

      <textarea
        rows={4}
        placeholder=""
        value={feedback}
        onChange={(e) => setFeedback(e.target.value)}
        className="w-full p-3 border border-gray-300 text-sm rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent mb-4"
      />

      <button className="hover:bg-blue-600 text-white py-2 rounded-md bg-blue-500 transition cursor-pointer px-8">
        Deactivate Account
      </button>
    </div>
  );
};

export default DeactivateSlot;


components/ui/FeeSettingsTab.tsx
'use client';

import { Listbox, ListboxButton, ListboxOption, ListboxOptions } from '@headlessui/react';
import { ChevronDownIcon, CreditCard, Repeat } from 'lucide-react';
import { useState } from 'react';
import Image, { StaticImageData } from 'next/image';

import rebillImg from '@/assets/images/icons/rebill.svg';
import cardPayImg from '@/assets/images/icons/cardpay.svg';

const FeeCard: React.FC<{
  icon: StaticImageData;
  title: string;
  subtitle: string;
  priceLabel: string;
  priceInfo: string;
}> = ({ icon, title, subtitle, priceLabel, priceInfo }) => (
  <div className="grid grid-cols-1 lg:grid-cols-2 items-center border border-gray-500 rounded-lg p-5 hover:shadow-md transition">
    <div className="flex items-center gap-4 py-4 border-b lg:border-b-0 lg:border-r border-gray-500">
      <Image src={icon} alt="icon" className="bg-blue-100 text-blue-500 w-10 h-10 rounded-lg text-xl" />
      <div>
        <h3 className="font-semibold text-lg">{title}</h3>
        <p className="text-sm text-gray-500">{subtitle}</p>
      </div>
    </div>
    <div className="space-y-1 py-4 lg:px-6">
      <p className="text-sm font-semibold">{priceLabel}</p>
      <p className="text-xs text-gray-700">{priceInfo}</p>
    </div>
  </div>
);

const FeeTab = () => {
  return (
    <div className="max-w-4xl pb-8">
      <h2 className="text-xl font-semibold mb-1">Account fees</h2>
      <p className="text-sm text-gray-600 mb-6">
        A complete payment platform engineered for growth. Software and infrastructure for e-commerce, marketplaces, and
        more
      </p>

      <div className="space-y-4">
        <FeeCard
          icon={cardPayImg}
          title="Card Payment"
          subtitle="Accepting payments online"
          priceLabel="Pay as you go"
          priceInfo="0.7% of card payment volume"
        />

        <FeeCard
          icon={rebillImg}
          title="Re-Billing"
          subtitle="Create and manage subscriptions"
          priceLabel="Pay every cycle"
          priceInfo="1.7% of re-billing volume"
        />
      </div>
    </div>
  );
};

export default FeeTab;


components/ui/index.ts
export { default as BusinessSettingsTab } from './BusinessSettingsTab';
export { default as FeeSettingsTab } from './FeeSettingsTab';
export { default as ProfileSettingsTab } from './ProfileSettingsTab';
export { default as OTPModal } from './OTPModal';
export { default as ConfirmModal } from './ConfirmModal';
export { default as TFACodeModal } from './TFACodeModal';
export { default as AddProductModal } from './AddProductModal';
export { default as AddShippingModal } from './AddShippingModal';
export { default as ProductViewModal } from './ProductViewModal';
export { default as ProgressBar } from './ProgressBar';

components/ui/OTPModal.tsx
'use client';

import { ReactNode, useState } from 'react';
import { createPortal } from 'react-dom';
import { SpinLoading } from 'respinner';

const OTPModal: React.FC<{
  open: boolean;
  sending: boolean;
  onClose: () => void;
  onSend: (arg0: string) => Promise<void>;
  title: string;
  subTitle: string | ReactNode;
}> = ({ open, sending, onClose, onSend, title, subTitle }) => {
  const [otp, setOtp] = useState('');

  if (!open) return null;

  return createPortal(
    <div
      className="fixed inset-0 z-[100] flex items-center justify-center bg-[#0008]"
      onKeyDown={async (e) => {
        if ((e.ctrlKey || e.metaKey) && e.key === 'v') {
          const text = await navigator.clipboard.readText();
          setOtp(text);
        }
      }}
    >
      <div className="bg-white p-6 rounded-lg w-full max-w-md space-y-4">
        <div className="flex text-center items-center justify-center pb-4 font-semibold text-xl">{title}</div>
        <div className="flex items-center justify-center text-center text-gray-500 text-sm">{subTitle}</div>
        <div className="max-w-xl w-full space-y-4">
          <div className="flex items-center justify-center text-center font-semibold text-gray-900 text-xl">OTP</div>
          <div className="flex gap-2 justify-center items-center">
            {Array.from({ length: 6 }, (_, i) => i).map((_, i) => (
              <input
                readOnly
                type="text"
                key={i}
                className="border border-gray-400 rounded-md p-2 w-12 h-12 text-xl font-semibold focus:outline-none focus:ring-2 focus:ring-blue-500 text-center"
                value={otp[i] ?? ''}
              />
            ))}
          </div>
          <div className="flex items-center justify-center text-center text-green-400 text-xs">
            You can copy OTP code to any inputs in the above.
          </div>
          <div className="grid grid-cols-2 gap-4 pt-6">
            <button
              className="bg-blue-50 text-blue-500 font-semibold py-2 rounded-md hover:bg-blue-100  transition cursor-pointer"
              onClick={onClose}
            >
              Back
            </button>
            <button
              className={`hover:bg-blue-600 bg-blue-500 transition font-semibold text-white flex justify-center rounded px-8 py-2 ${
                sending ? 'cursor-not-allowed' : 'cursor-pointer'
              }`}
              onClick={() => onSend(otp)}
              disabled={sending || !otp}
            >
              {sending && (
                <div className="flex items-center gap-2">
                  <SpinLoading
                    size={16}
                    count={10}
                    barWidth={3}
                    barHeight={5}
                    borderRadius={1}
                    fill="white"
                    className=""
                  />
                  Sending...
                </div>
              )}
              {!sending && 'Continue'}
            </button>
          </div>
        </div>
      </div>
    </div>,
    document.body
  );
};

export default OTPModal;


components/ui/ProductViewModal.tsx
'use client';

import { X, Edit, Calendar, Package, Tag, Globe, DollarSign, FileText, Archive } from 'lucide-react';
import { createPortal } from 'react-dom';
import { useEffect, useState } from 'react';

interface Product {
  _id: string;
  title: string;
  name?: string;
  shortDescription?: string;
  description?: string;
  longDescription?: string;
  price: number;
  defaultCurrency?: string;
  type: 'physical' | 'digital';
  status: 'active' | 'deactivated';
  sku?: string;
  barcode?: string;
  autoLocalPrice?: boolean;
  images?: Array<{
    url: string;
    isMain: boolean;
  }>;
  createdAt: string;
  updatedAt?: string;
  slug?: string;
  digital?: {
    isRecurring?: boolean;
    fileUrl?: string;
    fileUpload?: string;
    recurring?: {
      interval: string;
      hasTrial: boolean;
      trialDays?: number;
    };
  };
  physical?: {
    stock?: number;
    shippingMethods?: Array<{
      name: string;
      price: number;
    }>;
  };
  variants?: Array<{
    name: string;
    values: string[];
    stock: number;
  }>;
}

interface ProductViewModalProps {
  open: boolean;
  onClose: () => void;
  product: Product | null;
  onEdit: (product: Product) => void;
}

const ProductViewModal: React.FC<ProductViewModalProps> = ({
  open,
  onClose,
  product,
  onEdit
}) => {
  const [mounted, setMounted] = useState(false);
  const [selectedImageIndex, setSelectedImageIndex] = useState(0);

  useEffect(() => {
    setMounted(true);
  }, []);

  // Reset selected image when product changes
  useEffect(() => {
    setSelectedImageIndex(0);
  }, [product]);

  if (!mounted || !open || !product) return null;

  const formatImageUrl = (imageUrl: string) => {
    if (!imageUrl) return '/api/placeholder/200/200';
    if (imageUrl.startsWith('http://') || imageUrl.startsWith('https://')) {
      return imageUrl;
    }
    const baseUrl = process.env.NEXT_PUBLIC_API_URL?.split('/api')[0] || 'http://localhost:5000';
    if (imageUrl.startsWith('/uploads/') || imageUrl.startsWith('/api/uploads/')) {
      return `${baseUrl}${imageUrl}`;
    }
    return `${baseUrl}/uploads/${imageUrl}`;
  };

  const formatCurrency = (amount: number, currency: string = 'USD') => {
    const locales = currency === 'BRL' ? 'pt-BR' : 'en-US';
    return new Intl.NumberFormat(locales, {
      style: 'currency',
      currency: currency
    }).format(amount);
  };

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  return createPortal(
    <div
      className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50"
      onClick={onClose}
    >
      <div
        className="w-full max-w-6xl h-full max-h-[95vh] bg-white rounded-lg shadow-xl flex flex-col"
        onClick={(e) => e.stopPropagation()}
      >
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-gray-200 flex-shrink-0">
          <h2 className="text-2xl font-bold text-gray-900">Product Details</h2>
          <div className="flex items-center space-x-3">
            <button
              onClick={() => onEdit(product)}
              className="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            >
              <Edit className="w-4 h-4 mr-2" />
              Edit Product
            </button>
            <button
              onClick={onClose}
              className="rounded-full hover:bg-gray-100 transition p-2"
            >
              <X className="w-6 h-6" />
            </button>
          </div>
        </div>

        {/* Content - Scrollable */}
        <div className="flex-1 overflow-y-auto p-6">
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            {/* Left Column - Images and Basic Info */}
            <div className="lg:col-span-1">
              {/* Images Gallery */}
              <div className="mb-6">
                <h3 className="text-lg font-semibold mb-3">Images</h3>
                {product.images && product.images.length > 0 ? (
                  <div className="space-y-3">
                    {/* Main Image */}
                    <div className="relative">
                      <img
                        src={formatImageUrl(product.images[selectedImageIndex].url)}
                        alt="Product image"
                        className="w-full h-80 object-cover rounded-lg border border-gray-200"
                        onError={(e) => {
                          const target = e.target as HTMLImageElement;
                          target.src = '/api/placeholder/400/400';
                        }}
                      />
                      {product.images[selectedImageIndex].isMain && (
                        <span className="absolute top-2 left-2 bg-blue-500 text-white text-xs px-2 py-1 rounded">
                          Main
                        </span>
                      )}
                    </div>
                    
                    {/* Thumbnail Images */}
                    {product.images.length > 1 && (
                      <div className="grid grid-cols-4 gap-2">
                        {product.images.map((image, index) => (
                          <div 
                            key={index} 
                            className={`relative cursor-pointer rounded border-2 overflow-hidden ${
                              selectedImageIndex === index 
                                ? 'border-blue-500 ring-2 ring-blue-200' 
                                : 'border-gray-200 hover:border-gray-300'
                            }`}
                            onClick={() => setSelectedImageIndex(index)}
                          >
                            <img
                              src={formatImageUrl(image.url)}
                              alt={`Product image ${index + 1}`}
                              className="w-full h-20 object-cover"
                              onError={(e) => {
                                const target = e.target as HTMLImageElement;
                                target.src = '/api/placeholder/80/80';
                              }}
                            />
                            {image.isMain && selectedImageIndex !== index && (
                              <span className="absolute top-1 left-1 bg-blue-500 text-white text-xs px-1 rounded">
                                Main
                              </span>
                            )}
                          </div>
                        ))}
                      </div>
                    )}
                  </div>
                ) : (
                  <div className="w-full h-80 bg-gray-200 rounded-lg flex items-center justify-center">
                    <span className="text-gray-500">No images</span>
                  </div>
                )}
              </div>

              {/* Basic Info Card */}
              <div className="bg-gray-50 p-4 rounded-lg">
                <h3 className="text-lg font-semibold mb-3">Quick Info</h3>
                <div className="space-y-2 text-sm">
                  <div className="flex items-center justify-between">
                    <span className="font-medium">Status:</span>
                    <span
                      className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                        product.status === 'active'
                          ? 'bg-green-100 text-green-800'
                          : 'bg-red-100 text-red-800'
                      }`}
                    >
                      {product.status === 'active' ? 'Active' : 'Deactivated'}
                    </span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="font-medium">Type:</span>
                    <span className="capitalized">
                      {product.type === 'physical' ? 'Physical' : 'Digital'}
                    </span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="font-medium">Price:</span>
                    <span className="font-bold">
                      {formatCurrency(product.price, product.defaultCurrency)}
                    </span>
                  </div>
                  {product.sku && (
                    <div className="flex items-center justify-between">
                      <span className="font-medium">SKU:</span>
                      <span>{product.sku}</span>
                    </div>
                  )}
                  {product.barcode && (
                    <div className="flex items-center justify-between">
                      <span className="font-medium">Barcode:</span>
                      <span>{product.barcode}</span>
                    </div>
                  )}
                </div>
              </div>
            </div>

            {/* Right Column - Detailed Information */}
            <div className="lg:col-span-2">
              <div className="space-y-6">
                {/* Product Information */}
                <section>
                  <h3 className="text-lg font-semibold mb-4 flex items-center">
                    <Package className="w-5 h-5 mr-2" />
                    Product Information
                  </h3>
                  <div className="bg-white border border-gray-200 rounded-lg p-4">
                    <table className="w-full">
                      <tbody className="space-y-3">
                        <tr>
                          <td className="font-medium text-gray-900 w-1/3 py-2">ID:</td>
                          <td className="text-gray-700 py-2">{product._id}</td>
                        </tr>
                        <tr>
                          <td className="font-medium text-gray-900 py-2">Name:</td>
                          <td className="text-gray-700 py-2">{product.title || product.name}</td>
                        </tr>
                        {product.shortDescription && (
                          <tr>
                            <td className="font-medium text-gray-900 py-2">Short Description:</td>
                            <td className="text-gray-700 py-2">{product.shortDescription}</td>
                          </tr>
                        )}
                        {(product.longDescription || product.description) && (
                          <tr>
                            <td className="font-medium text-gray-900 py-2 align-top">Long Description:</td>
                            <td className="text-gray-700 py-2">
                              <div 
                                className="prose prose-sm max-w-none"
                                dangerouslySetInnerHTML={{ 
                                  __html: product.longDescription || product.description || ''
                                }}
                              />
                            </td>
                          </tr>
                        )}
                        <tr>
                          <td className="font-medium text-gray-900 py-2">Default Currency:</td>
                          <td className="text-gray-700 py-2">{product.defaultCurrency || 'USD'}</td>
                        </tr>
                        <tr>
                          <td className="font-medium text-gray-900 py-2">Auto-local Price:</td>
                          <td className="text-gray-700 py-2">
                            {product.autoLocalPrice !== false ? 'Yes' : 'No'}
                          </td>
                        </tr>
                        <tr>
                          <td className="font-medium text-gray-900 py-2">Created:</td>
                          <td className="text-gray-700 py-2">{formatDate(product.createdAt)}</td>
                        </tr>
                        {product.updatedAt && (
                          <tr>
                            <td className="font-medium text-gray-900 py-2">Last Updated:</td>
                            <td className="text-gray-700 py-2">{formatDate(product.updatedAt)}</td>
                          </tr>
                        )}
                      </tbody>
                    </table>
                  </div>
                </section>

                {/* Digital Product Details */}
                {product.type === 'digital' && product.digital && (
                  <section>
                    <h3 className="text-lg font-semibold mb-4 flex items-center">
                      <Archive className="w-5 h-5 mr-2" />
                      Digital Product Details
                    </h3>
                    <div className="bg-white border border-gray-200 rounded-lg p-4">
                      <table className="w-full">
                        <tbody>
                          <tr>
                            <td className="font-medium text-gray-900 w-1/3 py-2">Recurring:</td>
                            <td className="text-gray-700 py-2">
                              {product.digital.isRecurring ? 'Yes' : 'No'}
                            </td>
                          </tr>
                          {product.digital.isRecurring && product.digital.recurring && (
                            <>
                              <tr>
                                <td className="font-medium text-gray-900 py-2">Interval:</td>
                                <td className="text-gray-700 py-2">
                                  {product.digital.recurring.interval}
                                </td>
                              </tr>
                              <tr>
                                <td className="font-medium text-gray-900 py-2">Trial:</td>
                                <td className="text-gray-700 py-2">
                                  {product.digital.recurring.hasTrial ? 'Yes' : 'No'}
                                </td>
                              </tr>
                              {product.digital.recurring.hasTrial && (
                                <tr>
                                  <td className="font-medium text-gray-900 py-2">Trial Days:</td>
                                  <td className="text-gray-700 py-2">
                                    {product.digital.recurring.trialDays || 0}
                                  </td>
                                </tr>
                              )}
                            </>
                          )}
                          {product.digital.fileUrl && (
                            <tr>
                              <td className="font-medium text-gray-900 py-2">File URL:</td>
                              <td className="text-gray-700 py-2">
                                <a
                                  href={product.digital.fileUrl}
                                  target="_blank"
                                  rel="noopener noreferrer"
                                  className="text-blue-600 hover:text-blue-800 underline"
                                >
                                  View File
                                </a>
                              </td>
                            </tr>
                          )}
                          {product.digital.fileUpload && (
                            <tr>
                              <td className="font-medium text-gray-900 py-2">Uploaded File:</td>
                              <td className="text-gray-700 py-2">
                                {product.digital.fileUpload.split('/').pop()}
                              </td>
                            </tr>
                          )}
                        </tbody>
                      </table>
                    </div>
                  </section>
                )}

                {/* Physical Product Details */}
                {product.type === 'physical' && product.physical && (
                  <section>
                    <h3 className="text-lg font-semibold mb-4 flex items-center">
                      <Tag className="w-5 h-5 mr-2" />
                      Physical Product Details
                    </h3>
                    <div className="bg-white border border-gray-200 rounded-lg p-4">
                      <table className="w-full">
                        <tbody>
                          <tr>
                            <td className="font-medium text-gray-900 w-1/3 py-2">Has Stock:</td>
                            <td className="text-gray-700 py-2">
                              {product.physical.stock !== undefined ? 'Yes' : 'No'}
                            </td>
                          </tr>
                          {product.physical.stock !== undefined && (
                            <tr>
                              <td className="font-medium text-gray-900 py-2">Stock:</td>
                              <td className="text-gray-700 py-2">{product.physical.stock}</td>
                            </tr>
                          )}
                          <tr>
                            <td className="font-medium text-gray-900 py-2">Has Variants:</td>
                            <td className="text-gray-700 py-2">
                              {product.variants && product.variants.length > 0 ? 'Yes' : 'No'}
                            </td>
                          </tr>
                          {product.variants && product.variants.length > 0 && (
                            <tr>
                              <td className="font-medium text-gray-900 py-2 align-top">Variants:</td>
                              <td className="text-gray-700 py-2">
                                <div className="space-y-2">
                                  {product.variants.map((variant, index) => (
                                    <div key={index} className="bg-gray-50 p-3 rounded border">
                                      <div className="font-medium">{variant.name}</div>
                                      <div className="text-sm text-gray-600">
                                        Values: {variant.values.join(', ')}
                                      </div>
                                      <div className="text-sm text-gray-600">
                                        Stock: {variant.stock}
                                      </div>
                                    </div>
                                  ))}
                                </div>
                              </td>
                            </tr>
                          )}
                          <tr>
                            <td className="font-medium text-gray-900 py-2 align-top">Shipping Methods:</td>
                            <td className="text-gray-700 py-2">
                              {product.physical.shippingMethods && product.physical.shippingMethods.length > 0 ? (
                                <div className="space-y-2">
                                  {product.physical.shippingMethods.map((method, index) => (
                                    <div key={index} className="bg-gray-50 p-3 rounded border">
                                      <div className="font-medium">{method.name}</div>
                                      <div className="text-sm text-gray-600">
                                        {formatCurrency(method.price, product.defaultCurrency)}
                                      </div>
                                    </div>
                                  ))}
                                </div>
                              ) : (
                                'No shipping methods defined'
                              )}
                            </td>
                          </tr>
                        </tbody>
                      </table>
                    </div>
                  </section>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>,
    document.body
  );
};

export default ProductViewModal;

components/ui/ProfileSettingsTab.tsx
'use client';

import { Listbox, ListboxButton, ListboxOption, ListboxOptions } from '@headlessui/react';
import { useState } from 'react';

import Image from 'next/image';

import profileImg from '@/assets/images/icons/profile.svg';
import profileActiveImg from '@/assets/images/icons/profile-active.svg';
import tfaImg from '@/assets/images/icons/2fa.svg';
import tfaActiveImg from '@/assets/images/icons/2fa-active.svg';
import deleteImg from '@/assets/images/icons/delete.svg';
import deleteActiveImg from '@/assets/images/icons/delete-active.svg';
import ProfileSlot from './ProfileSlot';
import DeactivateSlot from './DeactivateSlot';
import TFASlot from './TFASlot';

const ProfileTab = () => {
  const [slot, setSlot] = useState<'profile' | '2fa' | 'delete'>('profile');

  return (
    <div className="flex bg-white py-4 lg:gap-16 gap-4">
      <div className="lg:w-56 w-12 transition-all">
        <div className="">
          <button
            className={`flex items-center w-full text-left px-4 py-2  gap-2 rounded-md font-medium text-[14px] cursor-pointer h-10 ${
              slot === 'profile' ? 'bg-blue-100 text-blue-500' : 'text-gray-900'
            }`}
            onClick={() => setSlot('profile')}
          >
            <Image src={slot === 'profile' ? profileActiveImg : profileImg} alt="Profile" className="w-4 h-4" />
            <span className="lg:inline hidden truncate">Profile settings</span>
          </button>
          <button
            className={`flex items-center w-full text-left px-4 py-2  gap-2 rounded-md font-medium text-[14px] cursor-pointer h-10 ${
              slot === '2fa' ? 'bg-blue-100 text-blue-500' : 'text-gray-900'
            }`}
            onClick={() => setSlot('2fa')}
          >
            <Image src={slot === '2fa' ? tfaActiveImg : tfaImg} alt="Profile" className="w-4 h-4" />
            <span className="lg:inline hidden truncate">2FA Verification</span>
          </button>
          <button
            className={`flex items-center w-full text-left px-4 py-2  gap-2 rounded-md font-medium text-[14px] cursor-pointer h-10 ${
              slot === 'delete' ? 'bg-blue-100 text-blue-500' : 'text-gray-900'
            }`}
            onClick={() => setSlot('delete')}
          >
            <Image src={slot === 'delete' ? deleteActiveImg : deleteImg} alt="Profile" className="w-4 h-4" />
            <span className="lg:inline hidden truncate">Account Deactivation</span>
          </button>
        </div>
      </div>

      {/* Main content */}
      <div className="flex-1">
        {slot === 'profile' && <ProfileSlot />}
        {slot === 'delete' && <DeactivateSlot />}
        {slot === '2fa' && <TFASlot />}
      </div>
    </div>
  );
};

export default ProfileTab;


components/ui/ProfileSlot.tsx
'use client';

import { Listbox, ListboxButton, ListboxOption, ListboxOptions } from '@headlessui/react';
import { ChevronDownIcon } from 'lucide-react';
import Image from 'next/image';
import { useEffect, useState } from 'react';
import { CountryCode, getCountryCallingCode } from 'libphonenumber-js';
import { getName, getCodes } from 'country-list';
import { useApiRequest } from '@/hooks';
import { emailChangeUrl, mailOTPUrl, passwordChangeUrl, profileOTPUrl, profileUrl } from '@/consts/paths';
import Skeleton from 'react-loading-skeleton';
import { SpinLoading } from 'respinner';
import Toaster from '@/helpers/Toaster';
import OTPModal from './OTPModal';
import { send } from 'process';
import ConfirmModal from './ConfirmModal';

const countries = ['us', 'gb', 'br', 'ca', 'ae'];

const ProfileSlot = () => {
  const [country, setCountry] = useState('us');
  const [name, setName] = useState('');
  const [phone, setPhone] = useState('');

  const [password, setPassword] = useState('');
  const [newPassword, setNewPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');

  const [email, setEmail] = useState('');
  const [newEmail, setNewEmail] = useState('');

  const [otpModal, setOtpModal] = useState(false);
  const [otpMode, setOtpMode] = useState<'sms' | 'email' | undefined>();
  const [confirmModal, setConfirmModal] = useState(false);

  const {
    response: profileGetResponse,
    error: profileGetError,
    loading: profileGetLoading,
    sendRequest: sendProfileGetRequest,
  } = useApiRequest({
    endpoint: profileUrl,
    method: 'GET',
    headers: {
      Accept: 'application/json',
      Authorization: `Bearer 124567890`, // this needs to be changed with the local storage key
    },
  });

  const {
    response: profilePostResponse,
    error: profilePostError,
    loading: profilePostLoading,
    sendRequest: sendProfilePostRequest,
  } = useApiRequest({
    endpoint: profileUrl,
    method: 'POST',
    data: {
      name,
      phone,
      country,
    },
    headers: {
      Accept: 'application/json',
      Authorization: `Bearer 124567890`, // this needs to be changed with the local storage key
    },
  });

  const {
    response: profileOTPResponse,
    error: profileOTPError,
    loading: profileOTPLoading,
    sendRequest: sendProfileOTPRequest,
  } = useApiRequest({
    endpoint: profileOTPUrl,
    method: 'POST',
    headers: {
      Accept: 'application/json',
      Authorization: `Bearer 124567890`, // this needs to be changed with the local storage key
    },
  });

  const {
    response: mailOTPResponse,
    error: mailOTPError,
    loading: mailOTPLoading,
    sendRequest: sendMailOTPRequest,
  } = useApiRequest({
    endpoint: mailOTPUrl,
    method: 'POST',
    headers: {
      Accept: 'application/json',
      Authorization: `Bearer 124567890`, // this needs to be changed with the local storage key
    },
  });

  const {
    response: passwordResponse,
    error: passwordError,
    loading: passwordLoading,
    sendRequest: sendPasswordRequest,
  } = useApiRequest({
    endpoint: passwordChangeUrl,
    method: 'POST',
    data: {
      password,
      newPassword,
      confirmPassword,
    },
    headers: {
      Accept: 'application/json',
      Authorization: `Bearer 124567890`, // this needs to be changed with the local storage key
    },
  });

  const {
    response: mailResponse,
    error: mailError,
    loading: mailLoading,
    sendRequest: sendMailRequest,
  } = useApiRequest({
    endpoint: emailChangeUrl,
    method: 'POST',
    data: {
      email,
      newEmail,
    },
    headers: {
      Accept: 'application/json',
      Authorization: `Bearer 124567890`, // this needs to be changed with the local storage key
    },
  });

  useEffect(() => {
    sendProfileGetRequest();
  }, []);

  useEffect(() => {
    if (profileGetResponse) {
      setName(profileGetResponse.data.name);
      setPhone(profileGetResponse.data.phone);
      setCountry(profileGetResponse.data.country);
    }
  }, [profileGetResponse]);

  useEffect(() => {
    if (profileGetError) {
      // needs to handle in production mode
    }
  }, [profileGetError]);

  useEffect(() => {
    if (profilePostResponse && profilePostResponse.success) {
      Toaster.success('Successfully requested, you need to verify OTP');
      setOtpModal(true);
      setOtpMode('sms');
    }
  }, [profilePostResponse]);

  useEffect(() => {
    if (profilePostError) {
      Toaster.error(profilePostError.message);

      // remove these in production mode
      setOtpModal(true);
      setOtpMode('sms');
    }
  }, [profilePostError]);

  useEffect(() => {
    if (mailResponse && mailResponse.success) {
      Toaster.success('Successfully requested, you need to verify OTP');
      setOtpModal(true);
      setOtpMode('email');
    }
  }, [mailResponse]);

  useEffect(() => {
    if (mailError) {
      Toaster.error(mailError.message);

      // remove these in production mode
      setOtpModal(true);
      setOtpMode('email');
    }
  }, [mailError]);

  useEffect(() => {
    if (passwordResponse && passwordResponse.success) {
      Toaster.success('Successfully changed');
      setConfirmModal(true);
      setOtpMode(undefined);
    }
  }, [passwordResponse]);

  useEffect(() => {
    if (passwordError) {
      Toaster.error(passwordError.message);

      // remove these in production mode
      setConfirmModal(true);
      setOtpMode(undefined);
    }
  }, [passwordError]);

  useEffect(() => {
    if (profileOTPResponse && profileOTPResponse.success) {
      Toaster.success('Successfully verified, you can now login with your new phone number');
      setOtpModal(false);
      setConfirmModal(true);
    }
  }, [profileOTPResponse]);

  useEffect(() => {
    if (profileOTPError) {
      Toaster.error(profileOTPError.message);

      // remove these in production mode
      setOtpModal(false);
      setConfirmModal(true);
    }
  }, [profileOTPError]);

  useEffect(() => {
    if (mailOTPResponse && mailOTPResponse.success) {
      Toaster.success('Successfully verified, you can now login with your new email');
      setOtpModal(false);
      setConfirmModal(true);
    }
  }, [mailOTPResponse]);

  useEffect(() => {
    if (mailOTPError) {
      Toaster.error(mailOTPError.message);

      // remove these in production mode
      setOtpModal(false);
      setConfirmModal(true);
    }
  }, [mailOTPError]);

  return (
    <>
      <div className="space-y-7 pb-6">
        <section>
          <h2 className="text-lg font-semibold mb-2">Profile Name & Phone</h2>
          <p className="text-sm text-gray-500 mb-4">
            Here you can change your password. To change password please fill up the form.
          </p>
          <div className="space-y-4 text-sm">
            <div>
              <label className="block font-medium mb-1">Profile Name</label>
              {profileGetLoading && <Skeleton className="w-full" height={35} />}
              {!profileGetLoading && (
                <input
                  type="text"
                  value={name}
                  onChange={(e) => setName(e.target.value)}
                  className="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              )}
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">Phone Number</label>
              {profileGetLoading && <Skeleton className="w-full" height={35} />}
              {!profileGetLoading && (
                <div className="flex">
                  <div className="inline-flex items-center cursor-pointer w-34">
                    <Listbox value={country} onChange={setCountry}>
                      <div className="relative">
                        <ListboxButton className="w-full border cursor-pointer border-r-0 border-gray-300 rounded-l-md px-4 py-2 text-sm text-gray-500 bg-white flex justify-between items-center focus:outline-none focus:ring-2 focus:ring-blue-500">
                          <div className="flex items-center justify-start cursor-pointer">
                            <Image
                              src={`https://flagcdn.com/32x24/${country}.png`}
                              alt={`${country} Flag`}
                              width={24}
                              height={18}
                            />
                            <span className="px-3">+{getCountryCallingCode(country.toUpperCase() as CountryCode)}</span>
                          </div>
                          <ChevronDownIcon className="w-4 h-4 text-gray-400 ml-1" />
                        </ListboxButton>
                        <ListboxOptions className="absolute mt-1 max-h-60 w-60 overflow-auto rounded-md bg-white py-1 text-sm shadow-lg ring-1 ring-gray-300 focus:outline-none z-10">
                          {getCodes().map((c) => (
                            <ListboxOption
                              key={c.toLowerCase()}
                              value={c.toLowerCase()}
                              className={({ active }) =>
                                `cursor-pointer select-none px-4 py-2 ${
                                  active ? 'bg-blue-100 text-blue-900' : 'text-gray-900'
                                }`
                              }
                            >
                              <div className="flex items-center justify-start gap-2">
                                <Image
                                  src={`https://flagcdn.com/32x24/${c.toLowerCase()}.png`}
                                  alt={`${c} Flag`}
                                  width={24}
                                  height={18}
                                />
                                <span className="truncate">{getName(c)}</span>
                              </div>
                            </ListboxOption>
                          ))}
                        </ListboxOptions>
                      </div>
                    </Listbox>
                  </div>
                  <input
                    type="text"
                    placeholder="125 568 5896"
                    value={phone}
                    onChange={(e) => setPhone(e.target.value)}
                    className="w-full border border-gray-300 rounded-r px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>
              )}
            </div>
            <button
              className={`hover:bg-blue-600 bg-blue-500 transition text-white rounded px-8 py-2 ${
                profilePostLoading ? 'cursor-not-allowed' : 'cursor-pointer'
              }`}
              onClick={() => sendProfilePostRequest()}
              disabled={profilePostLoading || !name || !phone}
            >
              {profilePostLoading && (
                <div className="flex items-center gap-2">
                  <SpinLoading
                    size={16}
                    count={10}
                    barWidth={3}
                    barHeight={5}
                    borderRadius={1}
                    fill="white"
                    className=""
                  />
                  Saving...
                </div>
              )}
              {!profilePostLoading && 'Save'}
            </button>
          </div>
        </section>
        <hr className="border-gray-300" />
        <section>
          <h2 className="text-lg font-semibold mb-2">Change Password</h2>
          <p className="text-sm text-gray-500 mb-4">
            Here you can change your password. To change password please fill up the form.
          </p>
          <div className="space-y-4 text-sm">
            <div>
              <label className="block font-medium mb-1">Old Password</label>
              <input
                type="password"
                placeholder="Password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                className="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
            <div>
              <label className="block font-medium mb-1">New Password</label>
              <input
                type="password"
                placeholder="Password"
                value={newPassword}
                onChange={(e) => setNewPassword(e.target.value)}
                className="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
            <div>
              <label className="block font-medium mb-1">Confirm Password</label>
              <input
                type="password"
                placeholder="Password"
                value={confirmPassword}
                onChange={(e) => setConfirmPassword(e.target.value)}
                className="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
            <button
              className={`hover:bg-blue-600 bg-blue-500 transition text-white rounded px-8 py-2 ${
                passwordLoading ? 'cursor-not-allowed' : 'cursor-pointer'
              }`}
              disabled={passwordLoading || !password || !newPassword || !confirmPassword}
              onClick={() => sendPasswordRequest()}
            >
              {passwordLoading && (
                <div className="flex items-center gap-2">
                  <SpinLoading
                    size={16}
                    count={10}
                    barWidth={3}
                    barHeight={5}
                    borderRadius={1}
                    fill="white"
                    className=""
                  />
                  Updating...
                </div>
              )}
              {!passwordLoading && 'Update Password'}
            </button>
          </div>
        </section>
        <hr className="border-gray-300" />
        <section>
          <h2 className="text-lg font-semibold mb-2">Change Email Address</h2>
          <p className="text-sm text-gray-500 mb-4">
            Here you can change your email address. To change email address, please fill up the form.
          </p>
          <div className="space-y-4 text-sm">
            <div>
              <label className="block font-medium mb-1">Old Email Address</label>
              <input
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                placeholder="Enter your old email address"
                className="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
            <div>
              <label className="block font-medium mb-1">New Email Address</label>
              <input
                type="email"
                value={newEmail}
                onChange={(e) => setNewEmail(e.target.value)}
                placeholder="Enter your new email address"
                className="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
            <button
              className={`hover:bg-blue-600 bg-blue-500 transition text-white rounded px-8 py-2 ${
                mailLoading ? 'cursor-not-allowed' : 'cursor-pointer'
              }`}
              disabled={mailLoading || !email || !newEmail}
              onClick={() => sendMailRequest()}
            >
              {mailLoading && (
                <div className="flex items-center gap-2">
                  <SpinLoading
                    size={16}
                    count={10}
                    barWidth={3}
                    barHeight={5}
                    borderRadius={1}
                    fill="white"
                    className=""
                  />
                  Changing...
                </div>
              )}
              {!mailLoading && 'Change Email Address'}
            </button>
          </div>
        </section>
      </div>
      <OTPModal
        open={otpModal}
        sending={otpMode === 'sms' ? profileOTPLoading : otpMode === 'email' ? mailOTPLoading : false}
        onClose={() => setOtpModal(false)}
        onSend={async (otp) => {
          if (otpMode === 'sms') sendProfileOTPRequest({ otp });
          else if (otpMode === 'email') sendMailOTPRequest({ otp });
        }}
        title={
          otpMode === 'sms'
            ? 'Sent a verification code to your phone via SMS'
            : 'Sent a verification code to your old email address'
        }
        subTitle={
          otpMode === 'sms'
            ? 'Please enter your 6-digit authentication code from SMS'
            : 'Please enter your 6-digit authentication code from email'
        }
      />
      <ConfirmModal
        open={confirmModal}
        onClose={() => setConfirmModal(false)}
        title={
          otpMode === 'sms'
            ? 'Your have successfully changed your name and phone number'
            : otpMode === 'email'
            ? 'Your have successfully changed your email address'
            : 'Your have successfully changed your password'
        }
      />
    </>
  );
};

export default ProfileSlot;


components/ui/ProgressBar.tsx
'use client';

import React from 'react';
import { Check } from 'lucide-react';

interface ProgressBarProps {
  step: number;
}

export default function ProgressBar({ step }: ProgressBarProps) {
  const items = [
    { label: 'Business', index: 0 },
    { label: 'Address', index: 1 },
    { label: 'Selling', index: 2 },
  ];

  return (
    <nav aria-label="Progress" className="flex items-center justify-center gap-8 py-6">
      {items.map((item, index) => (
        <div key={item.label} className="flex items-center">
          <span
            className={`h-8 w-8 rounded-full flex items-center justify-center transition-colors ${
              index === step
                ? 'bg-blue-600 text-white'
                : index < step
                ? 'bg-green-600 text-white'
                : 'bg-gray-200 text-gray-600'
            }`}
            aria-label={`Step ${index + 1}: ${item.label}`}
          >
            {index < step ? <Check size={16} /> : null}
          </span>
          {index < items.length - 1 && (
            <span className="h-px w-16 bg-gray-300" aria-hidden />
          )}
        </div>
      ))}
    </nav>
  );
}

components/ui/TFACodeModal.tsx
'use client';

import { ReactNode } from 'react';
import { createPortal } from 'react-dom';
import { QRCodeSVG } from 'qrcode.react';
import { SpinLoading } from 'respinner';

const TFACodeModal: React.FC<{
  open: boolean;
  loading: boolean;
  onClose: () => void;
  onSend: (() => Promise<void>) | (() => void);
  title: string;
  subTitle?: ReactNode;
  code?: string;
}> = ({ open, loading, onClose, onSend, title, subTitle, code }) => {
  if (!open) return null;

  return createPortal(
    <div className="fixed inset-0 z-[100] flex items-center justify-center bg-[#0008]">
      <div className="bg-white p-6 rounded-lg w-full max-w-md space-y-2">
        <div className="flex text-center items-center justify-center pb-4 font-semibold text-xl">{title}</div>
        <div className="flex items-center justify-center text-center text-gray-500 text-sm">{subTitle}</div>
        <div className="max-w-xl w-full">
          {!loading && (
            <div className="space-y-6 py-4">
              <div className="flex items-center justify-center text-center text-gray-800 text-md font-semibold">
                <QRCodeSVG value={code ?? ''} />
              </div>
              <div className="flex items-center justify-center text-center text-gray-800 text-md font-semibold ">
                {code}
              </div>
            </div>
          )}
          {loading && (
            <div className="w-full flex justify-center items-center space-y-6 py-4">
              <SpinLoading size={80} count={10} barWidth={5} barHeight={20} borderRadius={2} fill="#CCC" className="" />
            </div>
          )}
          <div className="grid grid-cols-2 gap-4 pt-6">
            <button
              className="bg-blue-50 text-blue-500 font-semibold py-2 rounded-md hover:bg-blue-100  transition cursor-pointer"
              onClick={onClose}
            >
              Back
            </button>
            <button
              className={`hover:bg-blue-600 bg-blue-500 transition font-semibold text-white flex justify-center rounded px-8 py-2 cursor-pointer`}
              onClick={() => onSend()}
            >
              Continue
            </button>
          </div>
        </div>
      </div>
    </div>,
    document.body
  );
};

export default TFACodeModal;


components/ui/TFASlot.tsx
'use client';

import { useEffect, useState } from 'react';

import { useApiRequest } from '@/hooks';
import { authenticatorCodeUrl, authenticatorVerifyUrl, tfaStatusUrl } from '@/consts/paths';
import Toaster from '@/helpers/Toaster';
import Image from 'next/image';
import { SpinLoading } from 'respinner';

import checkCircle from '@/assets/images/icons/checkbox-circle-fill.svg';
import TFACodeModal from './TFACodeModal';
import OTPModal from './OTPModal';

const TFASlot = () => {
  const [status, setStatus] = useState({
    app: false,
    key: false,
    sms: false,
  });

  const [qrModal, setQRModal] = useState(false);
  const [otpModal, setOTPModal] = useState(false);
  const [confirmModal, setConfirmModal] = useState(false);
  const [appCode, setAppCode] = useState('');

  const {
    response: statusResponse,
    error: statusError,
    loading: statusLoading,
    sendRequest: sendStatusRequest,
  } = useApiRequest({
    endpoint: tfaStatusUrl,
    headers: {
      Accept: 'application/json',
      Authorization: `Bearer 124567890`, // this needs to be changed with the local storage key
    },
    method: 'GET',
  });

  const {
    response: verifyResponse,
    error: verifyError,
    loading: verifyLoading,
    sendRequest: sendVerifyRequest,
  } = useApiRequest({
    endpoint: authenticatorVerifyUrl,
    headers: {
      Accept: 'application/json',
      Authorization: `Bearer 124567890`, // this needs to be changed with the local storage key
    },
    method: 'POST',
  });

  const {
    response: codeResponse,
    error: codeError,
    loading: codeLoading,
    sendRequest: sendCodeRequest,
  } = useApiRequest({
    endpoint: authenticatorCodeUrl,
    headers: {
      Accept: 'application/json',
      Authorization: `Bearer 124567890`, // this needs to be changed with the local storage key
    },
    method: 'POST',
  });

  useEffect(() => {
    sendStatusRequest();
  }, []);

  useEffect(() => {
    if (statusResponse) {
      // Handle the response data here
      setStatus(statusResponse.data); // this should be changed according to the response structure, this is the real code
    }
  }, [statusResponse]);

  useEffect(() => {
    if (statusError) {
      Toaster.error(statusError?.message);

      // mock data instead: remove this code in production mode
      setStatus({
        app: true,
        key: false,
        sms: false,
      });
    }
  }, [statusError]);

  useEffect(() => {
    if (codeResponse) {
      // Handle the response data here
      setAppCode(codeResponse.data.code); // this should be changed according to the response structure, this is the real code
    }
  }, [codeResponse]);

  useEffect(() => {
    if (codeError) {
      Toaster.error(codeError?.message);

      // mock data instead: remove this code in production mode
      setAppCode('123456789asdfghhjkl');
    }
  }, [codeError]);

  return (
    <>
      <div className="pb-10">
        <h2 className="text-lg font-semibold mb-3">Two step verification</h2>
        <p className="text-gray-600 mb-3 text-sm">
          ArkusPay two-step authentication in order to keep your account secure. By using either your phone or an
          authenticator app in addition to your password, you ensure that no one else can log in to your account.
        </p>
        <p className="text-gray-600 mb-6 text-sm">
          We encourage you to enable multiple forms of two-step authentication as a backup in case you lose your mobile
          device or lose service.
        </p>

        <div className="space-y-3 flex flex-col">
          <button
            disabled={statusLoading}
            className={`w-80 max-w-full border border-gray-300 rounded-md py-2 flex items-center justify-center gap-2 text-sm font-medium hover:bg-blue-100 transition ${
              statusLoading ? 'cursor-not-allowed' : 'cursor-pointer'
            }`}
            onClick={() => {
              setQRModal(true);
              sendCodeRequest();
            }}
          >
            {statusLoading && (
              <SpinLoading size={16} count={10} barWidth={3} barHeight={5} borderRadius={1} fill="gray" className="" />
            )}
            {status.app && <Image src={checkCircle} alt="Check" className="w-5 h-5" />}
            Use an authenticator app
          </button>
          <button
            disabled={statusLoading}
            className={`w-80 max-w-full border border-gray-300 rounded-md py-2 flex items-center justify-center gap-2 text-sm font-medium hover:bg-blue-100 transition ${
              statusLoading ? 'cursor-not-allowed' : 'cursor-pointer'
            }`}
          >
            {statusLoading && (
              <SpinLoading size={16} count={10} barWidth={3} barHeight={5} borderRadius={1} fill="gray" className="" />
            )}
            {status.key && <Image src={checkCircle} alt="Check" className="w-5 h-5" />}Add a Security Key
          </button>
          <button
            disabled={statusLoading}
            className={`w-80 max-w-full border border-gray-300 rounded-md py-2 flex items-center justify-center gap-2 text-sm font-medium hover:bg-blue-100 transition ${
              statusLoading ? 'cursor-not-allowed' : 'cursor-pointer'
            }`}
          >
            {statusLoading && (
              <SpinLoading size={16} count={10} barWidth={3} barHeight={5} borderRadius={1} fill="gray" className="" />
            )}
            {status.sms && <Image src={checkCircle} alt="Check" className="w-5 h-5" />}Use SMS
          </button>
        </div>
      </div>
      <TFACodeModal
        title="Use an authenticator app"
        subTitle={
          <div className="text-sm text-gray-600">
            Download the free{' '}
            <a href="#" className="text-blue-500">
              Google authenticator
            </a>{' '}
            app, add a new account then scan this QR code to set up your account
          </div>
        }
        open={qrModal}
        onClose={() => setQRModal(false)}
        loading={codeLoading}
        onSend={() => {
          setQRModal(false);
          setOTPModal(true);
        }}
        code={appCode}
      />
      <OTPModal
        open={otpModal}
        sending={verifyLoading}
        onClose={() => setOTPModal(false)}
        onSend={async (otp) => {
          sendVerifyRequest({ otp });
        }}
        title={'Use an authenticator app'}
        subTitle={
          <div>
            Please enter your 6-digit authentication code from the{' '}
            <a href="#" className="text-blue-500">
              Google Authenticator
            </a>{' '}
            app.
          </div>
        }
      />
    </>
  );
};

export default TFASlot;


components/widgets/BalanceCard.tsx
import Image, { StaticImageData } from 'next/image';

const BalanceCard = ({ 
  icon, 
  label, 
  amount, 
  currency = 'USD' 
}: { 
  icon: StaticImageData; 
  label: string; 
  amount: number;
  currency?: string;
}) => {
  const formatCurrency = (amount: number, currency: string = 'USD') => {
    return new Intl.NumberFormat(currency === 'BRL' ? 'pt-BR' : 'en-US', {
      style: 'currency',
      currency: currency,
    }).format(amount);
  };

  return (
    <div className="bg-white rounded-xl p-4 flex-1">
      <div className="flex items-center mb-2">
        <Image src={icon} alt="label" className="w-8 h-8" />
      </div>
      <p className="text-sm text-gray-500 mb-2 font-semibold">{label}</p>
      <p className="text-2xl font-semibold">{formatCurrency(amount, currency)}</p>
    </div>
  );
};

export default BalanceCard;

components/widgets/index.ts
export { default as MainNavbar } from './MainNavbar';
export { default as SidebarMerchant } from './SidebarMerchant';
export { default as Pagination } from './Pagination';
export { default as BalanceCard } from './BalanceCard';


components/widgets/MainNavbar.tsx
import { Disclosure, DisclosureButton, DisclosurePanel } from '@headlessui/react';
import { Bars3Icon, XMarkIcon } from '@heroicons/react/24/outline';
import Image from 'next/image';
import Link from 'next/link';

import logoImg from '@/assets/images/logo.svg';

const navigation = [
  { name: 'Products', href: '#', current: true },
  { name: 'Services', href: '#', current: false },
  { name: 'Help', href: '#', current: false },
  { name: 'Contact Us', href: '#', current: false },
];

function classNames(...classes: string[]) {
  return classes.filter(Boolean).join(' ');
}

const MainNavbar = () => {
  return (
    <Disclosure as="nav" className="bg-white shadow">
      <div className="mx-auto max-w-7xl px-2 sm:px-6 lg:px-8">
        <div className="relative flex h-16 items-center justify-between">
          <div className="absolute inset-y-0 left-0 flex items-center sm:hidden">
            {/* Mobile menu button*/}
            <DisclosureButton className="group relative inline-flex items-center justify-center rounded-md p-2 text-gray-400 cursor-pointer hover:bg-gray-700 hover:text-white focus:ring-2 focus:ring-white focus:outline-hidden focus:ring-inset">
              <span className="absolute -inset-0.5" />
              <span className="sr-only">Open main menu</span>
              <Bars3Icon aria-hidden="true" className="block size-6 group-data-open:hidden" />
              <XMarkIcon aria-hidden="true" className="hidden size-6 group-data-open:block" />
            </DisclosureButton>
          </div>
          <div className="flex flex-1 items-center justify-center sm:items-stretch sm:justify-start">
            <div className="flex shrink-0 items-center cursor-pointer">
              <Link href="/">
                <Image alt="ArkusPay" src={logoImg} className="h-8 w-auto" />
              </Link>
            </div>
            <div className="hidden sm:ml-6 sm:block">
              <div className="flex space-x-4">
                {navigation.map((item) => (
                  <Link
                    key={item.name}
                    href={item.href}
                    aria-current={item.current ? 'page' : undefined}
                    className={classNames(
                      item.current ? 'bg-gray-400 text-white' : 'text-gray-700 hover:bg-gray-200',
                      'rounded-md px-3 py-2 text-sm font-medium'
                    )}
                  >
                    {item.name}
                  </Link>
                ))}
              </div>
            </div>
          </div>
          <div className="absolute inset-y-0 right-0 flex items-center pr-2 sm:static sm:inset-auto sm:ml-6 sm:pr-0">
            <Link
              href="/signin"
              type="button"
              className="relative rounded bg-black py-2 px-4 text-white hover:bg-gray-700 focus:ring-white focus:ring-offset-2 focus:ring-offset-gray-800 focus:outline-hidden"
            >
              Sign In
            </Link>
          </div>
        </div>
      </div>

      <DisclosurePanel className="sm:hidden">
        <div className="space-y-1 px-2 pt-2 pb-3">
          {navigation.map((item) => (
            <DisclosureButton
              key={item.name}
              as="a"
              href={item.href}
              aria-current={item.current ? 'page' : undefined}
              className={classNames(
                item.current ? 'bg-gray-400 text-white' : 'text-gray-700 hover:bg-gray-200',
                'block rounded-md px-3 py-2 text-base font-medium cursor-pointer'
              )}
            >
              {item.name}
            </DisclosureButton>
          ))}
        </div>
      </DisclosurePanel>
    </Disclosure>
  );
};

export default MainNavbar;


components/widgets/Pagination.tsx
import Image from 'next/image';

import ltIcon from '@/assets/images/icons/arrow-left.svg';
import gtIcon from '@/assets/images/icons/arrow-right.svg';

const Pagination: React.FC<{
  totalLength: number | undefined;
  limit: number | undefined;
  page: number | undefined;
  pageCount: number | undefined;
  pageClick: (page: number) => void;
}> = ({ totalLength, limit, page, pageCount, pageClick }) => {
  return (
    <div className="grid grid-cols-12 justify-between items-center text-sm">
      {totalLength === undefined && (
        <div className="lg:col-span-6 col-span-12 text-[#B5B7C0] text-center lg:text-start pb-2"></div>
      )}
      {totalLength !== undefined && totalLength !== 0 && (
        <div className="lg:col-span-6 col-span-12 text-[#B5B7C0] text-center lg:text-start pb-2">{`Showing data ${
          (page! - 1) * limit! + 1
        } to ${Math.min(totalLength, page! * limit!)} of ${totalLength} entries`}</div>
      )}
      {totalLength !== undefined && totalLength === 0 && (
        <div className="lg:col-span-6 col-span-12 text-[#B5B7C0] text-center lg:text-start pb-2">No Data</div>
      )}
      <div className="lg:col-span-6 col-span-12 flex lg:justify-end justify-center items-center text-xs pb-2">
        <div
          className="flex justify-center items-center px-2 py-1.5 border rounded-md border-gray-200 gap-1 mr-4 cursor-pointer"
          onClick={page! > 1 ? () => pageClick(page! - 1) : () => {}}
        >
          <Image src={ltIcon} alt="Previous" height={16} />
          Previous
        </div>
        {pageCount! >= 1 && pageCount! <= 7 && (
          <>
            {Array.from({ length: pageCount! }, (_, i) => i + 1).map((ele) => (
              <div
                className={`flex justify-center items-center h-full min-w-8 p-2 rounded-md mx-1 cursor-pointer ${
                  ele === page ? 'bg-gray-200 text-black' : 'text-gray-600'
                }`}
                key={ele}
                onClick={() => pageClick(ele)}
              >
                {ele}
              </div>
            ))}
          </>
        )}
        {pageCount! >= 8 && (page === 1 || page === 2) && (
          <>
            <div
              className={`flex justify-center items-center h-full min-w-8 p-2 rounded-md mx-1 cursor-pointer ${
                1 === page ? 'bg-gray-200 text-black' : 'text-gray-600'
              }`}
              key={1}
              onClick={() => pageClick(1)}
            >
              {1}
            </div>
            <div
              className={`flex justify-center items-center h-full min-w-8 p-2 rounded-md mx-1 cursor-pointer ${
                2 === page ? 'bg-gray-200 text-black' : 'text-gray-600'
              }`}
              key={2}
              onClick={() => pageClick(2)}
            >
              {2}
            </div>
            <div className="ellipse flex justify-center items-center min-w-8 mx-1">...</div>
            <div
              className={`flex justify-center items-center h-full min-w-8 p-2 rounded-md mx-1 cursor-pointer ${
                pageCount === page ? 'bg-gray-200 text-black' : 'text-gray-600'
              }`}
              key={pageCount}
              onClick={() => pageClick(pageCount!)}
            >
              {pageCount}
            </div>
          </>
        )}
        {pageCount! >= 8 && (page === pageCount || page === pageCount! - 1) && (
          <>
            <div
              className={`flex justify-center items-center h-full min-w-8 p-2 rounded-md mx-1 cursor-pointer ${
                1 === page ? 'bg-gray-200 text-black' : 'text-gray-600'
              }`}
              key={1}
              onClick={() => pageClick(1)}
            >
              {1}
            </div>
            <div className="ellipse flex justify-center items-center min-w-8 mx-1">...</div>
            <div
              className={`flex justify-center items-center h-full min-w-8 p-2 rounded-md mx-1 cursor-pointer ${
                pageCount! - 1 === page ? 'bg-gray-200 text-black' : 'text-gray-600'
              }`}
              key={pageCount! - 1}
              onClick={() => pageClick(pageCount! - 1)}
            >
              {pageCount! - 1}
            </div>
            <div
              className={`flex justify-center items-center h-full min-w-8 p-2 rounded-md mx-1 cursor-pointer ${
                pageCount === page ? 'bg-gray-200 text-black' : 'text-gray-600'
              }`}
              key={pageCount}
              onClick={() => pageClick(pageCount!)}
            >
              {pageCount}
            </div>
          </>
        )}
        {pageCount! >= 8 && page! + 1 < pageCount! && page! - 1 > 1 && (
          <>
            <div
              className={`flex justify-center items-center h-full min-w-8 p-2 rounded-md mx-1 cursor-pointer ${
                1 === page ? 'bg-gray-200 text-black' : 'text-gray-600'
              }`}
              key={1}
              onClick={() => pageClick(1)}
            >
              {1}
            </div>
            <div className="ellipse flex justify-center items-center min-w-8 mx-1">...</div>
            <div
              className={`flex justify-center items-center h-full min-w-8 p-2 rounded-md mx-1 cursor-pointer ${
                page === page ? 'bg-gray-200 text-black' : 'text-gray-600'
              }`}
              key={page}
              onClick={() => pageClick(page!)}
            >
              {page}
            </div>
            <div className="ellipse flex justify-center items-center min-w-8 mx-1">...</div>
            <div
              className={`flex justify-center items-center h-full min-w-8 p-2 rounded-md mx-1 cursor-pointer ${
                pageCount === page ? 'bg-gray-200 text-black' : 'text-gray-600'
              }`}
              key={pageCount}
              onClick={() => pageClick(pageCount!)}
            >
              {pageCount}
            </div>
          </>
        )}
        <div
          className="flex justify-center items-center px-2 py-1.5 border rounded-md border-gray-200 gap-1 ml-4 cursor-pointer"
          onClick={page === pageCount ? () => {} : () => pageClick(page! + 1)}
        >
          Next
          <Image src={gtIcon} alt="Next" height={16} />
        </div>
      </div>
    </div>
  );
};

export default Pagination;


components/widgets/SidebarMerchant.tsx
'use client';

import { usePathname, useRouter } from 'next/navigation';
import { useEffect, useState } from 'react';
import Image, { StaticImageData } from 'next/image';
import Link from 'next/link';

import logoImg from '@/assets/images/logo.svg';
import dashIcon from '@/assets/images/icons/dashboard.svg';
import transIcon from '@/assets/images/icons/transactions.svg';
import payLinkIcon from '@/assets/images/icons/paymentLink.svg';
import integIcon from '@/assets/images/icons/integrations.svg';
import balanceIcon from '@/assets/images/icons/balance.svg';
import settingsIcon from '@/assets/images/icons/settings.svg';
import logoutIcon from '@/assets/images/icons/logout.svg';
import { CheckCircle, Menu, X } from 'lucide-react';

const Sidebar = () => {
  const router = useRouter();
  const pathname = usePathname();
  const [currentTab, setCurrentTab] = useState<string | null>(null);
  const [isOpen, setIsOpen] = useState(false);
  const [showConfirmModal, setConfirmModal] = useState(false);
  const [isClient, setIsClient] = useState(false);

  useEffect(() => {
    setIsClient(true);
  }, []);

  useEffect(() => {
    if (pathname) {
      const subpath = pathname.substring(pathname.indexOf('/merchant') + '/merchant'.length);
      if (subpath.startsWith('/transactions')) setCurrentTab('transactions');
      else if (subpath.startsWith('/products')) setCurrentTab('products');
      else if (subpath.startsWith('/integration')) setCurrentTab('integration');
      else if (subpath.startsWith('/finance')) setCurrentTab('finance');
      else if (subpath.startsWith('/settings')) setCurrentTab('settings');
      else setCurrentTab('dashboard');
    }
  }, [pathname]);

  const handleLogout = async () => {
    if (typeof window === 'undefined') return;
    
    try {
      // Just clear local storage and redirect (no logout API in your HTML code)
      localStorage.removeItem('jwt_token');
      localStorage.removeItem('user_data');
      router.push('/signin');
    } catch (error) {
      console.error('Error during logout:', error);
      router.push('/signin');
    }
  };

  if (!isClient) {
    return null;
  }

  return (
    <>
      {/* Mobile Menu Button */}
      <div className="md:hidden fixed top-4 left-4 z-50">
        <button
          className={`p-2 rounded-full bg-white text-gray-800 cursor-pointer ${
            isOpen ? 'translate-x-48' : 'translate-0 border border-gray-300'
          } transform transition-transform duration-300 ease-in-out`}
          onClick={() => setIsOpen(!isOpen)}
        >
          {isOpen ? <X className="w-6 h-6" /> : <Menu className="w-6 h-6" />}
        </button>
      </div>

      {/* Sidebar */}
      <aside
        className={`fixed top-0 left-0 h-screen w-64 bg-white p-4 flex flex-col justify-between z-40 transform transition-transform duration-300 ease-in-out
    ${isOpen ? 'translate-x-0' : '-translate-x-full'}
    md:translate-x-0 md:h-screen md:transform-none md:shadow-none shadow-2xl
  `}
      >
        <div>
          {/* Logo */}
          <div className="h-24 px-4 py-3">
            <Link href="/">
              <Image alt="ArkusPay" src={logoImg} className="h-7 w-auto" />
            </Link>
          </div>

          {/* Navigation Links */}
          <div className="space-y-1">
            <SidebarLink href="/merchant" icon={dashIcon} label="Dashboard" active={currentTab === 'dashboard'} />
            <SidebarLink
              href="/merchant/transactions"
              icon={transIcon}
              label="Transactions"
              active={currentTab === 'transactions'}
            />
            <SidebarLink
              href="/merchant/integrations"
              icon={integIcon}
              label="Integrations"
              active={currentTab === 'integration'}
            />
            <SidebarLink
              href="/merchant/products"
              icon={payLinkIcon}
              label="Products"
              active={currentTab === 'products'}
            />
            <SidebarLink
              href="/merchant/finance"
              icon={balanceIcon}
              label="Finance"
              active={currentTab === 'finance'}
            />
          </div>
        </div>

        {/* Settings link at the bottom */}
        <div className="pb-1">
          <SidebarLink
            href="/merchant/settings"
            icon={settingsIcon}
            label="Settings"
            active={currentTab === 'settings'}
          />
          <button className="block px-3 py-2 rounded-lg cursor-pointer" onClick={() => setConfirmModal(true)}>
            <div className="flex items-center gap-3 text-sm font-medium">
              <Image src={logoutIcon} alt={`Logout Icon`} width={16} height={16} /> Log Out
            </div>
          </button>
        </div>
      </aside>
      {showConfirmModal && (
        <div
          className="fixed inset-0 z-50 flex items-center justify-center bg-[#0008]"
          onClick={() => setConfirmModal(false)}
        >
          <div className="bg-white p-6 rounded-lg w-full max-w-sm space-y-4">
            <div className="flex justify-center text-center items-center py-4 font-semibold text-xl">
              Are you sure to log out?
            </div>
            <div className="max-w-xl w-full space-y-4">
              <div className="grid grid-cols-2 gap-4 pt-6">
                <button
                  className="bg-blue-100 text-blue-500 font-semibold py-2 rounded-md hover:bg-blue-200 transition cursor-pointer"
                  onClick={(e) => {
                    e.stopPropagation();
                    setConfirmModal(false);
                  }}
                >
                  Back
                </button>
                <button
                  className="hover:bg-blue-600 text-white font-semibold py-2 rounded-md bg-blue-500 transition cursor-pointer"
                  onClick={(e) => {
                    e.stopPropagation();
                    setConfirmModal(false);
                    handleLogout();
                  }}
                >
                  Confirm
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </>
  );
};

const SidebarLink = ({
  href,
  icon,
  label,
  active,
  className,
}: {
  href: string;
  icon: StaticImageData;
  label: string;
  active: boolean;
  className?: string;
}) => (
  <Link
    href={href}
    className={`block px-3 py-2 rounded-lg cursor-pointer ${active ? 'bg-blue-100' : ''} ${className ?? ''}`}
  >
    <div className="flex items-center gap-3 text-sm font-medium">
      <Image src={icon} alt={`${label} Icon`} width={16} height={16} /> {label}
    </div>
  </Link>
);

export default Sidebar;

consts/api.ts
// API configuration
export const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:5000/api';

// API endpoints
export const API_ENDPOINTS = {
  AUTH: {
    LOGIN: '/auth/login',
    ME: '/auth/me',
    REGISTER: '/auth/register'
  },
  FINANCE: {
    BALANCE: '/finance/balance',
    TRANSACTIONS: '/finance/transactions'
  }
};

consts/paths.ts
export const apiBaseUrl = `${process.env.NEXT_PUBLIC_API_URL}`;

// auth
export const signupUrl = `/auth/register`;
export const signinUrl = `/auth/login`;
export const meUrl = `/auth/me`;

// onboarding
export const onboardingBusinessUrl = `/onboarding/business`;
export const onboardingAddressUrl = `/onboarding/address`;
export const onboardingSellingUrl = `/onboarding/selling-method`;

// notifications
export const notiUrl = `/notifications`;

// transactions
export const transactionsUrl = `/transactions`;
export const transactionDetailUrl = `/transactions`;

// products
export const productsUrl = `/products`;
export const productDetailUrl = `/products`;

// integrations
export const webhooksUrl = `/webhooks`;

// finance
export const payoutsUrl = `/payouts`;
export const payoutDetailUrl = `/payouts`;
export const payoutAccountsUrl = `/payouts/accounts`;

// settings
export const tfaStatusUrl = `/settings/tfa/status`;
export const profileUrl = `/settings/profile`;
export const profileOTPUrl = `/settings/profile/otp`;
export const passwordChangeUrl = `/settings/profile/changepassword`;
export const emailChangeUrl = `/settings/profile/changemail`;
export const mailOTPUrl = `/settings/profile/otpmail`;
export const authenticatorCodeUrl = `/settings/auth/app/code`;
export const authenticatorVerifyUrl = `/settings/auth/app/verify`;

consts/styles.ts
import { Transaction } from '@/types';

export const txStatusStyles: Record<Transaction['status'], string> = {
  Succeeded: 'bg-green-100 text-green-700',
  Pending: 'bg-yellow-100 text-yellow-700',
  Failed: 'bg-red-100 text-red-700',
  Chargeback: 'bg-red-100 text-red-700',
  Refunded: 'bg-gray-200 text-gray-700',
};


consts/vars.ts
export const ITEMS_PER_PAGE = 10;


crr.js
// merge.js
const fs = require('fs').promises;
const path = require('path');
const readline = require('readline');

// Built-in directories to ignore
const DEFAULT_IGNORE_DIR = new Set(['node_modules', '.next', 'public']);
// Only include these extensions
const ALLOWED_EXT = new Set(['.js', '.html', '.env', '.css', '.ts', '.tsx']);

async function collectFiles(dir, ignoreFiles, ignoreDirs) {
  let results = [];
  const entries = await fs.readdir(dir, { withFileTypes: true });

  for (let entry of entries) {
    const fullPath = path.join(dir, entry.name);

    if (entry.isDirectory()) {
      // skip any directory in the ignoreDirs set
      if (ignoreDirs.has(entry.name)) continue;
      results = results.concat(await collectFiles(fullPath, ignoreFiles, ignoreDirs));

    } else {
      const ext = path.extname(entry.name).toLowerCase();
      // skip unwanted extensions or explicitly ignored filenames
      if (ALLOWED_EXT.has(ext) && !ignoreFiles.has(entry.name)) {
        results.push(fullPath);
      }
    }
  }

  return results;
}

function askQuestion(query) {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });
  return new Promise(resolve => {
    rl.question(query, answer => {
      rl.close();
      resolve(answer);
    });
  });
}

(async () => {
  try {
    // 1) Ask about files to ignore
    const ansFiles = (await askQuestion('Ignore file names? (y/n): '))
      .trim()
      .toLowerCase();

    const ignoreFiles = new Set();
    if (ansFiles === 'y' || ansFiles === 'yes') {
      const list = await askQuestion(
        'Enter file names to ignore, separated by commas (e.g. dhkm.js, djksm.js): '
      );
      list
        .split(',')
        .map(name => name.trim())
        .filter(name => name.length > 0)
        .forEach(name => ignoreFiles.add(name));
      console.log(`Ignoring files: ${[...ignoreFiles].join(', ')}`);
    }

    // 2) Ask about folders to ignore
    const ansDirs = (await askQuestion('Ignore folder names? (y/n): '))
      .trim()
      .toLowerCase();

    // merge user choices with the defaults
    const ignoreDirs = new Set(DEFAULT_IGNORE_DIR);
    if (ansDirs === 'y' || ansDirs === 'yes') {
      const list = await askQuestion(
        'Enter folder names to ignore, separated by commas (e.g. build, dist): '
      );
      list
        .split(',')
        .map(name => name.trim())
        .filter(name => name.length > 0)
        .forEach(name => ignoreDirs.add(name));
    }
    console.log(`Ignoring folders: ${[...ignoreDirs].join(', ')}`);

    // Determine base directory
    const baseDir = process.argv[2]
      ? path.resolve(process.argv[2])
      : __dirname;
    console.log(`Scanning folder: ${baseDir}`);

    // Collect and filter files
    const files = await collectFiles(baseDir, ignoreFiles, ignoreDirs);

    if (files.length === 0) {
      console.log('No files to merge.');
      process.exit(0);
    }

    // Read and merge contents
    let merged = '';
    for (let filePath of files) {
      const content = await fs.readFile(filePath, 'utf8');
      const rel = path
        .relative(baseDir, filePath)
        .split(path.sep)
        .join('/');
      merged += `${rel}\n${content}\n\n`;
    }

    // Write out merged.txt
    const outPath = path.join(baseDir, 'merged.txt');
    await fs.writeFile(outPath, merged, 'utf8');
    console.log(`✅ Merged ${files.length} files into ${outPath}`);
  } catch (err) {
    console.error('Error:', err);
    process.exit(1);
  }
})();


helpers/Toaster.tsx
import React from 'react';
import { toast } from 'react-toastify';

class Toaster {
  public static success(message: string): void {
    toast.success(message, {
      position: 'top-right',
      autoClose: 5000,
      hideProgressBar: false,
      closeOnClick: true,
      pauseOnHover: true,
      draggable: true,
    });
  }

  public static error(message: string): void {
    toast.error(message, {
      position: 'top-right',
      autoClose: 5000,
      hideProgressBar: false,
      closeOnClick: true,
      pauseOnHover: true,
      draggable: true,
    });
  }

  public static info(message: string): void {
    toast.info(message, {
      position: 'top-right',
      autoClose: 5000,
      hideProgressBar: false,
      closeOnClick: true,
      pauseOnHover: true,
      draggable: true,
    });
  }

  public static warning(message: string): void {
    toast.warning(message, {
      position: 'top-right',
      autoClose: 5000,
      hideProgressBar: false,
      closeOnClick: true,
      pauseOnHover: true,
      draggable: true,
    });
  }
}

export default Toaster;

hooks/index.ts
export { useApiRequest } from './useApiRequest';


hooks/useApiRequest.ts
import { useState } from 'react';
import axios, { AxiosRequestConfig, AxiosResponse } from 'axios';

interface UseApiRequestProps {
  endpoint: string;
  method?: 'GET' | 'POST' | 'PUT' | 'DELETE';
  data?: any;
  params?: any;
  headers?: Record<string, string>;
  auth?: boolean;
  immediate?: boolean;
}

interface UseApiRequestResponse<T extends { message?: string; data?: any; [key: string]: any }> {
  response: T | null;
  error: T | null;
  loading: boolean;
  sendRequest: (url?: string, formData?: any) => Promise<void>;
}

export const useApiRequest = <T extends { message?: string; data?: any; [key: string]: any }>({
  endpoint,
  method = 'GET',
  data = null,
  params = null,
  headers = { 'Content-Type': 'application/json' },
  auth = true,
  immediate = true,
}: UseApiRequestProps): UseApiRequestResponse<T> => {
  const [response, setResponse] = useState<T | null>(null);
  const [error, setError] = useState<T | null>(null);
  const [loading, setLoading] = useState<boolean>(false);

  const getToken = () => {
    if (typeof window === 'undefined') return '';
    return localStorage.getItem('jwt_token') || '';
  };

  const sendRequest = async (url = '', formData = {}) => {
    setLoading(true);
    setError(null);

    // Get the API URL from environment
    const apiBaseUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:5000/api';
    
    // Build the full URL - remove /api/v1 from our base since it's already in env
    const fullUrl = url ? `${apiBaseUrl}${endpoint}${url}` : `${apiBaseUrl}${endpoint}`;

    // Construct headers, merging provided headers with conditional auth header
    const requestHeaders = {
      ...(formData instanceof FormData ? {} : headers), // Don't set Content-Type for FormData
      ...(auth && { Authorization: `Bearer ${getToken()}` }),
    };

    const config: AxiosRequestConfig = {
      url: fullUrl,
      method,
      headers: requestHeaders,
      data: formData instanceof FormData ? formData : { ...data, ...formData },
      params: {
        ...params,
      },
    };

    try {
      const res: AxiosResponse<T> = await axios(config);
      setResponse(res.data);
    } catch (err: any) {
      if (axios.isAxiosError(err)) {
        setError(err.response?.data ?? err);
      } else {
        setError({
          message: err.message ?? 'Something went wrong!',
        } as T);
      }
    } finally {
      setLoading(false);
    }
  };

  return { response, error, loading, sendRequest };
};

lib/data/states.ts
export const US_STATES = [
    { code: 'AL', name: 'Alabama' },
    { code: 'AK', name: 'Alaska' },
    { code: 'AZ', name: 'Arizona' },
    { code: 'AR', name: 'Arkansas' },
    { code: 'CA', name: 'California' },
    { code: 'CO', name: 'Colorado' },
    { code: 'CT', name: 'Connecticut' },
    { code: 'DE', name: 'Delaware' },
    { code: 'FL', name: 'Florida' },
    { code: 'GA', name: 'Georgia' },
    { code: 'HI', name: 'Hawaii' },
    { code: 'ID', name: 'Idaho' },
    { code: 'IL', name: 'Illinois' },
    { code: 'IN', name: 'Indiana' },
    { code: 'IA', name: 'Iowa' },
    { code: 'KS', name: 'Kansas' },
    { code: 'KY', name: 'Kentucky' },
    { code: 'LA', name: 'Louisiana' },
    { code: 'ME', name: 'Maine' },
    { code: 'MD', name: 'Maryland' },
    { code: 'MA', name: 'Massachusetts' },
    { code: 'MI', name: 'Michigan' },
    { code: 'MN', name: 'Minnesota' },
    { code: 'MS', name: 'Mississippi' },
    { code: 'MO', name: 'Missouri' },
    { code: 'MT', name: 'Montana' },
    { code: 'NE', name: 'Nebraska' },
    { code: 'NV', name: 'Nevada' },
    { code: 'NH', name: 'New Hampshire' },
    { code: 'NJ', name: 'New Jersey' },
    { code: 'NM', name: 'New Mexico' },
    { code: 'NY', name: 'New York' },
    { code: 'NC', name: 'North Carolina' },
    { code: 'ND', name: 'North Dakota' },
    { code: 'OH', name: 'Ohio' },
    { code: 'OK', name: 'Oklahoma' },
    { code: 'OR', name: 'Oregon' },
    { code: 'PA', name: 'Pennsylvania' },
    { code: 'RI', name: 'Rhode Island' },
    { code: 'SC', name: 'South Carolina' },
    { code: 'SD', name: 'South Dakota' },
    { code: 'TN', name: 'Tennessee' },
    { code: 'TX', name: 'Texas' },
    { code: 'UT', name: 'Utah' },
    { code: 'VT', name: 'Vermont' },
    { code: 'VA', name: 'Virginia' },
    { code: 'WA', name: 'Washington' },
    { code: 'WV', name: 'West Virginia' },
    { code: 'WI', name: 'Wisconsin' },
    { code: 'WY', name: 'Wyoming' },
  ];
  
  export const BR_STATES = [
    { code: 'AC', name: 'Acre' },
    { code: 'AL', name: 'Alagoas' },
    { code: 'AP', name: 'Amapá' },
    { code: 'AM', name: 'Amazonas' },
    { code: 'BA', name: 'Bahia' },
    { code: 'CE', name: 'Ceará' },
    { code: 'DF', name: 'Distrito Federal' },
    { code: 'ES', name: 'Espírito Santo' },
    { code: 'GO', name: 'Goiás' },
    { code: 'MA', name: 'Maranhão' },
    { code: 'MT', name: 'Mato Grosso' },
    { code: 'MS', name: 'Mato Grosso do Sul' },
    { code: 'MG', name: 'Minas Gerais' },
    { code: 'PA', name: 'Pará' },
    { code: 'PB', name: 'Paraíba' },
    { code: 'PR', name: 'Paraná' },
    { code: 'PE', name: 'Pernambuco' },
    { code: 'PI', name: 'Piauí' },
    { code: 'RJ', name: 'Rio de Janeiro' },
    { code: 'RN', name: 'Rio Grande do Norte' },
    { code: 'RS', name: 'Rio Grande do Sul' },
    { code: 'RO', name: 'Rondônia' },
    { code: 'RR', name: 'Roraima' },
    { code: 'SC', name: 'Santa Catarina' },
    { code: 'SP', name: 'São Paulo' },
    { code: 'SE', name: 'Sergipe' },
    { code: 'TO', name: 'Tocantins' },
  ];
  
  export const getStatesForCountry = (country: 'US' | 'BR') => {
    return country === 'US' ? US_STATES : BR_STATES;
  };

lib/data/timezones.ts
export const US_TIMEZONES = [
    { value: 'America/New_York', label: 'Eastern Time (EST/EDT)' },
    { value: 'America/Chicago', label: 'Central Time (CST/CDT)' },
    { value: 'America/Denver', label: 'Mountain Time (MST/MDT)' },
    { value: 'America/Los_Angeles', label: 'Pacific Time (PST/PDT)' },
    { value: 'America/Anchorage', label: 'Alaska Time (AKST/AKDT)' },
    { value: 'America/Adak', label: 'Hawaii-Aleutian Time (HAST/HADT)' },
  ];
  
  export const BR_TIMEZONES = [
    { value: 'America/Sao_Paulo', label: 'Brasília Time (BRT/BRST)' },
    { value: 'America/Bahia', label: 'Bahia Time (BRT)' },
    { value: 'America/Manaus', label: 'Amazon Time (AMT/AMST)' },
    { value: 'America/Noronha', label: 'Fernando de Noronha Time (FNT)' },
  ];
  
  export const getTimezonesForCountry = (country: 'US' | 'BR') => {
    return country === 'US' ? US_TIMEZONES : BR_TIMEZONES;
  };

lib/schemas/onboarding-schemas.ts
import { z } from 'zod';

// Email validation
export const emailSchema = z
  .string()
  .email('Enter a valid email')
  .min(1, 'Email is required');

// Password validation
export const passwordSchema = z
  .string()
  .min(8, 'Password must be at least 8 characters')
  .regex(/[A-Z]/, 'Password must contain at least one uppercase letter')
  .regex(/[a-z]/, 'Password must contain at least one lowercase letter')
  .regex(/\d/, 'Password must contain at least one digit');

// Signup schema
export const signupSchema = z
  .object({
    email: emailSchema,
    password: passwordSchema,
    confirmPassword: z.string().min(1, 'Please confirm your password'),
  })
  .refine((data) => data.password === data.confirmPassword, {
    message: 'Passwords do not match',
    path: ['confirmPassword'],
  });

// Business details schema
export const businessSchema = z.object({
  businessName: z.string().min(2, 'Business name must be at least 2 characters'),
  country: z.enum(['US', 'BR']),
  firstName: z
    .string()
    .min(2, 'First name must be at least 2 characters')
    .regex(/^[a-zA-Z\s]+$/, 'First name must contain only letters'),
  lastName: z
    .string()
    .min(2, 'Last name must be at least 2 characters')
    .regex(/^[a-zA-Z\s]+$/, 'Last name must contain only letters'),
});

// Address schema
export const addressSchema = z.object({
  line1: z.string().min(5, 'Address must be at least 5 characters'),
  line2: z.string().optional(),
  city: z.string().min(2, 'City must be at least 2 characters'),
  state: z.string().min(1, 'State is required'),
  postalCode: z.string().min(1, 'Postal code is required'),
  phone: z.string().min(1, 'Phone number is required'),
  timezone: z.string().min(1, 'Timezone is required'),
});

// Selling method schema
export const sellingSchema = z
  .object({
    sellingMethod: z.enum(['hosted_store', 'integration']),
    integrationTypes: z.array(z.string()).optional(),
  })
  .refine(
    (data) => {
      if (data.sellingMethod === 'integration') {
        return data.integrationTypes && data.integrationTypes.length > 0;
      }
      return true;
    },
    {
      message: 'Please select at least one integration type',
      path: ['integrationTypes'],
    }
  );

export type SignupFormData = z.infer<typeof signupSchema>;
export type BusinessFormData = z.infer<typeof businessSchema>;
export type AddressFormData = z.infer<typeof addressSchema>;
export type SellingFormData = z.infer<typeof sellingSchema>;

lib/store/onboarding-store.ts
import { create } from 'zustand';
import { persist } from 'zustand/middleware';

export type OnboardingStage = 'signup' | 'business' | 'address' | 'selling' | 'complete';

export interface OnboardingData {
  businessName: string;
  country: 'US' | 'BR';
  firstName: string;
  lastName: string;
  line1: string;
  line2: string;
  city: string;
  state: string;
  postalCode: string;
  phone: string;
  timezone: string;
  sellingMethod: 'hosted_store' | 'integration';
  integrationTypes: string[];
}

interface OnboardingStore {
  stage: OnboardingStage;
  data: Partial<OnboardingData>;
  setStage: (stage: OnboardingStage) => void;
  updateData: (newData: Partial<OnboardingData>) => void;
  clearData: () => void;
  getCurrentStepIndex: () => number;
  isComplete: () => boolean;
}

const initialData: Partial<OnboardingData> = {
  businessName: '',
  country: 'US',
  firstName: '',
  lastName: '',
  line1: '',
  line2: '',
  city: '',
  state: '',
  postalCode: '',
  phone: '',
  timezone: '',
  sellingMethod: 'hosted_store',
  integrationTypes: [],
};

export const useOnboardingStore = create<OnboardingStore>()(
  persist(
    (set, get) => ({
      stage: 'signup',
      data: initialData,
      setStage: (stage) => set({ stage }),
      updateData: (newData) =>
        set((state) => ({
          data: { ...state.data, ...newData },
        })),
      clearData: () => set({ 
        data: initialData, 
        stage: 'complete' 
      }),
      getCurrentStepIndex: () => {
        const { stage } = get();
        switch (stage) {
          case 'business':
            return 0;
          case 'address':
            return 1;
          case 'selling':
            return 2;
          default:
            return -1;
        }
      },
      isComplete: () => {
        const { stage } = get();
        return stage === 'complete';
      },
    }),
    {
      name: 'onboarding-storage',
    }
  )
);

lib/utils.ts
// lib/utils.ts
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

middleware.ts
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';

export function middleware(request: NextRequest) {
  const token = request.cookies.get('token')?.value;
  const pathname = request.nextUrl.pathname;

  // Public paths that don't require authentication
  const publicPaths = ['/', '/signin', '/signup'];
  const isPublicPath = publicPaths.includes(pathname);
  
  // Onboarding paths
  const isOnboardingPath = pathname.startsWith('/onboarding');
  
  // Merchant paths
  const isMerchantPath = pathname.startsWith('/merchant');

  // If no token and trying to access protected route
  if (!token && !isPublicPath && !isOnboardingPath) {
    return NextResponse.redirect(new URL('/signup', request.url));
  }

  // If has token and trying to access public auth pages (signin/signup)
  if (token && (pathname === '/signin' || pathname === '/signup')) {
    // We need to check user status, but since middleware can't make async calls easily,
    // we'll let the pages handle the redirect based on onboarding status
    return NextResponse.next();
  }

  // If has token and trying to access merchant area
  if (token && isMerchantPath) {
    // Let the merchant pages handle onboarding checks
    return NextResponse.next();
  }

  // If has token and trying to access onboarding
  if (token && isOnboardingPath) {
    // Let the onboarding pages handle completion checks
    return NextResponse.next();
  }

  // Allow requests to continue
  return NextResponse.next();
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - api (API routes)
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * - assets (static assets)
     */
    '/((?!api|_next/static|_next/image|favicon.ico|assets).*)',
  ],
};

mock/hook.ts
import { Webhook } from '@/types';

export const webhookMockData: Webhook[] = [
  {
    createdAt: new Date(),
    type: 'Payment',
    url: 'https://connect.riskpay.com/sendwebhook/vbsfrddsfsdf',
    isActive: true,
  },
  {
    createdAt: new Date(),
    type: 'Payment',
    url: 'https://connect.riskpay.com/sendwebhook/sasbhjsx5ssSKH',
    isActive: true,
  },
  {
    createdAt: new Date(),
    type: 'Order',
    url: 'https://connect.riskpay.com/sendwebhook/uyisdfgsdfsdf',
    isActive: true,
  },
  {
    createdAt: new Date(),
    type: 'Subscription',
    url: 'https://connect.riskpay.com/sendwebhook/trugdfgdfg',
    isActive: false,
  },
  {
    createdAt: new Date(),
    type: 'Payment',
    url: 'https://connect.riskpay.com/sendwebhook/sdfcvsdf',
    isActive: true,
  },
  {
    createdAt: new Date(),
    type: 'Customer',
    url: 'https://connect.riskpay.com/sendwebhook/sasbhjsx5ssSKH',
    isActive: false,
  },
];


mock/index.ts
export * from './transaction';
export * from './hook';
export * from './payout';
export * from './integrations';
export * from './notifications';
export * from './product';


mock/integrations.ts
export const integrations = [
  {
    section: 'Store Platforms',
    items: [
      {
        name: 'Shopify',
        icon: '/assets/icons/shopify.png',
        description: 'Integrate your Shopify store with us',
      },
      {
        name: 'WooCommerce',
        icon: '/assets/icons/woocommerce.png',
        description: 'Integrate your WooCommerce store with us',
      },
      {
        name: 'WordPress',
        icon: '/assets/icons/wordpress.png',
        description: 'Integrate your Wordpress website with us',
      },
    ],
  },
  {
    section: 'Tracking Pixels',
    items: [
      {
        name: 'Google Tag Manager',
        icon: '/assets/icons/gtm.png',
        description: 'Integrate your Google tag manager with us',
      },
      {
        name: 'Google Analytics',
        icon: '/assets/icons/ga.png',
        description: 'Integrate your Google Analytics with us',
      },
      {
        name: 'Google Ads',
        icon: '/assets/icons/googleads.png',
        description: 'Integrate your Google Ads with us',
      },
      {
        name: 'Facebook Ads',
        icon: '/assets/icons/facebookads.png',
        description: 'Integrate your Facebook with us',
      },
      { name: 'TikTok Ads', icon: '/assets/icons/tiktok.png', description: 'Integrate your Tiktok with us' },
    ],
  },
  {
    section: 'Own Integration',
    items: [
      {
        name: 'API Integration',
        icon: '/assets/icons/api.png',
        description: 'Integrate your API service with us',
      },
      {
        name: 'Webhook',
        icon: '/assets/icons/webhook.png',
        description: 'Integrate your custom webhook with us',
      },
    ],
  },
];


mock/notifications.ts
import { Notification } from '@/types';

export const mockNotiData: Notification[] = [
  {
    id: '1',
    date: new Date('2023-10-01T10:00:00Z'),
    title: 'Transaction Succeeded',
    content: 'Your transaction has been successfully processed.',
  },
  {
    id: '2',
    date: new Date('2023-10-02T12:00:00Z'),
    title: 'Transaction Pending',
    content: 'Your transaction is currently pending.',
  },
  {
    id: '3',
    date: new Date('2023-10-03T14:00:00Z'),
    title: 'Transaction Failed',
    content: 'Your transaction has failed. Please try again.',
  },
  {
    id: '4',
    date: new Date('2023-10-04T16:00:00Z'),
    title: 'Chargeback Notification',
    content: 'A chargeback has been initiated for your transaction.',
  },
  {
    id: '5',
    date: new Date('2023-10-05T18:00:00Z'),
    title: 'Refund Processed',
    content: 'Your refund has been successfully processed.',
  },
];


mock/payout.ts
import { Account, PayoutData, PayoutDetail } from '@/types';

export const payoutDataMock: PayoutData = {
  pagination: {
    totalLength: 120,
    itemsPerPage: 10,
    pageCount: 12,
    currentPage: 1,
  },
  data: [
    {
      id: '9817201208129',
      createdAt: new Date(),
      txid: 'adsoifuasofjoiefwe2',
      method: 'bank',
      status: 'Approved',
      amount: 927,
    },
    {
      id: '456546456456',
      createdAt: new Date(),
      txid: 'adsoifuasofjoiefwe2',
      method: 'bank',
      status: 'Failed',
      amount: 234,
    },
    {
      id: '2554765464564',
      createdAt: new Date(),
      txid: 'adsoifuasofjoiefwe2',
      method: 'crypto',
      status: 'Pending',
      amount: 927,
    },
    {
      id: '7688567567567',
      createdAt: new Date(),
      txid: '4568678678678678',
      method: 'bank',
      status: 'Failed',
      amount: 12.67,
    },
    {
      id: '9817201208129',
      createdAt: new Date(),
      txid: 'adsoifuasofjoiefwe2',
      method: 'bank',
      status: 'Approved',
      amount: 6785,
    },
  ],
};

export const payoutDetailMock: PayoutDetail = {
  id: '2124fsdfsd2424',
  status: 'Approved',
  amount: {
    total: 145,
    tax: 2.5,
    fee: 2,
  },
  txid: 'HSBSHS7895GSRh',
  createdAt: new Date(),
  processedAt: new Date(),
  depositedAt: new Date(),
};

export const accountsMock: Account[] = [
  {
    id: 'sdfdsfsdfdsfdf',
    holder: 'Nur Hassan',
    address: '9870802109012912',
    where: 'American Bank',
    isActive: true,
    updatedAt: new Date(),
  },
];


mock/product.ts
import { ProductData, ProductDetail } from '@/types';

export const prDataMock: ProductData = {
  pagination: {
    totalLength: 120,
    itemsPerPage: 10,
    pageCount: 12,
    currentPage: 1,
  },
  data: [
    {
      date: new Date(),
      id: 'jhdgjasdFGrsg45878',
      name: 'mastercard',
      url: 'https://buy.riskpay.com/8hWsf85Rt',
      image: 'https://picsum.photos/id/227/200/300',
      status: 'Deactivated',
      amount: 145.25,
    },
    {
      date: new Date(),
      id: 'jhdgjasdFGrsg45878',
      name: 'SDQQWDSD SDDS',
      url: 'https://buy.riskpay.com/8hWsf85Rt',
      image: 'https://picsum.photos/id/445/200/300',
      status: 'Active',
      amount: 145.25,
    },
    {
      date: new Date(),
      id: 'jhdgjasdFGrsg45878',
      name: 'Jane Eyre',
      url: 'https://buy.riskpay.com/8hWsf85Rt',
      image: 'https://picsum.photos/id/247/200/300',
      status: 'Active',
      amount: 145.25,
    },
    {
      date: new Date(),
      id: 'jhdgjasdFGrsg45878',
      name: 'John Doe',
      url: 'https://buy.riskpay.com/8hWsf85Rt',
      image: 'https://picsum.photos/id/427/200/300',
      status: 'Deactivated',
      amount: 545.25,
    },
    {
      date: new Date(),
      id: 'jhdgjasdFGrsg45878',
      name: 'mastercard',
      url: 'https://buy.riskpay.com/8hWsf85Rt',
      image: 'https://picsum.photos/id/838/200/300',
      status: 'Active',
      amount: 145,
    },
    {
      date: new Date(),
      id: 'jhdgjasdFGrsg45878',
      name: 'mastercard',
      url: 'https://buy.riskpay.com/8hWsf85Rt',
      image: 'https://picsum.photos/id/117/200/300',
      status: 'Active',
      amount: 123.5,
    },
    {
      date: new Date(),
      id: 'jhdgjasdFGrsg45878',
      name: 'Demo master',
      url: 'https://buy.riskpay.com/8hWsf85Rt',
      image: 'https://picsum.photos/id/765/200/300',
      status: 'Active',
      amount: 198.6,
    },
    {
      date: new Date(),
      id: 'jhdgjasdFGrsg45878',
      name: 'mastercard',
      url: 'https://buy.riskpay.com/8hWsf85Rt',
      image: 'https://picsum.photos/id/124/200/300',
      status: 'Active',
      amount: 145.25,
    },
    {
      date: new Date(),
      id: 'jhdgjasdFGrsg45878',
      name: 'Jin Kang',
      url: 'https://buy.riskpay.com/8hWsf85Rt',
      image: 'https://picsum.photos/id/757/200/300',
      status: 'Active',
      amount: 145.25,
    },
    {
      date: new Date(),
      id: 'jhdgjasdFGrsg45878',
      name: 'Denis Lee',
      url: 'https://buy.riskpay.com/8hWsf85Rt',
      image: 'https://picsum.photos/id/538/200/300',
      status: 'Deactivated',
      amount: 145.25,
    },
  ],
};

export const prDetailMock: ProductDetail = {
  id: '9dafoijvnoiajfiajefadf',
  url: 'https://buy.riskpay.com/8hWsf85Rt',
  image: 'https://picsum.photos/id/223/200/300',
  name: "Men's T-shirt",
  description: 'Manufactured by Nike',
  quantity: 5,
  price: 25.98,
  mrr: 1,
  createdAt: new Date(),
  type: 'Physical',
  shipping: [
    {
      id: '424',
      name: 'Free Shipping',
      maxDay: 2,
      minDay: 1,
      fee: 20.2,
    },
    {
      id: '4234',
      name: 'Free FEDEX Shipping',
      maxDay: 5,
      minDay: 3,
      fee: 10.22,
    },
  ],
};


mock/transaction.ts
import { TransactionData, TransactionDetail } from '@/types';

export const txDataMock: TransactionData = {
  pagination: {
    totalLength: 120,
    itemsPerPage: 10,
    pageCount: 12,
    currentPage: 1,
  },
  data: [
    {
      date: new Date(),
      id: 'jhdgjasdFGrsg45878',
      card: 'mastercard',
      customer: 'Demo Mart',
      status: 'Succeeded',
      amount: 145.25,
    },
    {
      date: new Date(),
      id: 'jhdgjasdFGrsg45878',
      card: 'mastercard',
      customer: 'Demo Mart',
      status: 'Succeeded',
      amount: 1435.25,
    },
    {
      date: new Date(),
      id: 'jhdgjasdFGrsg45878',
      card: 'mastercard',
      customer: 'Demo Mart',
      status: 'Refunded',
      amount: 145.25,
    },
    {
      date: new Date(),
      id: 'jhdgjasdFGrsg45878',
      card: 'mastercard',
      customer: 'Demo Mart',
      status: 'Pending',
      amount: 145.25,
    },
    {
      date: new Date(),
      id: 'jhdgjasdFGrsg45878',
      card: 'mastercard',
      customer: 'Demo Mart',
      status: 'Succeeded',
      amount: 145.25,
    },
    {
      date: new Date(),
      id: 'jhdgjasdFGrsg45878',
      card: 'mastercard',
      customer: 'Demo Mart',
      status: 'Pending',
      amount: 145.25,
    },
    {
      date: new Date(),
      id: 'jhdgjasdFGrsg45878',
      card: 'mastercard',
      customer: 'Demo Mart',
      status: 'Succeeded',
      amount: 145.25,
    },
    {
      date: new Date(),
      id: 'jhdgjasdFGrsg45878',
      card: 'mastercard',
      customer: 'Demo Mart',
      status: 'Failed',
      amount: 145.25,
    },
    {
      date: new Date(),
      id: 'jhdgjasdFGrsg45878',
      card: 'visa',
      customer: 'Demo Mart',
      status: 'Succeeded',
      amount: 145.25,
    },
    {
      date: new Date(),
      id: 'jhdgjasdFGrsg45878',
      card: 'mastercard',
      customer: 'Demo Mart',
      status: 'Chargeback',
      amount: 145.25,
    },
  ],
};

export const txDetailMock: TransactionDetail = {
  id: 'jhdgjasdFGrsg45878',
  amount: 145.25,
  status: 'Succeeded',
  createdAt: new Date(),
  updatedAt: new Date(),
  customer: {
    name: 'Nur Hassan',
    email: 'nursan@gmail.com',
  },
  contact: {
    email: 'meme@gmail.com',
    phone: '+1 (763) 2183-4555',
  },
  billing: {
    address: 'Delaware, 19709, USA',
    name: 'Nur Hasan',
  },
  technical: {
    ip: '182.2.64.129',
    device: 'Mobile (Android 11)',
  },
  products: [
    {
      name: 'Sports Wear',
      id: '829d2r99ae9',
      imageUrl: 'https://picsum.photos/id/227/200/300',
      price: 20,
      quantity: 3,
    },
    {
      name: 'T-shirt',
      id: '129d2r99ae9',
      imageUrl: 'https://picsum.photos/id/267/200/300',
      price: 25.25,
      quantity: 1,
    },
    {
      name: 'Luxury women watch',
      id: '829d2r999e9',
      imageUrl: 'https://picsum.photos/id/137/200/300',
      price: 30,
      quantity: 2,
    },
  ],
  generatedBy: 'Shopify',
  paymentMethod: 'Visa',
};


next-env.d.ts
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.


next.config.ts
import type { NextConfig } from 'next';

const nextConfig: NextConfig = {
  // Add API rewrite rules to proxy requests to your backend
  async rewrites() {
    return [
      {
        source: '/api/:path*',
        destination: 'http://localhost:5000/api/:path*',
      },
    ];
  },
  images: {
    dangerouslyAllowSVG: true,
    contentSecurityPolicy: "default-src 'self'; script-src 'none'; sandbox;",
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 'picsum.photos',
        pathname: '**',
      },
      {
        protocol: 'https',
        hostname: 'ui-avatars.com',
        pathname: '**',
      },
      {
        protocol: 'https',
        hostname: 'flagcdn.com',
        pathname: '**',
      },
    ],
  },
};

export default nextConfig;

types/hook.ts
export type WebhookEvent = 'Payment' | 'Subscription' | 'Order' | 'Payout & Settlement' | 'Customer' | 'Merchant';
export type Webhook = {
  type: WebhookEvent;
  url: string;
  isActive: boolean;
  createdAt: Date;
};


types/index.ts
export * from './transaction';
export * from './hook';
export * from './payout';
export * from './notification';
export * from './product';


types/notification.ts
export type Notification = {
  id: string;
  date: Date;
  title: string;
  content: string;
};


types/payout.ts
export type Payout = {
  id: string;
  createdAt: Date;
  txid: string;
  method: 'bank' | 'crypto';
  status: 'Approved' | 'Pending' | 'Failed';
  amount: number;
};

export type PayoutDetail = {
  id: string;
  status: 'Approved' | 'Pending' | 'Failed';
  amount: {
    total: number;
    tax: number;
    fee: number;
  };
  txid: string;
  createdAt: Date | null;
  processedAt: Date | null;
  depositedAt: Date | null;
};

export type PayoutData = {
  pagination: {
    totalLength: number;
    itemsPerPage: number;
    pageCount: number;
    currentPage: number;
  };
  data: Payout[];
};

export type Account = {
  holder: string;
  id: string;
  address: string;
  where: string;
  isActive: boolean;
  updatedAt: Date;
};


types/product.ts
export type Product = {
  _id: string;
  id?: string;
  name?: string;
  title: string;
  description?: string;
  shortDescription?: string;
  longDescription?: string;
  price: number;
  amount?: number;
  currency?: string;
  defaultCurrency?: string;
  type: 'physical' | 'digital';
  status: 'active' | 'inactive' | 'deactivated' | 'draft';
  sku?: string;
  barcode?: string;
  autoLocalPrice?: boolean;
  images?: Array<{
    url: string;
    isMain: boolean;
  }>;
  date?: string;
  createdAt: string;
  updatedAt?: string;
  url?: string;
  slug?: string;
  digital?: {
    isRecurring?: boolean;
    fileUrl?: string;
    fileUpload?: string;
    recurring?: {
      interval: string;
      hasTrial: boolean;
      trialDays?: number;
    };
  };
  physical?: {
    stock?: number;
    shippingMethods?: Array<{
      name: string;
      price: number;
    }>;
  };
  variants?: Array<{
    name: string;
    values: string[];
    stock: number;
  }>;
};

export type ProductData = {
  pagination: {
    totalLength: number;
    itemsPerPage: number;
    pageCount: number;
    currentPage: number;
  };
  data: Product[];
};

export type ProductDetail = Product;

// Add additional product-related types for API responses
export type ProductsResponse = {
  success: boolean;
  message?: string;
  data: {
    products: Product[];
    total: number;
    page: number;
    pages: number;
    limit: number;
  };
};

export type ProductResponse = {
  success: boolean;
  message?: string;
  data: {
    product: Product;
  };
};

export type CreateProductRequest = {
  title: string;
  shortDescription?: string;
  longDescription?: string;
  description?: string;
  price: number;
  currency: string;
  defaultCurrency: string;
  autoLocalPrice: boolean;
  type: 'digital' | 'physical';
  sku?: string;
  barcode?: string;
  slug: string;
  images?: File[];
  mainImageIndex?: string;
  fileMethod?: 'url' | 'upload';
  fileUrl?: string;
  digitalFile?: File;
  isRecurring?: boolean;
  digital?: string; // JSON string
  hasStock?: boolean;
  stock?: string;
  hasVariants?: boolean;
  variants?: string; // JSON string
  shippingMethods?: string; // JSON string
};

export type UpdateProductRequest = CreateProductRequest & {
  status?: 'active' | 'deactivated';
  removedImageUrls?: string;
  newImages?: File[];
  mainImageIsNew?: string;
  mainImageNewIndex?: string;
};

types/transaction.ts
export type Transaction = {
  date: Date;
  id: string;
  card: 'mastercard' | 'visa';
  customer: string;
  status: 'Succeeded' | 'Pending' | 'Failed' | 'Chargeback' | 'Refunded';
  amount: number;
};

export type TransactionData = {
  pagination: {
    totalLength: number;
    itemsPerPage: number;
    pageCount: number;
    currentPage: number;
  };
  data: Transaction[];
};

export type TransactionProduct = {
  name: string;
  id: string;
  imageUrl: string;
  price: number;
  quantity: number;
};

export type TransactionDetail = {
  id: string;
  amount: number;
  status: 'Succeeded' | 'Pending' | 'Failed' | 'Chargeback' | 'Refunded';
  createdAt: Date;
  updatedAt: Date;
  customer: {
    name: string;
    email: string;
  };
  contact: {
    email: string;
    phone: string;
  };
  billing: {
    address: string;
    name: string;
  };
  technical: {
    ip: string;
    device: string;
  };
  products: TransactionProduct[];
  generatedBy:
    | 'Shopify'
    | 'WooCommerce'
    | 'Wordpress'
    | 'Google Tag Manager'
    | 'Google Analytics'
    | 'Google Ads'
    | 'Facebook Ads'
    | 'TikTok Ads'
    | 'API Integration'
    | 'Webhook';
  paymentMethod: 'Mastercard' | 'Visa';
};


utils/auth-check.ts
// utils/auth-check.ts
export const checkOnboardingStatus = async () => {
    const token = localStorage.getItem('jwt_token');
    
    if (!token) {
      throw new Error('No token found');
    }
  
    try {
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/auth/me`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });
  
      const result = await response.json();
  
      if (!result.success) {
        throw new Error('Invalid token');
      }
  
      return {
        isAuthenticated: true,
        onboardingComplete: result.data.user.onboardingComplete,
        user: result.data.user,
        merchant: result.data.merchant
      };
    } catch (error) {
      throw error;
    }
  };

