old code

payment/page.tsx
// app/product/payment/page.tsx
'use client';

import { useEffect, useState } from 'react';
import { useSearchParams } from 'next/navigation';
import Link from 'next/link';
import { formatDate } from '../../../productlib/utils';

interface Transaction {
  _id: string;
  transactionId: string;
  status: string;
  total: number;
  saleCurrency: string;
  buyerEmail: string;
  billingName: string;
  paymentMethod: string;
  createdAt: string;
  updatedAt: string;
  paymentIntentId?: string;
  items?: any[];
}

const PaymentResultPage = () => {
  const searchParams = useSearchParams();
  const transactionId = searchParams.get('transactionId');
  const [transaction, setTransaction] = useState<Transaction | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchTransactionStatus = async () => {
    if (!transactionId) {
      setError('No transaction ID provided');
      setLoading(false);
      return;
    }

    try {
      // Try to fetch by transactionId first
      const baseUrl = process.env.NEXT_PUBLIC_API_BASE_URL ||
                      (process.env.NODE_ENV === 'development' ? 'http://localhost:5000' : window.location.origin);
      
      const apiUrl = `${baseUrl.replace(/\/api$/, '')}/api/finance/transactions/by-tx-id/${transactionId}`;
      
      const response = await fetch(apiUrl);
      
      if (response.ok) {
        const data = await response.json();
        if (data.success && data.data) {
          setTransaction(data.data);
          setError(null);
        } else {
          setError('Transaction not found');
        }
      } else if (response.status === 404) {
        setError('Transaction not found');
      } else {
        setError('Failed to fetch transaction status');
      }
    } catch (err) {
      console.error('Error fetching transaction:', err);
      setError('Failed to fetch transaction status');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchTransactionStatus();
    
    // Poll for status updates every 3 seconds for pending transactions
    const interval = setInterval(() => {
      if (transaction?.status === 'pending') {
        fetchTransactionStatus();
      }
    }, 3000);

    return () => clearInterval(interval);
  }, [transactionId, transaction?.status]);

  // Define UI elements based on status
  const getStatusContent = (status: string) => {
    switch (status) {
      case 'successful':
        return {
          icon: (
            <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center">
              <svg className="w-8 h-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
              </svg>
            </div>
          ),
          title: 'Payment successful',
          message: 'Thank you for your purchase! Your order has been confirmed and you should receive an email receipt shortly.',
          bgColor: 'bg-green-50',
          borderColor: 'border-green-200'
        };
      case 'pending':
        return {
          icon: (
            <div className="w-16 h-16 bg-yellow-100 rounded-full flex items-center justify-center">
              <svg className="w-8 h-8 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
          ),
          title: 'Payment pending',
          message: 'Your payment is being processed. We\'ll send you a confirmation email once the payment is complete.',
          bgColor: 'bg-yellow-50',
          borderColor: 'border-yellow-200'
        };
      case 'canceled':
      case 'cancelled':
        return {
          icon: (
            <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center">
              <svg className="w-8 h-8 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </div>
          ),
          title: 'Payment canceled',
          message: 'Your payment was canceled. If this was a mistake, you can try again or contact our support team for assistance.',
          bgColor: 'bg-red-50',
          borderColor: 'border-red-200'
        };
      case 'failed':
        return {
          icon: (
            <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center">
              <svg className="w-8 h-8 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
          ),
          title: 'Payment failed',
          message: 'Your payment could not be processed. Please try again or use a different payment method.',
          bgColor: 'bg-red-50',
          borderColor: 'border-red-200'
        };
      default:
        return {
          icon: (
            <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center">
              <svg className="w-8 h-8 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
          ),
          title: 'Unknown status',
          message: 'We\'re checking your payment status. Please wait a moment.',
          bgColor: 'bg-gray-50',
          borderColor: 'border-gray-200'
        };
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center px-4">
        <div className="max-w-md w-full">
          <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-8 text-center">
            <div className="flex justify-center mb-6">
              <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center">
                <div className="w-8 h-8 border-2 border-blue-600 border-t-transparent rounded-full animate-spin"></div>
              </div>
            </div>
            <h1 className="text-2xl font-semibold text-gray-900 mb-3">
              Checking payment status...
            </h1>
            <p className="text-gray-600">
              Please wait while we verify your payment.
            </p>
          </div>
        </div>
      </div>
    );
  }

  if (error || !transaction) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center px-4">
        <div className="max-w-md w-full">
          <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-8 text-center">
            <div className="flex justify-center mb-6">
              <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center">
                <svg className="w-8 h-8 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
            </div>
            <h1 className="text-2xl font-semibold text-gray-900 mb-3">
              Transaction not found
            </h1>
            <p className="text-gray-600 mb-6">
              {error || 'We couldn\'t find the transaction you\'re looking for.'}
            </p>
            <div className="space-y-3">
              <Link 
                href="/" 
                className="block w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-3 px-4 rounded-lg transition-colors"
              >
                Return to Homepage
              </Link>
              <button 
                onClick={() => window.location.reload()}
                className="block w-full bg-gray-100 hover:bg-gray-200 text-gray-800 font-medium py-3 px-4 rounded-lg transition-colors"
              >
                Refresh Page
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  const statusContent = getStatusContent(transaction.status);

  return (
    <div className="min-h-screen bg-gray-50 flex items-center justify-center px-4">
      <div className="max-w-md w-full">
        {/* Main Result Card */}
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-8 text-center">
          {/* Status Icon */}
          <div className="flex justify-center mb-6">
            {statusContent.icon}
          </div>
          
          {/* Status Message */}
          <h1 className="text-2xl font-semibold text-gray-900 mb-3">
            {statusContent.title}
          </h1>
          <p className="text-gray-600 mb-8 leading-relaxed">
            {statusContent.message}
          </p>
          
          {/* Pending Status Auto-refresh */}
          {transaction.status === 'pending' && (
            <div className="mb-6 p-3 bg-blue-50 border border-blue-200 rounded-lg">
              <div className="flex items-center justify-center space-x-2 text-sm text-blue-700">
                <div className="w-4 h-4 border-2 border-blue-600 border-t-transparent rounded-full animate-spin"></div>
                <span>Auto-refreshing status...</span>
              </div>
            </div>
          )}
          
          {/* Transaction Details */}
          <div className={`${statusContent.bgColor} ${statusContent.borderColor} border rounded-lg p-4 mb-6 text-left`}>
            <h2 className="text-sm font-semibold text-gray-900 mb-3">Transaction details</h2>
            <div className="space-y-2 text-sm">
              <div className="flex justify-between">
                <span className="text-gray-600">Transaction ID</span>
                <span className="font-mono text-gray-900">{transaction.transactionId}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">Amount</span>
                <span className="text-gray-900">
                  {new Intl.NumberFormat(undefined, { 
                    style: 'currency', 
                    currency: transaction.saleCurrency 
                  }).format(transaction.total)}
                </span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">Payment Method</span>
                <span className="text-gray-900 capitalize">{transaction.paymentMethod}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">Date</span>
                <span className="text-gray-900">{formatDate(new Date(transaction.createdAt))}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">Status</span>
                <span className={`font-medium ${
                  transaction.status === 'successful' ? 'text-green-700' :
                  transaction.status === 'pending' ? 'text-yellow-700' : 'text-red-700'
                }`}>
                  {transaction.status.charAt(0).toUpperCase() + transaction.status.slice(1)}
                </span>
              </div>
              {transaction.buyerEmail && (
                <div className="flex justify-between">
                  <span className="text-gray-600">Email</span>
                  <span className="text-gray-900">{transaction.buyerEmail}</span>
                </div>
              )}
              {transaction.billingName && (
                <div className="flex justify-between">
                  <span className="text-gray-600">Customer</span>
                  <span className="text-gray-900">{transaction.billingName}</span>
                </div>
              )}
            </div>
          </div>
          
          {/* Action Buttons */}
          <div className="space-y-3">
            <Link 
              href="/" 
              className="block w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-3 px-4 rounded-lg transition-colors"
            >
              Continue shopping
            </Link>
            
            {transaction.status === 'successful' && (
              <button 
                onClick={() => window.print()}
                className="block w-full bg-gray-100 hover:bg-gray-200 text-gray-800 font-medium py-3 px-4 rounded-lg transition-colors"
              >
                Print receipt
              </button>
            )}
            
            {(transaction.status === 'canceled' || transaction.status === 'failed') && (
              <Link 
                href="#" 
                onClick={(e) => { e.preventDefault(); window.history.back(); }}
                className="block w-full bg-gray-100 hover:bg-gray-200 text-gray-800 font-medium py-3 px-4 rounded-lg transition-colors"
              >
                Try again
              </Link>
            )}

            {transaction.status === 'pending' && (
              <button 
                onClick={fetchTransactionStatus}
                className="block w-full bg-gray-100 hover:bg-gray-200 text-gray-800 font-medium py-3 px-4 rounded-lg transition-colors"
              >
                Refresh status
              </button>
            )}
          </div>
        </div>
        
        {/* Help Text */}
        <div className="text-center mt-6">
          <p className="text-sm text-gray-500">
            {transaction.status === 'successful' 
              ? 'Need help with your order? ' 
              : transaction.status === 'pending'
              ? 'Questions about your payment? '
              : 'Having trouble with your payment? '}
            <a href="mailto:support@example.com" className="text-blue-600 hover:text-blue-700">
              Contact support
            </a>
          </p>
        </div>
      </div>
    </div>
  );
};

export default PaymentResultPage;

success/page.tsx
// app/product/success/page.tsx
'use client';

import { useEffect } from 'react';
import { useSearchParams, useRouter } from 'next/navigation';

const SuccessPage = () => {
  const searchParams = useSearchParams();
  const router = useRouter();
  const transactionId = searchParams.get('transactionId');

  useEffect(() => {
    // Redirect to the new payment page with the status parameter set to 'successful'
    router.replace(`/product/payment?transactionId=${transactionId || ''}&status=successful`);
  }, [router, transactionId]);

  // Return a minimal loading state while redirecting
  return (
    <div className="min-h-screen bg-gray-50 flex items-center justify-center px-4">
      <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-8 text-center max-w-md w-full">
        <div className="w-8 h-8 border-2 border-blue-600 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
        <p className="text-gray-600">Redirecting to payment summary...</p>
      </div>
    </div>
  );
};

export default SuccessPage;

[slug]/page.tsx
// app/product/[slug]/page.tsx
'use client';

import { useEffect, useState } from 'react';
import { useParams } from 'next/navigation';
import { getProductBySlug } from '../../../productlib/api';
import ProductDisplay from '../../../productcomponents/ProductDisplay';
import { IProduct } from '../../../productlib/types';

export default function ProductPage() {
  const params = useParams();
  const [product, setProduct] = useState<IProduct | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    async function loadProduct() {
      try {
        setLoading(true);
        const slug = params?.slug as string;
        
        if (!slug) {
          setError('Product not found');
          setLoading(false);
          return;
        }

        const fetchedProduct = await getProductBySlug(slug);
        
        if (!fetchedProduct) {
          setError('Product not found');
        } else {
          setProduct(fetchedProduct);
        }
      } catch (err) {
        console.error('Error loading product:', err);
        setError('Failed to load product');
      } finally {
        setLoading(false);
      }
    }

    loadProduct();
  }, [params]);

  if (loading) {
    return null; // Let ProductDisplay handle the loading state
  }

  if (error || !product) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center px-4">
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-8 text-center max-w-md w-full">
          <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-6">
            <svg className="w-8 h-8 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
          </div>
          
          <h1 className="text-2xl font-semibold text-gray-900 mb-3">
            {error || 'Product Not Found'}
          </h1>
          <p className="text-gray-600 mb-6">
            We couldn't find the product you're looking for. It may have been removed or is temporarily unavailable.
          </p>
          
          <a 
            href="/" 
            className="inline-block w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-3 px-4 rounded-lg transition-colors"
          >
            Return to Homepage
          </a>
        </div>
      </div>
    );
  }

  return <ProductDisplay product={product} />;
}

