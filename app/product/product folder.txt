payment/page.tsx
// app/product/payment/page.tsx
'use client';

import { useEffect, useState } from 'react';
import { useSearchParams } from 'next/navigation';
import Link from 'next/link';
import { formatDate } from '../../../productlib/utils';

interface Transaction {
  _id: string;
  transactionId: string;
  status: string;
  total: number;
  subtotal?: number;
  shippingFee?: number;
  saleCurrency: string;
  buyerEmail: string;
  billingName: string;
  paymentMethod: string;
  createdAt: string;
  updatedAt: string;
  paymentIntentId?: string;
  items?: any[];
  metadata?: {
    vat_amount?: number;
    vat_rate?: number;
    vat_country?: string;
    vat_state?: string;
  };
}

const PaymentResultPage = () => {
  const searchParams = useSearchParams();
  const transactionId = searchParams.get('transactionId');
  const [transaction, setTransaction] = useState<Transaction | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchTransactionStatus = async () => {
    if (!transactionId) {
      setError('No transaction ID provided');
      setLoading(false);
      return;
    }

    try {
      // Try to fetch by transactionId first
      const baseUrl = process.env.NEXT_PUBLIC_API_BASE_URL ||
                      (process.env.NODE_ENV === 'development' ? 'http://localhost:5000' : window.location.origin);
      
      const apiUrl = `${baseUrl.replace(/\/api$/, '')}/api/finance/transactions/by-tx-id/${transactionId}`;
      
      const response = await fetch(apiUrl);
      
      if (response.ok) {
        const data = await response.json();
        if (data.success && data.data) {
          setTransaction(data.data);
          setError(null);
        } else {
          setError('Transaction not found');
        }
      } else if (response.status === 404) {
        setError('Transaction not found');
      } else {
        setError('Failed to fetch transaction status');
      }
    } catch (err) {
      console.error('Error fetching transaction:', err);
      setError('Failed to fetch transaction status');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchTransactionStatus();
    
    // Poll for status updates every 3 seconds for pending transactions
    const interval = setInterval(() => {
      if (transaction?.status === 'pending') {
        fetchTransactionStatus();
      }
    }, 3000);

    return () => clearInterval(interval);
  }, [transactionId, transaction?.status]);

  // Define UI elements based on status
  const getStatusContent = (status: string) => {
    switch (status) {
      case 'successful':
        return {
          icon: (
            <div style={{
              width: '64px',
              height: '64px',
              background: '#10b981',
              borderRadius: '50%',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              margin: '0 auto 24px'
            }}>
              <i className="fas fa-check" style={{color: 'white', fontSize: '24px'}}></i>
            </div>
          ),
          title: 'Payment successful',
          message: 'Thank you for your purchase! Your order has been confirmed and you should receive an email receipt shortly.',
          bgColor: '#f0fdf4',
          borderColor: '#bbf7d0',
          textColor: '#16a34a'
        };
      case 'pending':
        return {
          icon: (
            <div style={{
              width: '64px',
              height: '64px',
              background: '#f59e0b',
              borderRadius: '50%',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              margin: '0 auto 24px'
            }}>
              <i className="fas fa-clock" style={{color: 'white', fontSize: '24px'}}></i>
            </div>
          ),
          title: 'Payment pending',
          message: 'Your payment is being processed. We\'ll send you a confirmation email once the payment is complete.',
          bgColor: '#fffbeb',
          borderColor: '#fde68a',
          textColor: '#d97706'
        };
      case 'canceled':
      case 'cancelled':
        return {
          icon: (
            <div style={{
              width: '64px',
              height: '64px',
              background: '#ef4444',
              borderRadius: '50%',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              margin: '0 auto 24px'
            }}>
              <i className="fas fa-times" style={{color: 'white', fontSize: '24px'}}></i>
            </div>
          ),
          title: 'Payment canceled',
          message: 'Your payment was canceled. If this was a mistake, you can try again or contact our support team for assistance.',
          bgColor: '#fef2f2',
          borderColor: '#fecaca',
          textColor: '#dc2626'
        };
      case 'failed':
        return {
          icon: (
            <div style={{
              width: '64px',
              height: '64px',
              background: '#ef4444',
              borderRadius: '50%',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              margin: '0 auto 24px'
            }}>
              <i className="fas fa-exclamation-triangle" style={{color: 'white', fontSize: '24px'}}></i>
            </div>
          ),
          title: 'Payment failed',
          message: 'Your payment could not be processed. Please try again or use a different payment method.',
          bgColor: '#fef2f2',
          borderColor: '#fecaca',
          textColor: '#dc2626'
        };
      default:
        return {
          icon: (
            <div style={{
              width: '64px',
              height: '64px',
              background: '#6b7280',
              borderRadius: '50%',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              margin: '0 auto 24px'
            }}>
              <i className="fas fa-question" style={{color: 'white', fontSize: '24px'}}></i>
            </div>
          ),
          title: 'Unknown status',
          message: 'We\'re checking your payment status. Please wait a moment.',
          bgColor: '#f9fafb',
          borderColor: '#d1d5db',
          textColor: '#6b7280'
        };
    }
  };

  if (loading) {
    return (
      <>
        <style jsx>{`
          @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
          }
          
          .container {
            min-height: 100vh;
            background-color: #f6f9fc;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Helvetica Neue", sans-serif;
          }
          
          .card {
            background: white;
            border-radius: 8px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            padding: 40px;
            text-align: center;
            max-width: 400px;
            width: 100%;
          }
          
          .spinner {
            width: 32px;
            height: 32px;
            border: 3px solid #635bff;
            border-top: 3px solid transparent;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 20px;
          }
          
          .title {
            font-size: 18px;
            font-weight: 600;
            color: #32325d;
            margin-bottom: 12px;
          }
          
          .message {
            color: #6b7c93;
            font-size: 14px;
          }
        `}</style>
        
        <div className="container">
          <div className="card">
            <div className="spinner"></div>
            <h1 className="title">Checking payment status...</h1>
            <p className="message">Please wait while we verify your payment.</p>
          </div>
        </div>
      </>
    );
  }

  if (error || !transaction) {
    return (
      <>
        <style jsx>{`
          .container {
            min-height: 100vh;
            background-color: #f6f9fc;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Helvetica Neue", sans-serif;
          }
          
          .card {
            background: white;
            border-radius: 8px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            padding: 40px;
            text-align: center;
            max-width: 400px;
            width: 100%;
          }
          
          .error-icon {
            width: 64px;
            height: 64px;
            background: #ef4444;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 24px;
          }
          
          .title {
            font-size: 18px;
            font-weight: 600;
            color: #32325d;
            margin-bottom: 12px;
          }
          
          .message {
            color: #6b7c93;
            font-size: 14px;
            margin-bottom: 24px;
            line-height: 1.5;
          }
          
          .button {
            width: 100%;
            padding: 12px 20px;
            border-radius: 6px;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.15s;
            border: none;
            margin-bottom: 12px;
          }
          
          .button-primary {
            background: #0073E6;
            color: white;
          }
          
          .button-primary:hover {
            background: #0066CC;
          }
          
          .button-secondary {
            background: #f8f9fa;
            color: #32325d;
            border: 1px solid #e6ebf1;
          }
          
          .button-secondary:hover {
            background: #f1f3f4;
          }
        `}</style>
        
        <div className="container">
          <div className="card">
            <div className="error-icon">
              <i className="fas fa-exclamation-triangle" style={{color: 'white', fontSize: '24px'}}></i>
            </div>
            <h1 className="title">Transaction not found</h1>
            <p className="message">
              {error || 'We couldn\'t find the transaction you\'re looking for.'}
            </p>
            <Link href="/" className="button button-primary" style={{display: 'block', textDecoration: 'none'}}>
              Return to Homepage
            </Link>
            <button 
              onClick={() => window.location.reload()}
              className="button button-secondary"
            >
              Refresh Page
            </button>
          </div>
        </div>
      </>
    );
  }

  const statusContent = getStatusContent(transaction.status);

  // Calculate VAT and other amounts for display
  const vatAmount = transaction.metadata?.vat_amount || 0;
  const vatRate = transaction.metadata?.vat_rate || 0;
  const subtotal = transaction.subtotal || (transaction.total - vatAmount - (transaction.shippingFee || 0));
  const shipping = transaction.shippingFee || 0;

  return (
    <>
      <style jsx>{`
        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }
        
        .container {
          min-height: 100vh;
          background-color: #f6f9fc;
          display: flex;
          align-items: center;
          justify-content: center;
          padding: 20px;
          font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Helvetica Neue", sans-serif;
        }
        
        .card {
          background: white;
          border-radius: 8px;
          box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
          padding: 40px;
          text-align: center;
          max-width: 500px;
          width: 100%;
        }
        
        .title {
          font-size: 24px;
          font-weight: 600;
          color: #32325d;
          margin-bottom: 12px;
        }
        
        .message {
          color: #6b7c93;
          font-size: 16px;
          margin-bottom: 32px;
          line-height: 1.5;
        }
        
        .pending-status {
          margin-bottom: 24px;
          padding: 12px;
          background: #eff6ff;
          border: 1px solid #bfdbfe;
          border-radius: 6px;
          display: flex;
          align-items: center;
          justify-content: center;
          gap: 8px;
          font-size: 14px;
          color: #1d4ed8;
        }
        
        .spinner-small {
          width: 16px;
          height: 16px;
          border: 2px solid #1d4ed8;
          border-top: 2px solid transparent;
          border-radius: 50%;
          animation: spin 1s linear infinite;
        }
        
        .details-card {
          border: 1px solid #e6ebf1;
          border-radius: 6px;
          padding: 20px;
          margin-bottom: 24px;
          text-align: left;
        }
        
        .details-title {
          font-size: 14px;
          font-weight: 600;
          color: #32325d;
          margin-bottom: 16px;
        }
        
        .detail-row {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 12px;
          font-size: 14px;
        }
        
        .detail-row:last-child {
          margin-bottom: 0;
        }
        
        .detail-label {
          color: #6b7c93;
          display: flex;
          align-items: center;
          gap: 8px;
        }
        
        .detail-value {
          color: #32325d;
          font-weight: 500;
          font-family: 'SF Mono', 'Monaco', 'Inconsolata', 'Roboto Mono', monospace;
        }
        
        .status-badge {
          font-weight: 600;
          padding: 2px 8px;
          border-radius: 4px;
          font-size: 12px;
        }
        
        .status-successful {
          background: #dcfce7;
          color: #16a34a;
        }
        
        .status-pending {
          background: #fef3c7;
          color: #d97706;
        }
        
        .status-failed, .status-canceled {
          background: #fee2e2;
          color: #dc2626;
        }

        .total-row {
          border-top: 1px solid #e6ebf1;
          padding-top: 12px;
          margin-top: 12px;
          font-weight: 600;
          font-size: 16px;
        }

        .vat-row {
          color: #6b7c93;
        }

        .vat-icon {
          margin-right: 4px;
          font-size: 12px;
        }
        
        .button {
          width: 100%;
          padding: 14px 20px;
          border-radius: 6px;
          font-size: 16px;
          font-weight: 500;
          cursor: pointer;
          transition: background-color 0.15s;
          border: none;
          margin-bottom: 12px;
          text-decoration: none;
          display: block;
          text-align: center;
        }
        
        .button-primary {
          background: #0073E6;
          color: white;
        }
        
        .button-primary:hover {
          background: #0066CC;
        }
        
        .button-secondary {
          background: #f8f9fa;
          color: #32325d;
          border: 1px solid #e6ebf1;
        }
        
        .button-secondary:hover {
          background: #f1f3f4;
        }
        
        .help-text {
          margin-top: 24px;
          font-size: 14px;
          color: #6b7c93;
        }
        
        .help-link {
          color: #0073E6;
          text-decoration: none;
        }
        
        .help-link:hover {
          text-decoration: underline;
        }
      `}</style>
      
      <div className="container">
        <div className="card">
          {/* Status Icon */}
          {statusContent.icon}
          
          {/* Status Message */}
          <h1 className="title">{statusContent.title}</h1>
          <p className="message">{statusContent.message}</p>
          
          {/* Pending Status Auto-refresh */}
          {transaction.status === 'pending' && (
            <div className="pending-status">
              <div className="spinner-small"></div>
              <span>Auto-refreshing status...</span>
            </div>
          )}
          
          {/* Transaction Details */}
          <div className="details-card" style={{
            background: statusContent.bgColor,
            borderColor: statusContent.borderColor
          }}>
            <h2 className="details-title">Transaction details</h2>
            
            <div className="detail-row">
              <span className="detail-label">Transaction ID</span>
              <span className="detail-value">{transaction.transactionId}</span>
            </div>

            {/* Subtotal */}
            <div className="detail-row">
              <span className="detail-label">Subtotal</span>
              <span className="detail-value">
                {new Intl.NumberFormat(undefined, { 
                  style: 'currency', 
                  currency: transaction.saleCurrency 
                }).format(subtotal)}
              </span>
            </div>

            {/* VAT */}
            {vatAmount > 0 && (
              <div className="detail-row vat-row">
                <span className="detail-label">
                  <i className="fas fa-receipt vat-icon"></i>
                  VAT {vatRate > 0 && `(${(vatRate * 100).toFixed(1)}%)`}
                  {transaction.metadata?.vat_country && (
                    <span style={{ fontSize: '12px', marginLeft: '4px' }}>
                      - {transaction.metadata.vat_country}
                      {transaction.metadata.vat_state && `, ${transaction.metadata.vat_state}`}
                    </span>
                  )}
                </span>
                <span className="detail-value">
                  {new Intl.NumberFormat(undefined, { 
                    style: 'currency', 
                    currency: transaction.saleCurrency 
                  }).format(vatAmount)}
                </span>
              </div>
            )}

            {/* Shipping */}
            {shipping > 0 && (
              <div className="detail-row">
                <span className="detail-label">
                  <i className="fas fa-truck"></i>
                  Shipping
                </span>
                <span className="detail-value">
                  {new Intl.NumberFormat(undefined, { 
                    style: 'currency', 
                    currency: transaction.saleCurrency 
                  }).format(shipping)}
                </span>
              </div>
            )}
            
            <div className="detail-row">
              <span className="detail-label">Payment Method</span>
              <span className="detail-value" style={{textTransform: 'capitalize'}}>
                {transaction.paymentMethod}
              </span>
            </div>
            
            <div className="detail-row">
              <span className="detail-label">Date</span>
              <span className="detail-value">
                {formatDate(new Date(transaction.createdAt))}
              </span>
            </div>
            
            <div className="detail-row">
              <span className="detail-label">Status</span>
              <span className={`status-badge status-${transaction.status}`}>
                {transaction.status.charAt(0).toUpperCase() + transaction.status.slice(1)}
              </span>
            </div>

            {/* Total */}
            <div className="detail-row total-row">
              <span className="detail-label">Total</span>
              <span className="detail-value">
                {new Intl.NumberFormat(undefined, { 
                  style: 'currency', 
                  currency: transaction.saleCurrency 
                }).format(transaction.total)}
              </span>
            </div>
            
            {transaction.buyerEmail && (
              <div className="detail-row">
                <span className="detail-label">Email</span>
                <span className="detail-value">{transaction.buyerEmail}</span>
              </div>
            )}
            
            {transaction.billingName && (
              <div className="detail-row">
                <span className="detail-label">Customer</span>
                <span className="detail-value">{transaction.billingName}</span>
              </div>
            )}
          </div>
          
          {/* Action Buttons */}
          <div>
            <Link href="/" className="button button-primary">
              Continue shopping
            </Link>
            
            {transaction.status === 'successful' && (
              <button 
                onClick={() => window.print()}
                className="button button-secondary"
              >
                Print receipt
              </button>
            )}
            
            {(transaction.status === 'canceled' || transaction.status === 'failed') && (
              <button 
                onClick={() => window.history.back()}
                className="button button-secondary"
              >
                Try again
              </button>
            )}

            {transaction.status === 'pending' && (
              <button 
                onClick={fetchTransactionStatus}
                className="button button-secondary"
              >
                Refresh status
              </button>
            )}
          </div>
          
          {/* Help Text */}
          <div className="help-text">
            {transaction.status === 'successful' 
              ? 'Need help with your order? ' 
              : transaction.status === 'pending'
              ? 'Questions about your payment? '
              : 'Having trouble with your payment? '}
            <a href="mailto:support@example.com" className="help-link">
              Contact support
            </a>
          </div>
        </div>
      </div>
    </>
  );
};

export default PaymentResultPage;

success/page.tsx
// app/product/success/page.tsx
'use client';

import { useEffect } from 'react';
import { useSearchParams, useRouter } from 'next/navigation';

const SuccessPage = () => {
  const searchParams = useSearchParams();
  const router = useRouter();
  const transactionId = searchParams.get('transactionId');

  useEffect(() => {
    // Redirect to the new payment page with the status parameter set to 'successful'
    router.replace(`/product/payment?transactionId=${transactionId || ''}&status=successful`);
  }, [router, transactionId]);

  // Return a minimal loading state while redirecting
  return (
    <>
      <style jsx>{`
        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }
        
        .redirect-container {
          min-height: 100vh;
          background-color: #f6f9fc;
          display: flex;
          align-items: center;
          justify-content: center;
          padding: 20px;
          font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Helvetica Neue", sans-serif;
        }
        
        .redirect-card {
          background: white;
          border-radius: 8px;
          box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
          padding: 40px;
          text-align: center;
          max-width: 400px;
          width: 100%;
        }
        
        .redirect-spinner {
          width: 32px;
          height: 32px;
          border: 3px solid #10b981;
          border-top: 3px solid transparent;
          border-radius: 50%;
          animation: spin 1s linear infinite;
          margin: 0 auto 20px;
        }
        
        .redirect-text {
          color: #32325d;
          font-size: 16px;
          font-weight: 500;
        }
        
        .redirect-icon {
          width: 48px;
          height: 48px;
          background: #10b981;
          border-radius: 50%;
          display: flex;
          align-items: center;
          justify-content: center;
          margin: 0 auto 20px;
        }
      `}</style>
      
      <div className="redirect-container">
        <div className="redirect-card">
          <div className="redirect-icon">
            <i className="fas fa-check" style={{color: 'white', fontSize: '20px'}}></i>
          </div>
          <div className="redirect-spinner"></div>
          <div className="redirect-text">Redirecting to payment summary...</div>
        </div>
      </div>
    </>
  );
};

export default SuccessPage;

[slug]/page.tsx
// app/product/[slug]/page.tsx
'use client';

import { useEffect, useState } from 'react';
import { useParams } from 'next/navigation';
import { getProductBySlug } from '../../../productlib/api';
import ProductDisplay from '../../../productcomponents/ProductDisplay';
import { IProduct } from '../../../productlib/types';

// --- Skeleton Component ---
// This component renders a placeholder UI that mimics the final ProductDisplay layout.
// It's displayed while the product data is being fetched.
function ProductSkeleton() {
  return (
    <>
      <style jsx>{`
        @keyframes shimmer {
          0% {
            background-position: -1000px 0;
          }
          100% {
            background-position: 1000px 0;
          }
        }
        .skeleton-container {
          max-width: 1200px;
          margin: 40px auto;
          padding: 20px;
          display: grid;
          grid-template-columns: 1fr 1fr;
          gap: 40px;
          font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Helvetica Neue", sans-serif;
        }
        .skeleton-box {
          background-color: #e0e0e0;
          border-radius: 8px;
          background-image: linear-gradient(to right, #e0e0e0 0%, #f0f0f0 50%, #e0e0e0 100%);
          background-repeat: no-repeat;
          background-size: 2000px 100%;
          animation: shimmer 1.5s linear infinite;
        }
        .skeleton-image {
          width: 100%;
          height: 450px;
          border-radius: 12px;
        }
        .skeleton-details {
          display: flex;
          flex-direction: column;
        }
        .skeleton-title {
          width: 80%;
          height: 36px;
          margin-bottom: 16px;
        }
        .skeleton-price {
          width: 40%;
          height: 28px;
          margin-bottom: 24px;
        }
        .skeleton-description-line {
          width: 100%;
          height: 16px;
          margin-bottom: 12px;
        }
        .skeleton-description-line.short {
          width: 60%;
        }
        .skeleton-button {
          width: 100%;
          height: 48px;
          margin-top: auto; /* Pushes the button to the bottom */
        }

        /* Responsive layout for smaller screens */
        @media (max-width: 768px) {
          .skeleton-container {
            grid-template-columns: 1fr;
            gap: 20px;
          }
          .skeleton-image {
            height: 300px;
          }
        }
      `}</style>

      <div className="skeleton-container">
        {/* Left Column: Image Placeholder */}
        <div className="skeleton-image-wrapper">
          <div className="skeleton-box skeleton-image"></div>
        </div>
        
        {/* Right Column: Details Placeholder */}
        <div className="skeleton-details">
          <div className="skeleton-box skeleton-title"></div>
          <div className="skeleton-box skeleton-price"></div>
          
          <div className="skeleton-description">
            <div className="skeleton-box skeleton-description-line"></div>
            <div className="skeleton-box skeleton-description-line"></div>
            <div className="skeleton-box skeleton-description-line short"></div>
          </div>
          
          <div className="skeleton-box skeleton-button"></div>
        </div>
      </div>
    </>
  );
}


export default function ProductPage() {
  const params = useParams();
  const [product, setProduct] = useState<IProduct | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    async function loadProduct() {
      // Keep loading as true initially
      setLoading(true);
      setError(null);
      setProduct(null);

      try {
        const slug = params?.slug as string;
        
        if (!slug) {
          setError('Product slug is missing.');
          setLoading(false); // Stop loading immediately on this type of error
          return;
        }

        const fetchedProduct = await getProductBySlug(slug);
        
        // This is the artificial delay. We wait 2 seconds AFTER fetching the data.
        // This ensures the skeleton animation is visible even on very fast connections.
        setTimeout(() => {
          if (!fetchedProduct) {
            setError('Product not found');
          } else {
            setProduct(fetchedProduct);
          }
          // We set loading to false only after the delay, for both success and 'not found' cases.
          setLoading(false);
        }, 2000); // 2000ms = 2 seconds

      } catch (err) {
        console.error('Error loading product:', err);
        setError('Failed to load product details.');
        // If the API call itself fails, stop loading immediately.
        setLoading(false);
      }
      // NOTE: We remove the `finally` block because we now control `setLoading(false)`
      // inside a setTimeout for the successful fetch path.
    }

    if (params?.slug) {
        loadProduct();
    }
  }, [params]);

  // --- RENDER LOGIC ---

  // 1. Display the Skeleton Loader while loading is true
  if (loading) {
    return <ProductSkeleton />;
  }

  // 2. Display an error message if something went wrong or the product wasn't found
  if (error || !product) {
    return (
      <>
        <style jsx>{`
          .error-container {
            min-height: 100vh;
            background-color: #f6f9fc;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Helvetica Neue", sans-serif;
          }
          
          .error-card {
            background: white;
            border-radius: 8px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            padding: 40px;
            text-align: center;
            max-width: 500px;
            width: 100%;
          }
          
          .error-icon {
            width: 64px;
            height: 64px;
            background: #ef4444;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 24px;
          }
          
          .error-title {
            font-size: 24px;
            font-weight: 600;
            color: #32325d;
            margin-bottom: 12px;
          }
          
          .error-message {
            color: #6b7c93;
            font-size: 16px;
            margin-bottom: 24px;
            line-height: 1.5;
          }
          
          .error-button {
            display: inline-block;
            width: 100%;
            padding: 14px 20px;
            background: #0073E6;
            color: white;
            border: none;
            border-radius: 6px;
            font-size: 16px;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.15s;
            text-decoration: none;
            text-align: center;
          }
          
          .error-button:hover {
            background: #0066CC;
          }
        `}</style>
        
        <div className="error-container">
          <div className="error-card">
            <div className="error-icon">
              {/* You might need to add Font Awesome for this icon to work, or use an SVG */}
              <svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24" fill="white"><path d="M1 21h22L12 2 1 21zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z"/></svg>
            </div>
            
            <h1 className="error-title">
              {error || 'Product Not Found'}
            </h1>
            <p className="error-message">
              We couldn't find the product you're looking for. It may have been removed or is temporarily unavailable.
            </p>
            
            <a href="/" className="error-button">
              Return to Homepage
            </a>
          </div>
        </div>
      </>
    );
  }

  // 3. Display the actual product content when data is successfully loaded
  return <ProductDisplay product={product} />;
}

